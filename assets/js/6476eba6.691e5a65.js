"use strict";(self.webpackChunkapi_def=self.webpackChunkapi_def||[]).push([[827],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=l(n),m=r,h=c["".concat(p,".").concat(m)]||c[m]||u[m]||i;return n?a.createElement(h,s(s({ref:t},d),{},{components:n})):a.createElement(h,s({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[c]="string"==typeof e?e:r,s[1]=o;for(var l=2;l<i;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2175:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const i={slug:"/",id:"usage",title:"Usage"},s=void 0,o={unversionedId:"usage",id:"usage",title:"Usage",description:"API def provides a unified way to type your endpoints allowing for compile time checking of query, body, response and even url parameters.",source:"@site/docs/usage.md",sourceDirName:".",slug:"/",permalink:"/api-def/",draft:!1,editUrl:"https://github.com/censkh/api-def/edit/master/website/docs/usage.md",tags:[],version:"current",frontMatter:{slug:"/",id:"usage",title:"Usage"},sidebar:"someSidebar",next:{title:"Config",permalink:"/api-def/config"}},p={},l=[{value:"Getting Started",id:"getting-started",level:2},{value:"Defining Endpoints",id:"defining-endpoints",level:2},{value:"Calling an Endpoint",id:"calling-an-endpoint",level:2},{value:"Typing Body, Query &amp; Params",id:"typing-body-query--params",level:2},{value:"Setting Expected Return Statuses",id:"setting-expected-return-statuses",level:2}],d={toc:l},c="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"API def provides a unified way to type your endpoints allowing for compile time checking of query, body, response and even url parameters."),(0,r.kt)("h2",{id:"getting-started"},"Getting Started"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-commandline"},"npm i api-def\n")),(0,r.kt)("p",null,"First we define our base API and give it a base URL which is the root path of your remote service:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="/api.ts"',title:'"/api.ts"'},'import {Api} from "api-def";\n\nconst api = new Api({\n  name: "My Backend",\n  baseUrl: "http://localhost:5000/v1",\n});\n\nexport default api;\n')),(0,r.kt)("h2",{id:"defining-endpoints"},"Defining Endpoints"),(0,r.kt)("p",null,"Now let's define some endpoints we can call! Let's start with a simple definition of a health check endpoint:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="/api.ts"',title:'"/api.ts"'},'export const fetchHealthCheck = api.endpoint()\n  .responseOf<{ success: boolean; }>()\n  .build({\n    id: "fetch_health_check",\n    path: "/status/health-check",\n    method: "get",\n\n    // optional\n    name: "Health Check",\n    description: "Returns success as true",\n  });\n')),(0,r.kt)("p",null,"You can see that we give the endpoint an ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"path")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"method"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"path")," will be appended to the ",(0,r.kt)("inlineCode",{parentName:"p"},"baseUrl")," in our API object."),(0,r.kt)("p",null,"We can also provide optional ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"description")," which will help document our API and can be used in dev tools ect."),(0,r.kt)("h2",{id:"calling-an-endpoint"},"Calling an Endpoint"),(0,r.kt)("p",null,"To call our endpoint we can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"submit")," function, which will ",(0,r.kt)("inlineCode",{parentName:"p"},"GET")," the URL ",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:5000/v1/status/health-check"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"{2}","{2}":!0},"const makeRequest = async () => {\n  const res = await fetchHealthCheck.submit({});\n  return res.data.success; // true\n};\n")),(0,r.kt)("h2",{id:"typing-body-query--params"},"Typing Body, Query & Params"),(0,r.kt)("p",null,"In most cases we will want to make more complex requests, for example fetching and updating user information. Using ",(0,r.kt)("inlineCode",{parentName:"p"},"api-def")," you can also type the query, body and URL params that you pass in when you want to make one of these queries:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="/api.ts"',title:'"/api.ts"'},'interface UserData {\n    firstName: string;\n    age: number;\n}\n\nexport const fetchUser = api.endpoint()\n  .paramsOf<"uid">()\n  .responseOf<UserData & { id: string }>()\n  .build({\n    id: "fetch_user",\n\n    name       : "Fetch User",\n    description: "Fetch a user, will respond with error code \'auth/permission-denied\' if unauthorized",\n\n    path        : "/user/:uid",\n    method      : "get",\n  });\n')),(0,r.kt)("p",null,"When calling this endpoint, it is verified that all params are resolved in the path:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const res = await fetchUser.submit({\n  params: {\n      uid: "exampleId"\n  }\n});\nreturn res.data // { uid: "exampleId", firstName: "Hello World", age: 22 }\n')),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Now let's add the endpoint to update a user and see how we can type our body:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="/api.ts"',title:'"/api.ts"'},'export const updateUser = api.endpoint()\n  .paramsOf<"uid">()\n  .bodyOf<{ data: Partial<UserData> }>()\n  .responseOf<UserData & { id: string }>()\n  .build({\n    id: "update_user",\n\n    name       : "Update User",\n    description: "Updates a user, will respond with error code \'auth/permission-denied\' if unauthorized",\n\n    path        : "/user/:uid",\n    method      : "post",\n  });\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const res = await updateUser.submit({\n  params: {\n      uid: "exampleId"\n  },\n  body: {\n      data: {\n          firstName: "Test"\n      }\n  }\n});\nreturn res.data // { uid: "exampleId", firstName: "Test", age: 22 }\n')),(0,r.kt)("h2",{id:"setting-expected-return-statuses"},"Setting Expected Return Statuses"),(0,r.kt)("p",null,"By default a successful call is one that returns a status of ",(0,r.kt)("inlineCode",{parentName:"p"},"200")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"299"),". You can override this in the endpoint config with a combination of ranges, and single values."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="/api.ts (status override)"',title:'"/api.ts',"(status":!0,'override)"':!0},'export const fetchHealthCheck = api.endpoint()\n  .responseOf<{ success: boolean; }>()\n  .build({\n    id: "fetch_health_check",\n\n    name       : "Health Check",\n    description: "Returns success as true",\n\n    path        : "/status/health-check",\n    method      : "get",\n    config      : {\n      acceptableStatus : [[301, 302], 200],\n    },\n  });\n')))}u.isMDXComponent=!0}}]);