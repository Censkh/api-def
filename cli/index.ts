#!/usr/bin/env node

import * as fs from "node:fs";
import * as path from "node:path";
import { program } from "commander";
import { openApiToSourceCode } from "./OpenApiToSourceCode";

program.name("api-def");

const packageJson = JSON.parse(fs.readFileSync(path.resolve(__dirname, "../package.json"), "utf-8"));
program.version(packageJson.version);

program
  .command("generate")
  .argument("<inPath>", "Path to the OpenAPI spec")
  .argument("<outPath>", "Path to the output file")
  .option("--noHeader", "Do not include the generated by header")
  .option("--noConfig", "Do not try to resolve a config file")
  .description("Generate an api-def from an OpenAPI spec")
  .action(async (inPath, outPath, options) => {
    const { noHeader, noConfig } = options;
    const resolvedInPath = path.resolve(inPath);
    if (!fs.existsSync(resolvedInPath)) {
      console.error(`File not found: ${resolvedInPath}`);
      process.exit(1);
    }

    const output = await openApiToSourceCode({
      openApiPath: resolvedInPath,
      configFileLocation: noConfig ? undefined : `./${path.parse(outPath).name}.config`,
    });
    fs.writeFileSync(
      path.resolve(outPath),
      `${noHeader ? "" : `// Generated by 'api-def' version ${packageJson.version}\n`}${output}`,
    );
    console.log(`Generated api-def at ${outPath}`);
  });

program.parse(process.argv);
