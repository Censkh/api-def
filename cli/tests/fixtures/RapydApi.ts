// Type Defs

export interface paths {
    "/v1/payment_methods/countries/{countryId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Payment Methods by Country.
         * @description Retrieve a list of all payment methods available for a country. You can filter the results by specifying the `currency` query parameter
         */
        get: operations["getPaymentMethodsTypesByCountry"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payment_methods/{pmtId}/required_fields": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Payment Method Required Fields.
         * @description Retrieve the required fields for a payment method. The fields are returned as a list of objects. The name of each field appears in the `name` field of the response.
         */
        get: operations["getPaymentMethodTypeRequiredFields"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Payments
         * @description Retrieve a list of all payments that you have created. Filter the list with query parameters.
         */
        get: operations["listPayments"];
        put?: never;
        /**
         * Create Payment
         * @description Create a payment
         */
        post: operations["createPayment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payments/{paymentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve Payment
         * @description Retrieve details of a payment
         */
        get: operations["retrievePayment"];
        put?: never;
        /**
         * Update Payment
         * @description Change or modify a payment when the status of the payment is ACT (active). You can update additional fields if they are listed under payment_options in the response from Get Payment Method Required Fields and is_updateable is set to true
         */
        post: operations["updatePayment"];
        /**
         * Cancel Payment
         * @description Cancel a payment where the status of the payment is ACT. Relevant to payment methods where is_cancelable = true in the response to List Payment Methods by Country. This method triggers the Payment Canceled webhook. This webhook contains the same information as the response. NOTE: If the status is CLO, use the Create Refund method.
         */
        delete: operations["cancelPayment"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payments/{paymentId}/capture": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Capture Payment
         * @description Capture some or all of a card payment that was previously authorized with `capture` set to **false**.<BR>This method changes the `payment` object status to **CLO** and triggers 'Payment Captured Webhook'. This webhook contains the same information as the response. This method also triggers 'Payment Completed Webhook'. The capture operation is also known as clearing or completion.<BR>The scope of the capture operation depends on the client's pre-authorization permissions. To change these permissions, contact Rapyd Client Support.
         */
        post: operations["capturePayment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payments/completePayment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Complete Payment
         * @description To simulate the completion of a payment by the action of a third party, use this method in the sandbox.<BR> This method changes the payment status to **CLO** (closed), and applies to the **cash**, **bank_redirect**, **bank_transfer**, or **ewallet** payment method types.<BR> This method also returns the 'Payment Completed' Webhook. This webhook contains the same information as the response.<BR> For a card payment:<BR> * Capture after authorization only - Use 'Capture Payment'.<BR> * Simulate 3-D Secure (3DS) verification - See Simulating 3DS Authentication.<BR> **Prerequisites**:<BR> * Create Payment
         */
        post: operations["completePayment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/checkout/{checkout_token}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve checkout page
         * @description Retrieve a checkout page.
         */
        get: operations["getHostedPagePayment"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/checkout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create checkout page
         * @description Create a checkout page that makes a payment.
         */
        post: operations["generateHostedPagePayment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payments/subscriptions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Subscriptions
         * @description Retrieve a list of subscriptions. You can filter the list with query parameters.
         */
        get: operations["getSubscriptionList"];
        put?: never;
        /**
         * Create Subscription
         * @description Create a subscription for regular, automatic payments.
         */
        post: operations["createSubscription"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payments/subscriptions/{subscriptionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve Subscription
         * @description Retrieve the details of a subscription.
         */
        get: operations["getSubscription"];
        put?: never;
        /**
         * Update Subscription
         * @description Update the details of a subscription.
         */
        post: operations["updateSubscription"];
        /**
         * Cancel Subscription
         * @description Cancel a subscription.
         */
        delete: operations["cancelSubscription"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payments/subscriptions/{subscriptionId}/discount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Discount from Subscription
         * @description Delete the discount that was assigned to a subscription. This method does not affect the coupon that the discount was derived from.
         */
        delete: operations["deleteSubscriptionDiscount"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/checkout/subscriptions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Subscription by Hosted Page
         * @description Create a subscription using a hosted page. Relevant to card payments.
         */
        post: operations["createSubscriptionByHostedPage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payments/subscriptions/{subscriptionId}/complete_cycle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Complete a Cycle
         * @description Cancel the subscription and create an invoice. This method is for testing purposes and runs only in the sandbox.
         */
        post: operations["completeSubscriptionCycle"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payments/subscriptions/{subscriptionId}/start_new_cycle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Start a New Cycle
         * @description End a subscription cycle, create an invoice and move the subscription to the next cycle. This method is for testing purposes and runs only in the sandbox.
         */
        post: operations["simulateStartNewCycle"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/plans": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Plans
         * @description Retrieve a list of all plans. Use the optional query parameters to filter the results. You can filter the results further by specifying one or more Plan fields as additional query parameters.
         */
        get: operations["listPlans"];
        put?: never;
        /**
         * Create Plan Item
         * @description Create a pricing plan for services.
         */
        post: operations["createPlan"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/plans/{planId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve plan
         * @description Retrieve the details of a pricing plan for services.
         */
        get: operations["retrievePlan"];
        put?: never;
        /**
         * Update Plan
         * @description Change or modify a pricing plan for services. You can update a plan's nickname or metadata.
         */
        post: operations["updatePlan"];
        /**
         * Delete Plan
         * @description Delete a pricing plan for services.
         */
        delete: operations["deletePlan"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Products
         * @description Retrieve a list of all products.
         */
        get: operations["getProductsList"];
        put?: never;
        /**
         * Create Product
         * @description Create goods or services.
         */
        post: operations["createProduct"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/products/{productsId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve Product
         * @description Retrieve details of a product or service.
         */
        get: operations["getProduct"];
        put?: never;
        /**
         * Update Product
         * @description Change or modify a product or service.
         */
        post: operations["updateProduct"];
        /**
         * Delete Product
         * @description Delete a product or service from the Rapyd platform. This action also deletes all associated plans.
         */
        delete: operations["deleteProduct"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/subscription_items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Subscription Items
         * @description Retrieve a list of all subscription items for a subscription.
         */
        get: operations["listSubscriptionItem"];
        put?: never;
        /**
         * Create Subscription Item
         * @description Create a subscription item and add it to an existing subscription for recurring payment.
         */
        post: operations["createSubscriptionItem"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/subscription_items/{subscriptionItemId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve Subscription Item
         * @description Retrieve the details of a subscription item.
         */
        get: operations["retrieveSubscriptionItem"];
        put?: never;
        /**
         * Update Subscription Item
         * @description Change or modify a subscription item.
         */
        post: operations["updateSubscriptionItem"];
        /**
         * Delete Subscription Item
         * @description Delete a subscription item from the Rapyd platform.
         */
        delete: operations["deleteSubscriptionItem"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/subscription_items/{subscriptionItemId}/usage_record_summaries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Create Usage Record
         * @description Retrieve a list of usage records for a subscription item
         */
        get: operations["usageRecordSummaries"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/subscription_items/{subscriptionItemId}/usage_records": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Usage Record
         * @description Create a usage record or update an existing usage record where its unique identifier is composed of timestamp and subscription_item
         */
        post: operations["createSubscriptionItemUsageRecord"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/subscriptions/discount/{discountId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a discount of subscription.
         * @description Retrieve a discount for a subscription.
         */
        get: operations["getSubscriptionDiscountById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Invoices
         * @description Retrieve the basic data of an invoice, with individual invoice lines.
         */
        get: operations["listInvoices"];
        put?: never;
        /**
         * Create Invoice
         * @description Create an invoice to add a one-time charge to a subscription.<BR>After you create the invoice with this method, create invoice items and assign them to the invoice with Create Invoice Item. <BR> This method triggers the Invoice Created Webhook. This webhook contains the same information as the response. <BR> The following asynchronous webhook provides information about later changes to the Invoice object:Retrieve the basic data of an invoice, with individual invoice lines.<BR> * Invoice Payment Succeeded Webhook <BR>* Invoice Updated Webhook
         */
        post: operations["createInvoice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoices/{invoiceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve invoice
         * @description Retrieve the basic data of an invoice, with individual invoice lines.
         */
        get: operations["retrieveInvoice"];
        put?: never;
        /**
         * Update invoice
         * @description Change or modify an invoice. You can modify the invoice when its status is draft.
         */
        post: operations["updateInvoice"];
        /**
         * Delete invoice
         * @description Delete an invoice. You can delete an invoice when status is draft.
         */
        delete: operations["deleteInvoice"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoices/{invoiceId}/void": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Void invoice
         * @description Set an invoice to **void** status. <BR> Void invoices are similar to deleted invoices, but their records are kept for accounting purposes.Retrieve the basic data of an invoice, with individual invoice lines.
         */
        post: operations["voidInvoice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoices/{invoiceId}/finalize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Finalize Invoice
         * @description Finalize an invoice.Invoices are initially created with a draft status, and this is the only state in which an invoice can be finalized. When an invoice is ready to be paid, finalize it. This sets its status to open. Subscriptions automatically create draft invoices during each billing cycle, which are then automatically finalized. When an invoice is finalized, it can no longer be deleted and its final status can be one of the following - Paid Uncollectible* Void. An invoice can be finalized only one time.
         */
        post: operations["finalizeInvoice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoices/{invoiceId}/pay": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Pay invoice
         * @description Make a payment against an invoice.
         */
        post: operations["payInvoice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoices/{invoiceId}/mark_uncollectible": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Mark Invoice Uncollectible
         * @description Set an invoice to **uncollectible** status. <BR> This status indicates that the invoice cannot be paid by the customer.
         */
        post: operations["markInvoiceUncollectible"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoices/{invoiceId}/lines": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve Invoice Lines from Invoice
         * @description Retrieve invoice lines from an invoice. <BR>Invoice lines are subscription items or invoice items.
         */
        get: operations["getInvoiceLines"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoices/upcoming": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve Upcoming Invoice
         * @description Retrieve a preview of the basic data of the upcoming invoice for a customer, with individual invoice lines.<BR> To get the invoice lines of the invoice, use 'Retrieve Invoice Lines from Invoice'.<BR> The response generated cannot be used to generate a payment authorization.
         */
        get: operations["getUpcomingInvoice"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoices/upcoming/lines": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve Invoice Lines from Upcoming Invoice
         * @description Retrieve invoice lines from the upcoming invoice for a customer. <BR> If a customer has more than one subscription, this method retrieves the invoice lines of the invoice that is due first.<BR> This method is relevant to invoices that are automatically generated out of subscriptions.
         */
        get: operations["getInvoiceLinesUpcomingInvoice"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoice_items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Invoice Items
         * @description Retrieve a list of all invoice items. <BR> You can filter the list with query parameters.
         */
        get: operations["listInvoiceItems"];
        put?: never;
        /**
         * Create Invoice Item
         * @description Create an invoice item and add it to an invoice or subscription.<BR>**Note**: If you create an invoice item without specifying the invoice ID or subscription ID, it is attached to the customer’s next invoice that has the same currency.<BR> This method triggers the following webhooks:<BR> * **Invoice Item Created** - This webhook contains the same information as the response. <BR>* Invoice Updated Webhook
         */
        post: operations["createInvoiceItem"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoice_items/{invoiceItem}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve Invoice Item
         * @description Retrieve the details of an invoice item.
         */
        get: operations["getInvoiceItem"];
        put?: never;
        /**
         * Update Invoice Item
         * @description Change or modify an invoice item.<BR> You can update an invoice item at any time before the corresponding subscription generates an invoice.<BR> This method triggers the **Invoice Item Updated** webhook. This webhook contains the same information as the response.
         */
        post: operations["updateInvoiceItem"];
        /**
         * Delete Invoice Item
         * @description Delete an invoice item from the upcoming invoice.<BR> Use this method in the following situations:<BR> * The invoice item is attached to an invoice.<BR> * The invoice item is not attached to an invoice.<BR> This method triggers the **Invoice Item Deleted webhook**. This webhook contains the same information as the response.Retrieve the details of an invoice item.
         */
        delete: operations["deleteInvoiceItem"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/hosted/collect/payments/{paymentLink}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gwt Payment Link
         * @description Retrieve details of a payment link.
         */
        get: operations["paymentLink"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payments/group_payments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create group payment
         * @description Create a group payment.
         */
        post: operations["createGroupPayment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payments/group_payments/{groupPaymentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve group payment details
         * @description Retrieve details of a group payment.
         */
        get: operations["retrieveGroupPaymentId"];
        put?: never;
        post?: never;
        /**
         * Cancel group payment
         * @description Cancel a group payment.
         */
        delete: operations["deletegroupPaymentId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payments/{payment}/escrows/{escrow}/escrow_releases": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List releases of funds from escrow
         * @description Retrieve a list of all releases of funds from a specified escrow.
         */
        get: operations["listEscrowReleases"];
        put?: never;
        /**
         * Release funds from escrow
         * @description Retrieve a list of all releases of funds from a specified escrow.
         */
        post: operations["releaseFundsFromEscrow"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payments/{payment}/escrows/{escrow}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve details of escrow
         * @description Retrieve details of the escrow for a payment.
         */
        get: operations["getEscrow"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/refunds": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Refunds
         * @description Retrieve a list of all refunds.
         */
        get: operations["allRefunds"];
        put?: never;
        /**
         * Create Refund
         * @description Refund of a payment. The refund is credited against a specific payment. The money is returned to the payment method that was used for the payment, and the currency is the same as what was used in the payment. If the action of a third party is not required, this method triggers the Refund Completed webhook. This webhook contains the same information as the response.
         */
        post: operations["requestTotal_createRefund"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/refunds/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Complete Refund
         * @description Simulate the action of a third party that is required for completing the refund process. Relevant to sandbox. Use this method when a payment was made with a payment method such as cash, bank redirect or bank transfer, and the payment was completed by an action taken by the customer.
         */
        post: operations["simulateCompleteRefund"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/refunds/group_payments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Group Refund
         * @description Refund a group payment when the status of the group payment is closed. The refund is credited against a specific group payment. The money is returned to the payment methods that were used for the payment. If the action of a third party is not required, this method triggers the Refund Completed webhook for each payment method.
         */
        post: operations["refundGroupPayment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/refunds/{refundId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve Refund
         * @description Retrieve the details of a refund object.
         */
        get: operations["refundByToken"];
        put?: never;
        /**
         * Update Refund
         * @description Change or modify the metadata in a refund object.
         */
        post: operations["updateRefund"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/digital_wallets/session/apple_pay": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Retrieve  details of Apple Pay payment session
         * @description Retrieve the details of an Apple Pay payment session. Each payment that uses Apple Pay has a unique session.  [Activating Apple Pay](https://docs.rapyd.net/en/activating-apple-pay.html) is a prerequisite.
         */
        post: operations["getApplePaySession"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/disputes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve list of disputes
         * @description Retrieve a detailed list of 'dispute' objects.
         */
        get: operations["getDisputesListByOrgId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/disputes/{disputeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a dispute
         * @description Retrieve the details of a dispute.
         */
        get: operations["getDispute"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieves list of customers.
         * @description Retrieve a list of all customers
         */
        get: operations["listCustomer"];
        put?: never;
        /**
         * Create customer
         * @description Adds a customer to the client.
         */
        post: operations["createCustomer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customers/{customerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve customer details
         * @description Retrieve a customer.
         */
        get: operations["retrieveCustomer"];
        put?: never;
        /**
         * Update customer
         * @description Update a customer with customer Id in Path
         */
        post: operations["updateCustomer"];
        /**
         * Delete customer
         * @description This method triggers the Customer Deleted webhook. This webhook contains the same information as the response
         */
        delete: operations["deleteCustomer"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customers/discount/{discountId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve discount of customer
         * @description Retrieve a discount for a customer.
         */
        get: operations["getCustomerDiscountById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customers/{customerId}/discount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove discount
         * @description Delete the discount that has been assigned to a customer through a coupon. This action does not affect the coupon that the discount was derived from. This method triggers the **Customer Discount Deleted** webhook.
         */
        delete: operations["deleteCustomerDiscount"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/addresses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create address.
         * @description Create an address.
         */
        post: operations["createAddress"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/addresses{addressId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an address by its ID.
         * @description Retrieve an address.
         */
        get: operations["GetAddress"];
        put?: never;
        /**
         * Updates address.
         * @description Change or modify an address. To clear a field, set it to an empty string.
         */
        post: operations["UpdateAddress"];
        /**
         * Remove an address by its ID.
         * @description Remove an address that is linked to a customer or is not linked to any object.
         */
        delete: operations["DeleteAddress"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customers/{customerId}/payment_methods": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List payment methods of customer
         * @description Retrieve payment methods for a customer
         */
        get: operations["getCustomerPaymentMethods"];
        put?: never;
        /**
         * Add payment method to customer
         * @description Add a payment method to a customer profile
         */
        post: operations["createCustomerPaymentMethod"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customers/{customerId}/payment_methods/{pmtId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve payment method of customer
         * @description Retrieve a payment method for a specific customer
         */
        get: operations["getCustomerPaymentMethod"];
        put?: never;
        /**
         * Update payment method of customer
         * @description Change or modify a payment method that was stored in a customer profile
         */
        post: operations["updateCustomerPaymentMethod"];
        /**
         * Delete payment method type from customer
         * @description This method triggers the Webhook - Payment Method Canceled webhook. This webhook contains more information than the response.
         */
        delete: operations["deleteCustomerPaymentMethod"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/skus/{skuId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve SKU.
         * @description Retrieve the details of an SKU.
         */
        get: operations["retrieveSKU"];
        put?: never;
        /**
         * Update SKU.
         * @description Change or modify an SKU.
         */
        post: operations["updateSKU"];
        /**
         * Delete SKU.
         * @description Delete an SKU from the Rapyd platform.
         */
        delete: operations["deleteSKU"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/skus": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List SKUs.
         * @description Retrieve a list of all SKUs.
         */
        get: operations["listSKU"];
        put?: never;
        /**
         * Create SKU
         * @description Create an SKU and attach it to a product.
         */
        post: operations["createSKU"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Orders
         * @description Retrieve a list of all orders.
         */
        get: operations["listOrder"];
        put?: never;
        /**
         * Create an Order
         * @description Create an order for goods. For services, see Create Subscription.
         */
        post: operations["createOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orders/{orderId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve an Order
         * @description Retrieve the details of an order.
         */
        get: operations["retrieveOrder"];
        put?: never;
        /**
         * Update an Order
         * @description Change or modify an order.
         */
        post: operations["updateOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orders/{orderId}/returns": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a Return Against an Order
         * @description Make a return against an order. The maximum amount of the return is the amount of the order
         */
        post: operations["returnsOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orders/{orderId}/pay": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Pay an order.
         * @description Pay an order.
         */
        post: operations["payOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/order_returns": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Returns
         * @description Retrieve a list of all order returns.
         */
        get: operations["listOrderReturn"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/order_returns/{orderReturnsId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a Return
         * @description Retrieve the details of a return.
         */
        get: operations["retrieveOrderReturn"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/coupons": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve list of coupons
         * @description Retrieve a list of all coupons.
         */
        get: operations["listCoupon"];
        put?: never;
        /**
         * Create new coupon
         * @description create a coupon
         */
        post: operations["createCoupon"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/coupons/{couponId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve coupon
         * @description Retrieve a coupon
         */
        get: operations["retrieveCoupon"];
        put?: never;
        /**
         * Update coupon
         * @description Modify the metadata of a coupon with a coupon ID in Path
         */
        post: operations["updateCoupon"];
        /**
         * Delete coupon
         * @description Delete a coupon from the Rapyd platform. Deleting a coupon removes it from all customers and subscriptions, but does not affect invoices and payment authorizations that have already been calculated.
         */
        delete: operations["deleteCoupon"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payout_methods/{pomt}/required_fields": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Payout Required Fields
         * @description Retrieve the fields required to use a payout method type. The fields are returned as an array of objects. The name of each field appears in the name field of each object. Use this information for Create Payout, Create Beneficiary and Create Sender.
         *      Note: The fields returned by this method are required when you create a payout. If you create a payout with a sender or beneficiary that was created previously, you are responsible for choosing a sender and beneficiary that have all the fields required by the payout method.
         */
        get: operations["getPayoutMethodTypesDetails"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payouts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Payouts
         * @description Retrieve a list of payouts that you created.
         */
        get: operations["listPayouts"];
        put?: never;
        /**
         * Create Payout
         * @description Create a payout (disbursement). This method triggers the Payout Created webhook. This webhook contains the same information as the response. If the action of a third party is not required, the Payout Completed webhook is also triggered.
         */
        post: operations["createPayout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/batch_process/files/mass_payout_pci": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Mass Payout
         * @description Create a batch of payouts (disbursements) from a file. To enable the use of this method, contact Rapyd support. A request input file must be added after the header parameters in the following format: <BR> `-F 'file=@/your-file-location/mass-payout-file.csv'`
         */
        post: operations["createMassPayout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payouts/beneficiary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Beneficiary
         * @description Create a beneficiary for use in payouts.
         *     The response provides a unique beneficiary ID, which you can use in place of the Beneficiary object for Create Payout.
         *     This method triggers the Beneficiary Created webhook. This webhook contains the same information as the response.
         *     Note: In addition to the required fields documented below, you must include all other beneficiary fields listed in the response to Get Payout Required Fields, and you must conform to the regex provided.
         *     To create a beneficiary that you can use with multiple payout methods, include all fields that are required by each payout method.
         *     The client is responsible for including all required fields.
         */
        post: operations["createBeneficiary"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payouts/extended_beneficiary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Extended Beneficiary
         * @description Create a beneficiary that includes all compliance related data for payouts. The response provides a unique beneficiary ID, which you can use in place of the beneficiary object for Create Payout
         */
        post: operations["createExtendedBeneficiary"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payouts/beneficiary/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate Beneficiary
         * @description Validate the format of the details for a payout beneficiary. You can validate a beneficiary multiple times for different payout methods. You can enter a Beneficiary object or a previously created beneficiary ID.
         *      Note: In addition to the required fields for Create Beneficiary, the Beneficiary object must include all required fields for the beneficiary listed in the response to Get Payout Required Fields. The examples include additional fields for the 'us_ach_bank' payout method.
         */
        post: operations["validateBeneficiary"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payouts/beneficiary/{beneficiaryId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve Beneficiary
         * @description Retrieve details of a payout beneficiary.
         *      Note: The 'Retrieve Beneficiary - individual' response includes additional fields for the 'ca_general_bank' payout method. The 'Retrieve Beneficiary - company' response includes additional fields for the 'us_ach_bank' payout method.
         */
        get: operations["getBeneficiary"];
        put?: never;
        /**
         * Update Beneficiary
         * @description Update a beneficiary with additional fields. <BR>Note: You cannot update the values of the beneficiary fields which were defined when it was created.
         */
        post: operations["updateBeneficiary"];
        /**
         * Delete Beneficiary
         * @description Delete a payout beneficiary from the Rapyd platform.
         */
        delete: operations["deleteBeneficiary"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payouts/complete/{payoutToken}/{amount}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Complete Payout */
        post: operations["simulateCompletePayout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/hosted/disburse/beneficiary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Beneficiary Tokenization Page
         * @description Create a customer-facing page for creating a beneficiary token.<BR> This method creates a URL for a page where the customer enters details required for payouts to the beneficiary’s bank account. All available payout methods for the beneficiary’s country are listed.
         */
        post: operations["beneficiaryTokenizationPage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payouts/confirm/{payoutToken}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Confirm Payout */
        post: operations["confirmPayout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payouts/sender": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Sender
         * @description Create a sender for use in payouts.
         *     The response provides a unique sender ID, which you can use in place of the sender object for Create Payout.
         *     Note: In addition to the required fields documented below, you must include all other sender fields listed in the response to Get Payout Required Fields, and you must conform to the regex provided.
         *     To create a sender that you can use with multiple payout methods, include all fields that are required by each payout method.
         *     The client is responsible for including all required fields.
         */
        post: operations["createSender"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payouts/sender/{senderId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve Sender
         * @description Note: The Retrieve Sender - individual response includes additional fields for the **ca_general_bank** payout method. The Retrieve Sender - company response includes an additional field for the **us_ach_bank** payout method.
         */
        get: operations["getPayer"];
        put?: never;
        post?: never;
        /**
         * Delete Sender
         * @description Delete a payout sender from the Rapyd platform.
         */
        delete: operations["deletePayer"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payout_methods": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Payout Method Types
         * @description Retrieve a list of payout method types that you can use when creating a payout. The response contains a list of objects. Each object includes a payout method type and its attributes.
         */
        get: operations["getPayoutMethodTypes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payouts/{payoutId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve Payout
         * @description Retrieve the details of a payout.
         */
        get: operations["getPayout"];
        put?: never;
        /**
         * Update Payout
         * @description Change or modify a payout. This method triggers the Payout Updated webhook. This webhook contains the same information as the response.
         */
        post: operations["updatePayout"];
        /**
         * Cancel Payout
         * @description The payout can be canceled unless its status is confirmation or completed.
         *     This method triggers the Payout Canceled webhook. This webhook contains the same information as the response.
         */
        delete: operations["cancelPayout"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payouts/return/{payout}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Simulating a Payout Returned Status
         * @description Use this method in the sandbox to simulate the action of a third party that is required for returning the payout.<BR>Relevant when the status of the payout is Completed.<BR>Prerequisites:<BR>* Create Wallet<BR>* Add Funds to Wallet Account<BR>* Create Payout<BR>* Complete Payout<BR>This method triggers the 'Payout Returned' Webhook. This webhook contains the same information as the response.
         */
        post: operations["simulatePayoutReturnedStatus"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/files/documents/payout/{payout}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload Documents to Payout
         * @description Upload one supporting document file or multiple document files to a specific payout. These documents include ID scans, company registrations, and all other documents that support the validity of the payout. A file can be uploaded only when the payout is in a **Created**, **Hold**, or **Pending** status.
         */
        post: operations["uploadDocumentsToPayout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payouts/{payout}/documents/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Documents of Payout
         * @description Retrieve details of all supporting document files that were previously uploaded to a specific payout.
         */
        get: operations["listDocumentsOfPayout"];
        put?: never;
        post?: never;
        /**
         * Delete All Documents of Payout
         * @description Delete all document files that were previously uploaded to a specific payout.
         */
        delete: operations["deleteDocumentsOfPayout"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payouts/{payout}/documents/{file_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve Document of Payout
         * @description Retrieve details of all supporting document files that were previously uploaded to a specific payout.
         */
        get: operations["getDocumentOfPayout"];
        put?: never;
        post?: never;
        /**
         * Delete Document of Payout
         * @description Delete a document file that was previously uploaded to a specific payout.
         */
        delete: operations["deleteDocumentOfPayout"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/account/transfer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Transfer Funds Between Wallets
         * @description Transfer funds between Rapyd Wallets.
         */
        post: operations["fundsTransfer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/account/transfer/response": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set Transfer Response
         * @description Respond to a funds transfer between wallets. The transferee uses this method to accept or decline the transfer.
         */
        post: operations["setFundsTransferResponse"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/account/deposit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add Funds to Wallet Account
         * @description Transfer virtual currency to a Rapyd Wallet account.<BR>If the account does not already exist for the indicated currency, it is created.<BR>Use this method in the sandbox for testing purposes.<BR>This method triggers the 'Funds Added Webhook'.
         */
        post: operations["addFundsToWalletAccount"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/account/deposit/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Details of Add Funds Request
         * @description Retrieve details of a specific 'Add Funds to Wallet Account' request.<BR> Use this method in the sandbox for testing purposes.
         */
        get: operations["detailsOfAddFundstoWalletAccount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/account/withdraw": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Remove Funds From Wallet Account
         * @description Remove virtual currency from a Rapyd Wallet account.<BR>If the account does not have sufficient funds in the indicated currency, the funds transfer fails.<BR>Use this method in the sandbox for testing purposes.<BR>This method triggers the 'Funds Removed' Webhook
         */
        post: operations["withdrawFundsFromWalletAccount"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/account/withdraw{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Details of Remove Funds Request
         * @description Retrieve details of a specific 'Remove Funds From Wallet Account' request.<BR>Use this method in the sandbox for testing purposes.
         */
        get: operations["getDetailsOfRemoveFundsRequest"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/ewallets/accounts/balance/hold": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Put Funds on Hold
         * @description Put a hold on funds in the wallet. Sandbox only.<BR> This action transfers funds from the available balance to the on-hold balance. If the wallet does not have enough funds in the available balance in the specified currency, the transfer fails.<BR>This method triggers the **Transfer Funds Between Balances** webhook. This webhook contains the same information as the response.<BR>The customer cannot move funds that are on hold until the client releases the hold.<BR>This method is relevant for **person** and **company** wallets.
         */
        post: operations["putFundsOnHold"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/ewallets/{ewalletId}/contacts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Contacts of Wallet
         * @description Retrieve all contacts for a wallet.
         */
        get: operations["getEwalletContacts"];
        put?: never;
        /**
         * Add Contact to Wallet
         * @description Add a personal contact to a company wallet or client wallet.
         */
        post: operations["createEwalletContact"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/ewallets/{ewalletId}/contacts/{contactId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve Wallet Contact.
         * @description Retrieve a contact for an existing Rapyd Wallet.
         */
        get: operations["getEwalletContact"];
        put?: never;
        /**
         * Update Wallet Contact
         * @description Update a contact for a Rapyd Wallet.
         */
        post: operations["updateEwalletContact"];
        /**
         * Delete Wallet Contact
         * @description Delete a personal contact from a company wallet or client wallet.
         */
        delete: operations["deleteEwalletContact"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/ewallets/{ewalletId}/contacts/{contactId}/compliance_levels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Compliance Status of Personal Contact
         * @description Verify the compliance status of a personal contact.
         */
        get: operations["getEwalletContactComplianceLevels"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/hosted/issuing/card_details/{cardToken}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate hosted page with virtual issued card details
         * @description Generate a hosted page that displays details of a virtual issued card directly to the customer. The URL is available for 24 hours after the response is sent, and then it expires.
         */
        post: {
            parameters: {
                query?: never;
                header: {
                    /** @description Unique access key provided by Rapyd for each authorized user. */
                    access_key: string;
                    /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                    "Content-Type": string;
                    /** @description A unique key that prevents the platform from creating the same object twice. */
                    idempotency?: string;
                    /** @description Random string. Recommended length: 8-16 characters. */
                    salt: string;
                    /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                    signature: string;
                    /** @description Timestamp for the request, in Unix time (seconds). */
                    timestamp: string;
                };
                path: {
                    /**
                     * @description ID of the Issued Card Details to Customer.
                     * @example ci_7a9e7ef54d174ff9fe23f66e425145d5
                     */
                    cardToken: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["card_details_cardToken_body"];
                };
            };
            responses: {
                /** @description Display Issued Card Details to Customer. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["inline_response_200_74"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issuing/cards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List issuing cards.
         * @description Retrieve a list of all issuing cards.
         */
        get: operations["getCardIssuingList"];
        put?: never;
        /**
         * Issue Card
         * @description Issue a card to a wallet contact.
         */
        post: operations["issueCard"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issuing/cards/{cardId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Card details.
         * @description Retrieve the details of a card.
         */
        get: operations["getCardIssuingDetails"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issuing/cards/activate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Activate Issued Card Using API
         * @description Activate a card that was issued via the Rapyd issuing platform.
         */
        post: operations["activateCard"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/hosted/issuing/activate_card": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Activate Issued Card Using Hosted Page
         * @description A contact can activate his or her physical issued card.<BR>Rapyd sends you webhooks for the following actions:<BR> * Personalize a card - See 'Bulk-Issued Card Personalized Webhook' in online API reference.<BR> * Activate a card - See 'Issued Card Activated Webhook' in online API reference.<BR>**Prerequisites**<BR> * Rapyd Wallet. See 'Rapyd Wallet' in online API reference.<BR> * Wallet contact with a valid phone number. See 'Wallet Contact' in online API reference.
         */
        post: operations["hostedActivateCard"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/hosted/issuing/pin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Hosted Page for PIN Management
         * @description Create a hosted page for viewing and resetting a PIN.<BR>In the sandbox, you can set any number other than 1111.<BR>Rapyd sends you the 'Issued Card PIN Set' Webhook when the customer sets a Personal Identification Number (PIN).<BR>**Note:**<BR> * PINs are relevant to physical cards.<BR>* Some card programs do not support resetting the PIN. Holders of those cards must reset the PIN at an ATM.<BR>**Prerequisites**<BR>* Rapyd Wallet.<BR>* Wallet contact with a valid phone number.<BR>* Issued card that is activated.
         */
        post: operations["hostedCardPIN"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issuing/cards/personalize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Personalize Bulk-Issued Card
         * @description Create a connection between an issued card and a wallet contact. Relevant to cards that are issued in bulk and not assigned to any specific person. This method can be used only once per card.
         */
        post: operations["modifyCard"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issuing/cards/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update Card Status
         * @description Block or unblock a card that was issued via the Rapyd issuing platform.
         */
        post: operations["updateCardStatus"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issuing/cards/{cardId}/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Issued Card Transactions
         * @description Use the GET method to retrieve a list of transactions for a specific issued card.
         */
        get: operations["getCardIssuingTransactions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issuing/cards/{cardId}/transactions/{transactionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve Issued Card Transaction Details
         * @description Use the GET method to retrieve details of a specific transaction from a specific issued card.
         */
        get: operations["getCardIssuingTransaction"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issuing/cards/pin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set PIN Code
         * @description Set the PIN code for an issued card.<BR>This method triggers the 'Issued Card PIN Set' Webhook.<BR> **Note:**<BR>* In the sandbox, you can set any number other than 1111.<BR>* Clients with PCI certification can handle personal identifying information for cards, such as card number.<BR> * PINs are relevant to physical cards.
         */
        post: operations["setPINCode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issuing/cards/{card_id}/card_tokens/google_pay": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add Card to Google Pay - Google Pay Push Provisioning
         * @description Add a card to a Google Pay wallet using Google Pay Push Provisioning.<BR>**Note:**<BR> * PCI certification is required for this method as it contains PCI data.<BR> * The response returns the `getEncryptedPaymentInstrument` string, which is used to add the card to the Google pay wallet by using the Google Pay `pushTokenizeRequest` method. For more information refer to the Google Pay Provisioning developer documentation
         */
        post: operations["addCardtoGooglePay"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/hosted/collect/card/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Card Token
         * @description Create a hosted page for a customer to save card details and manage cards. Prerequisite: [Create Customer](https://docs.rapyd.net/en/create-customer.html).
         */
        post: operations["createCardToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issuing/cards/simulate_block": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Simulate Blocking a Card
         * @description Simulate a third-party stop notice for an issued card.<BR>Relevant to the sandbox.<BR>Rapyd sets the card status to **BLO** (blocked) and sends you the Card Issuing Blocked Webhook.<BR> To unblock the card, see Update Card Status.<BR>**Prerequisites**:<BR> * Issue Card <BR> * Activate Issued Card Using API
         */
        post: operations["simulateBlockCard"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issuing/cards/authorization": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * imulate a Card Transaction Authorization Request-EEA
         * @description Simulate Rapyd’s request to your authorization server.<BR> If you have implemented Remote Authorization, Rapyd sends authorization requests to your remote authorization server when the card network requests approval of a transaction on a card issued to a Rapyd Wallet. Use this method in the sandbox.<BR>The response contains all the fields you must send to Rapyd when you receive an authorization request in production. See also Remote Authorization.<BR> When `financial_impact` is set to **credit**, this method triggers 'Card Issuing Credit Webhook'.   When `financial_impact` is set to debit, this method triggers 'Card Issuing Authorization Approved' Webhook. Funds in the wallet move from **available balance** to **on-hold balance**. <BR> To simulate deducting the funds from the wallet, run 'Simulate Clearing a Card Transaction - EEA'.<BR> This method applies to cards issued in the European Economic Area (EEA). For cards issued outside the EEA, see Simulate a Card Transaction Authorization Request - Non-EEA.<BR>**Prerequisites**<BR> * A **company** wallet with a **personal** contact. Run 'Create Wallet' and then 'Add Contact to Wallet'<BR>* Issue Card<BR> * Activate Issued Card Using API<BR> * Add Funds to Wallet Account
         */
        post: operations["simulateCardTransactionAuthorizationRequestEEA"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issuing/cards/reversal": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Simulate a Card Transaction Authorization Reversal-EEA
         * @description Simulate a retail location’s reversal of a card authorization.<BR>The retail location where a card was used for a purchase can send a reversal through the card network to cancel a previous authorization request. This can occur when the transaction is not completed within the time required by the card issuer. When Rapyd receives a request for reversal from the card network, it reverses the transaction and sends you a webhook. Use this method in the sandbox.<BR>This method triggers Card Issuing Reversal Webhook . This method moves the reversed funds in the wallet from **on-hold** balance to **available balance**. <BR>This method applies to cards issued in the European Economic Area (EEA). For cards issued outside the EEA, see 'Simulate a Card Transaction Authorization Reversal - Non-EEA' in Rapyd's online API reference.<BR>**Prerequisites:**<BR> * Issue Card<BR> * Activate Issued Card Using API<BR> * Simulate a Card Transaction Authorization Request - EEA
         */
        post: operations["simulateCardTransactionAuthorizationReversalEEA"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issuing/cards/clearing": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Simulate Clearing a Card Transaction-EEA
         * @description Simulate clearing a debit transaction.<BR>This method triggers Webhook - Card Issuing Sale. When a fee is charged for an ATM transaction, this method also triggers Webhook - Card Issuing ATM Fee. Use this method in the sandbox.<BR>This method deducts funds from the **on-hold** balance in the wallet.<BR>**Prerequisites:**<BR> * Issue Card<BR> * Activate Issued Card Using API<BR> * Simulate a Card Transaction Authorization Request - EEA
         */
        post: operations["simulateClearingCardTransactionEEA"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issuing/cards/refund": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Simulate a Card Refund-EEA
         * @description Simulate a retail location making a refund to an issued card.<BR> This method triggers Card Issuing Refund Webhook. This method credits the **available balance** of the wallet with the refunded amount. See 'Wallet Balance Types' in online API reference. Use this method in the sandbox.<BR> This method applies to cards issued in the European Economic Area (EEA). For cards issued outside the EEA, see 'Simulate a Card Refund - Non-EEA'  in online API reference. <BR>**Prerequisites:**<BR>* An issued card. See 'Issue Card'.<BR>* Activate the card via API or by using a Hosted Page.<BR>* Authorization of a card transaction. See 'Simulate a Card Transaction Authorization Request - EEA'.
         */
        post: operations["simulateCardRefundEEA"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issuing/cards/adjustment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Simulate a Card adjustment-EEA
         * @description Use this method in the sandbox to simulate an adjustment to a card transaction. A retail location can adjust the amount of a transaction made by an issued card. The adjustment is either a credit or a debit. This method triggers Card Issuing Adjustment Webhook. This method updates the **available balance** of the wallet with the credit or deduction. See 'Wallet Balance Types' in online API Reference. This method applies to cards issued in the European Economic Area (EEA). <BR>**Prerequisites:**<BR>* Issue card<BR>* Activate the card via API <BR>* Simulate a Card Transaction Authorization Request - EEA
         */
        post: operations["SimulateCardTransactionAdjustmentEEA"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/virtual_accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Issue Virtual Account Number to Wallet
         * @description Issue a virtual account number to an existing wallet.
         */
        post: operations["createVirtualAccount"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/virtual_accounts/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Simulate a Bank Transfer to a Wallet
         * @description Simulate a deposit to a virtual account number that was issued to a wallet. This method is relevant only for testing in the sandbox. The currency of the transfer must be supported by the specific virtual account. This method triggers the Deposit Completed webhook.
         */
        post: operations["simulateBankTransferToVirtualAccount"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/virtual_accounts/{virtualAccountId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve Virtual Account History
         * @description Retrieve a Virtual Account Number object for a wallet.
         */
        get: operations["retrieveVirtualAccount"];
        put?: never;
        /**
         * Update Requested Currency
         * @description Define, change, or cancel the currency to which funds received by a virtual account are converted.<BR>The status of the virtual account must be **ACT** (active) or **PEN** (pending).<BR>To cancel a previously defined currency conversion, set `requested_currency` to **null**.<BR> Prerequisites:<BR>* Create Wallet<BR>* Verify Identity<BR> * Issue Virtual Account to Wallet
         */
        post: operations["updateRequestedCurrency"];
        /**
         * Close VA
         * @description Delete a virtual account number of an existing wallet. In order to close a virtual account its status must be ACT.
         */
        delete: operations["closeIssuing"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/virtual_accounts/capabilities/{country}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Issue Virtual Account Number
         * @description Retrieve a list of the capabilities of virtual accounts you can issue to a Rapyd Wallet.<BR> The list is filtered by country.
         */
        get: operations["capabilitiesOfVirtualAccounts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/fx_rate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get FX Rate
         * @description Retrieve a daily rate for conversion of currencies in payments and payouts. Rapyd uses a snapshot of daily foreign exchange rates fetched at 9 PM UTC. The rate returned includes the FX markup fees.
         */
        get: operations["getDailyRate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/ewallets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List eWallets
         * @description Retrieve a list of Rapyd Wallets. You can filter the list with query parameters.
         */
        get: operations["getUsers"];
        put?: never;
        /**
         * Create Wallet
         * @description Create a Rapyd Wallet.
         */
        post: operations["createUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/ewallets/{ewalletToken}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve Wallet
         * @description Retrieve the details of a Rapyd Wallet.
         */
        get: operations["getUser"];
        put?: never;
        /**
         * Update Wallet
         * @description Change or modify a Rapyd Wallet.
         */
        post: operations["updatedUser"];
        /**
         * Delete Wallet
         * @description Delete a Rapyd Wallet. Use this method when the wallet has never been used. This method triggers the Wallet Deleted webhook. This webhook contains the same information as the response.
         */
        delete: operations["deleteUser"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/ewallets/{ewalletToken}/statuses/{status}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change Wallet Status
         * @description Change Wallet Status
         */
        post: operations["updateEwalletStatus"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/ewallets/{walletId}/account/limits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set Wallet Account Limit
         * @description Set the maximum balance limit or the minimum balance threshold for an existing wallet account.
         */
        post: operations["setAccountLimit"];
        /**
         * Delete Wallet Account Limit
         * @description Delete a limit on a wallet account.
         */
        delete: operations["removeAccountLimit"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/ewallets/{walletId}/accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve Wallet Balances
         * @description Retrieve details of the balances in a Rapyd Wallet.
         */
        get: operations["getUserAccounts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/ewallets/{walletId}/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Wallet Transactions
         * @description Retrieve a list of all transactions related to a wallet.
         */
        get: operations["getUserTransactions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/ewallets/{walletId}/transactions/{transactionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Details of Wallet Transaction
         * @description Retrieve the details of a wallet transaction.
         */
        get: operations["getUserTransactionDetails"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/ewallets/{ewallet}/virtual_accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Virtual Accounts by Rapyd Wallet
         * @description List the virtual accounts that are attached to a Rapyd Wallet.
         */
        get: operations["virtualAccountsByRapydWallet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/fx_rates/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get FX Rate
         * @description Retrieve a daily rate for conversion of currencies in payments and payouts. Rapyd uses a snapshot of daily foreign exchange rates fetched at 9 PM UTC. The rate returned includes the FX markup fees.
         */
        get: operations["getFXRate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/webhooks/{webhook}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve Webhook
         * @description Retrieve a webhook. Use 'List Webhooks' to find the IDs of webhooks.
         */
        get: operations["getWebhook"];
        put?: never;
        /**
         * Resend Webhook
         * @description Resend a webhook that was not sent successfully. Use 'List Webhooks' to find the IDs of webhooks. You can resend a webhook that is in status **ERR**.
         */
        post: operations["resendWebhook"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/webhooks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Webhooks
         * @description Retrieve a list of all webhooks that were sent. You can filter the list with query parameters.
         */
        get: operations["listWebhooks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issuing/bankaccounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Issue Virtual Account Number
         * @description Issue a virtual account number to an existing wallet.
         */
        post: operations["createIssuing"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issuing/bankaccounts/bankaccounttransfertobankaccount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Simulate Bank Transfer
         * @description Imulate a deposit to a virtual account number that was issued to a wallet. This method is relevant only for testing in the sandbox. The currency of the transfer must be supported by the specific virtual account. This method triggers the Deposit Completed webhook.
         */
        post: operations["simulateCompleteBankAccountIssuingTransaction"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issuing/bankaccounts/remitters/{virtualAccountId}/transactions/{transaction_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve Remitter Details
         * @description Retrieve the details of the remitter of a transfer to a virtual bank account.
         */
        get: operations["getRemitterDetails"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issuing/bankaccounts/{virtualAccountId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve Virtual Account History
         * @description Retrieve a Virtual Account Number object for a wallet.
         */
        get: operations["retrieveIssuingByRapydToken"];
        put?: never;
        /**
         * Update Requested Currency
         * @description Define, change, or cancel the currency to which funds received by a virtual account are converted.<BR>The status of the virtual account must be **ACT** (active) or **PEN** (pending).<BR>To cancel a previously defined currency conversion, set `requested_currency` to **null**.<BR> Prerequisites:<BR>* Create Wallet<BR>* Verify Identity<BR> * Issue Virtual Account to Wallet
         */
        post: operations["updateReceivingCurrency"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/issuing/bankaccounts/{virtualAccountId}/transactions/{transactionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve Virtual Account Transaction
         * @description Retrieve a virtual account transaction.
         */
        get: operations["retrieveIssuingTransaction"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/hosted/collect/payments/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Payment Link
         * @description Creates a reusable link for a hosted payment page. <BR> A customer can use the link and the hosted payment page multiple times. After providing required information, the customer is redirected seamlessly to a Rapyd Checkout page to complete the payment.You can create the link for everyone or for a specific customer. You can make the payment amount fixed, editable, or open.
         */
        post: operations["createPaymentLink"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/identities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Verify Identity
         * @description Verification of the identity of a personal contact associated with a wallet.
         */
        post: operations["verifyIdentity"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/identities/types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List ID Documents
         * @description Use this method to determine the types of documents to use for identification purposes, and also whether you need the reverse side of the document. You can filter your search results by country with the country query parameter.
         */
        get: operations["getKycIdVerificationSupportedDocTypes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/verify/applications/types/country/{country}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Verify Application Types
         * @description Retrieve a List types of identity verification applications by country. You can filter the list with query parameters.
         */
        get: operations["getApplicationTypesByCountry"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/verify/applications/status/{application}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve verify Application Status
         * @description Retrieve the status of an application for verification of identity. You can filter the list with query parameters.
         */
        get: operations["getApplicationStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/verify/applications/hosted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Hosted Verify Application
         * @description Create an application for Rapyd Verify where the client (applicant) provides information directly to Rapyd. After the applicant submits the application on the hosted page, Rapyd verifies the information. When the status of the application changes, Rapyd sends you a webhook.
         *
         */
        post: operations["createHostedApplicationToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/verify/applications/hosted/{verifyAppId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Verify Hosted Application
         * @description Retrieve Rapyd Verify Application
         */
        get: operations["getHostedApplicationByToken"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/hosted/idv": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Identity Verification Page
         * @description Create a hosted page for verifying the identity of a personal contact for a Rapyd Wallet.<BR>The customer completes the process by accessing the URL returned in the response.<BR>After the customer submits the identity verification request on the hosted page, Rapyd verifies the information and sends you a webhook with a summary of the identity check. See:<BR>* Identity Verification Webhook - Sandbox Approved<BR>* Identity Verification Webhook - Production Approved<BR>* Identity Verification Webhook - Production Not Approved<BR>**Prerequisites**<BR>* Rapyd Wallet
         */
        post: operations["identityVerificationPage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/cnl/termination_query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Initiate Merchant Query
         * @description Submit information about a merchant to begin the process of querying the merchant history in the databases of the card networks.<BR>This method validates the data in your request.<BR>This is the first step in the process of querying the card networks about a potential new merchant. When this step is completed successfully, proceed to 'Retrieve Query Results'.
         */
        post: operations["initiateMerchantQuery"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/cnl/termination_query/{partner_query_reference}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve Query Results
         * @description Submit information about a merchant to begin the process of querying the merchant history in the databases of the card networks.<BR>This method validates the data in your request.<BR>This is the first step in the process of querying the card networks about a potential new merchant. When this step is completed successfully, proceed to 'Retrieve Query Results'.
         */
        get: operations["retrieveQueryResults"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/hosted/config/supported_languages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Supported Languages
         * @description Retrieve a list of the languages supported for hosted pages.<BR> A hosted page can appear in many foreign languages. The `language` (or `merchant_language`) field determines the default language of a hosted page. The field type is string. Use lower-case letters for the value.<BR> * If no value is specified, the language of the user's browser is used. <BR> * If the language of the user's browser cannot be determined, the default language is English. <BR> Relevant to: <BR>* Display Issued Card Details to Customer <BR> * Create Subscription by Hosted Page <BR> * Create Checkout Page <BR> * Create Payment Link <BR> * Create Beneficiary Tokenization Page <BR> * Create Card Token <BR> * Create Identity Verification Page <BR> * Activate Issued Card Using Hosted Page <BR> * Create Hosted Page for PIN Management
         */
        get: operations["listSupportedLanguages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/data/countries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Countries
         * @description Retrieve a list of all countries.
         */
        get: operations["listCountries"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/data/currencies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Currencies
         * @description Retrieve a list of all currencies.
         */
        get: operations["listCurrencies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ApplePayObject: {
            /** @description The canonical name for the client's business, suitable for display. 64 or fewer UTF-8 characters. Relevant to Apple Pay. */
            display_name: string;
            /** @description The client's fully qualified domain name, without the final period. For example, **acmegeneralproducts.rapyd.net** */
            initiative_context: string;
        };
        ApplePayObjectResponse: {
            /** @description The canonical name for the client's business, suitable for display. 64 or fewer UTF-8 characters. Relevant to Apple Pay. */
            display_name?: string;
            /** @description The domain name of the client's ecommerce site. */
            domainName?: string;
            /** @description Time of creation of the Apple Pay session, in Unix time. */
            epochTimestamp?: number;
            /** @description Time of expiration of the Apple Pay session, in Unix time. */
            expiresAt?: number;
            /** @description Your Apple Pay merchant ID. */
            merchantIdentifier?: string;
            /** @description Your Apple Pay session ID. */
            merchantSessionIdentifier?: string;
            /** @description A string that uniquely identifies each call to Apple Pay. */
            nonce?: string;
            /** @description The number of previous attempts to get an Apple Pay Session object. */
            retries?: number;
            /** @description Digital signature that validates the authenticity and integrity of a digital wallet payment. */
            signature?: string;
        };
        /** @enum {string} */
        EntityTypeVerify: "Partnership" | "Sole Proprietor" | "Private Limited Company" | "Charity or NPO" | "Individual";
        VerifyHostedAppResponse: {
            /**
             * @description Identifier of the hosted application. String starting with happ_.
             * @example happ_327bc354-2b6f-41d9-90e3-74aa7fed3287
             */
            token?: string;
            /** @description The ID of the Rapyd wallet of the company. String starting with ewallet_. Must be a company type wallet. */
            rapyd_entity_token?: string;
            /** @description URL where the customer is redirected after pressing Back to Website to exit the hosted page. This URL overrides the merchant_website URL. Does not support localhost URLs. */
            cancel_url?: string;
            /** @description URL where the customer is redirected after pressing Close to exit the hosted page. This URL overrides the merchant_website URL. Does not support localhost URLs. */
            complete_url?: string;
            /** @description ID defined by the client. Limited to 255 characters. */
            client_reference_id?: string;
            /** @description Identifier of the application. String starting with app_. */
            application_token?: string;
            /** @description The phone number of the applicant. This is the phone number where an authentication code is sent. Must have a leading plus sign (+). */
            phone_number?: string;
            merchant_details?: components["schemas"]["VerifyHostedAppResponse_merchant_details"];
            /** @description URL of the hosted page that is shown to the customer. */
            redirect_url?: string;
            /** @description A JSON object defined by the client */
            metadata?: Record<string, never>;
            authorized_user_email?: string;
        };
        Account: {
            /** @description Three-letter ISO 4217 code for the currency of the account. */
            alias?: string;
            /** @description Available funds in the account. */
            balance?: number;
            currency?: components["schemas"]["Currency"];
            /** @description ID of the account. UUID */
            id?: string;
            limit?: string;
            limits?: components["schemas"]["Limit"][];
            /** @description Amount in the on-hold balance of the account. */
            on_hold_balance?: number;
            /** @description Amount of escrow funds in the account. */
            received_balance?: number;
            /** @description Amount in the reserve balance of the account. */
            reserve_balance?: number;
        };
        /** @description address associated with this specific Rapyd entity Payment/Customer etc... */
        Address: {
            /** @description Name of the canton administrative subdivision, as used in banking. */
            canton?: string;
            /** @description City portion of the address. Required for issuance of a card to the wallet contact. */
            city?: string;
            country?: components["schemas"]["Country"];
            /** @description Time of creation of the payment, in Unix time. Response only. */
            created_at?: number;
            /** @description Name of the district administrative subdivision, as used in banking. */
            district?: string;
            /** @description ID of the Address object. String starting with **address_**. */
            id?: string;
            /** @description Line 1 of the address, such as a building number and street name. */
            line_1: string;
            /** @description Line 2 of the address, such as a suite or apartment number, or the name of a named building. */
            line_2?: string;
            /** @description Line 3 of the address, such as a suite or apartment number, or the name of a named building. */
            line_3?: string;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /** @description The name of a contact person or an 'in care of' person at this address. For a **personal** wallet contact type, alphabetic characters and spaces.A JSON object defined by the client. */
            name: string;
            /** @description Phone number associated with this specific address in E.164 format. Must be unique. */
            phone_number?: string;
            /** @description State or province portion of the address. */
            state?: string;
            /** @description Postal code portion of the address. */
            zip?: string;
        };
        AddCardtoGooglePayResponse: {
            /** @description The base64 encoded string that contains the encrypted object for Push Provisioning. Required for adding the card to the Google Pay wallet by using the Google Pay `pushTokenizeRequest` method. For more information refer to the Google Pay Provisioning developer documentation .Details of an account funding transaction (AFT), which transfers funds from a card to a cardholder's wallet. */
            PaymentInstrumentData?: string;
            UserAddress?: components["schemas"]["AddCardtoGooglePayResponse_UserAddress"];
        };
        AddressResponse: {
            /** @description Name of the canton administrative subdivision, as used in banking. */
            canton?: string;
            /** @description City portion of the address. */
            city?: string;
            /** @description The two-letter ISO 3166-1 ALPHA-2 code for the country. */
            country?: string;
            /** @description Time of creation of the object, in Unix time. */
            created_at?: number;
            /** @description Name of the district administrative subdivision, as used in banking. */
            district?: string;
            /** @description ID of the `address` object. */
            id?: string;
            /** @description Line 1 of the address, such as a building number and street name. */
            line_1?: string;
            /** @description Line 2 of the address, such as a suite or apartment number, or the name of a named building. */
            line_2?: string;
            /** @description Line 2 of the address, such as a suite or apartment number, or the name of a named building. */
            line_3?: string;
            /** @description A JSON object defined by the client. */
            metadata?: unknown;
            /** @description The name of a contact person or an 'in care of' person at this address. For a **personal** wallet contact type, alphabetic characters and spaces.A JSON object defined by the client. */
            name?: string;
            /** @description Phone number associated with this specific address in E.164 format. Must be unique. */
            phone_number?: string;
            /** @description State or province portion of the address. */
            state?: string;
            /** @description Postal code portion of the address. */
            zip?: string;
        };
        /** @description Indicates the amount range for the payment method's currencies. Each object contains the following fields:* currency - Three-letter ISO 4217 format of currency* maximum_amount - The maximum payment amount* minimum_amount - The minimum payment amount */
        PayoutAmountRangePerCurrency: components["schemas"]["PayoutAmountRangePerCurrency_inner"][];
        VirtualAccountIssuing: {
            /** @description ID of the virtual account number object. String starting with issuing_. */
            id?: string;
            /** @description Identifier defined by the client for reference purposes. Limit - 45 characters. */
            merchant_reference_id?: string;
            /** @description ID of the Rapyd Wallet that the virtual account is attached to. String starting with ewallet_. */
            ewallet?: string;
            /** @description Details about the virtual account. */
            bank_account?: Record<string, never> | null;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /**
             * @description Indicates the status of the virtual account. * ACT (Active) * CLO (Closed)  * ERR (Error)  * PEN (Pending)  * REJ (REjected)  * DIS  * ENA
             *
             * @example ACT
             * @enum {string}
             */
            status?: "ACT" | "CLO" | "ERR" | "PEN" | "REJ" | "DIS" | "ENA";
            /** @description Description of the transaction, as defined by the client. */
            description?: string;
            /** @description Issuied virtual account funding instructions. */
            funding_instructions?: Record<string, never> | null;
            currency?: components["schemas"]["Currency_1"];
            /** @description Currency received by the virtual account after conversion. One of the following: AUD - Australian Dollar EUR - Euro GBP - Pound Sterling HKD - Hong Kong Dollar SGD - Singapore Dollar USD - US Dollar
             *      */
            requested_currency?: string;
            /** @description Issuied virtual account transactions. */
            transactions?: components["schemas"]["VirtualAccountTransactionResponse"][];
        };
        Beneficiary: {
            /** @description American Bankers Association routing transit number. United States. */
            aba?: string;
            /** @description The person's account number. */
            account_number?: string;
            /** @description Automated Clearing House (ACH) code. */
            ach_code?: string;
            /** @description Additional data required by the payout method. Object. */
            additional_data?: Record<string, never>;
            /** @description The person's second last name. */
            additional_last_name?: string;
            /**
             * @description Street and number portion of the person's address.
             * @example 23 NY, US
             */
            address?: string;
            /** @description Name of the account holder. */
            bank_account_holder_name?: string;
            /** @description Type of bank account, such as checking or savings. */
            bank_account_type?: string;
            /** @description Street and number portion of the bank's address. */
            bank_address?: string;
            /** @description Identifier for the bank branch. */
            bank_branch_code?: string;
            /** @description Name of the bank branch. */
            bank_branch_name?: string;
            /** @description City portion of the bank's address. */
            bank_city?: string;
            /**
             * @description Domestic identifier of the bank.
             * @example CNFC120452
             */
            bank_code?: string;
            /** @description Two-letter ISO 3166-1 ALPHA-2 code for the bank's country. */
            bank_country?: string;
            /**
             * @description Name of the bank.
             * @example Central Bank
             */
            bank_name?: string;
            /** @description State or province portion of the bank's address. */
            bank_province?: string;
            /** @description NA. */
            beneficiary_bic_local?: string;
            /**
             * @description Relationship between the sender and the beneficiary.
             * @example Friend
             */
            beneficiary_relationship?: string;
            /**
             * @description BIC (SWIFT) code for the bank account.
             * @example 12345678XXX
             */
            bic_swift?: string;
            /** @description Bank State Branch code for Australia. */
            bsb_code?: string;
            /** @description The cardâ€™s expiration month. */
            card_expiration_month?: string;
            /** @description The cardâ€™s expiration year. */
            card_expiration_year?: string;
            /** @description The card number. */
            card_number?: string;
            category?: components["schemas"]["Category"];
            /**
             * @description City portion of the address.
             * @example New York
             */
            city?: string;
            /** @description Standardized bank code for Mexico. */
            clabe?: string;
            /** @description China National Advanced Payments System (CNAPS) code number. */
            cnaps?: string;
            /**
             * @description Name of the beneficiary company. Relevant when entity_type is company.
             * @example Rapyd
             */
            company_name?: string;
            /** @description Indicates whether the beneficiary must respond to accept or decline a payout. Default is false. Relevant to the rapyd_ewallet payout method type */
            confirmation_required?: boolean;
            country?: components["schemas"]["Country"];
            currency?: components["schemas"]["Currency"];
            /** @description The person's date of birth. */
            date_of_birth?: string;
            /** @description Date of incorporation of the corporation. */
            date_of_incorporation?: string;
            /** @description The type of payout method for the beneficiary. The two-letter prefix must match the beneficiary country code. */
            default_payout_method_type?: string;
            /** @description The person's email address. */
            email?: string;
            entity_type?: components["schemas"]["EntityType"];
            /** @description ID of the wallet that the money is transferred to. String starting with **ewallet_**. Relevant to payout to Rapyd Wallet. */
            ewallet?: string;
            /**
             * @description First name of the beneficiary. Relevant when **entity_type** is individual.
             * @example John
             */
            first_name?: string;
            /**
             * @description International Bank Account Number.
             * @example 12873045315519
             */
            iban?: string;
            /**
             * @description ID of the 'beneficiary' object. String starting with **beneficiary_**. Response only.
             * @example beneficiary_8ba699483c80b7fb9f7e658be3275703
             */
            id?: string;
            /**
             * @description The date of issuance of the person's identification document.
             * @example 27/10/2019
             */
            id_date_of_issue?: string;
            /**
             * @description The government agency that issued the person's identification document.
             * @example Indian Government
             */
            id_issue_authority?: string;
            /**
             * @description The location where the person's identification document was issued.
             * @example INDIA
             */
            id_issue_location?: string;
            /**
             * @description Type of identification document for the beneficiary. When entity_type is company, this field must be company_registered_number.
             *     When entity_type is individual, one of the following values: * drivers_license * identification_id * international_passport * residence_permit* social_security * work_permit
             *
             * @example drivers_license
             */
            identification_type?: string;
            /**
             * @description identification number on the document mentioned in identification_type.
             * @example AYKI86547930
             */
            identification_value?: string;
            /** @description Indian Financial System Code for a bank branch. */
            ifsc?: string;
            /** @description NA. */
            issuer_code?: string;
            /**
             * @description Last name of the beneficiary. Relevant when `entity_type` is individual.
             * @example Doe
             */
            last_name?: string;
            /**
             * @description ID defined by the merchant. Rapyd does not validate this value to enforce uniqueness.
             * @example GHY-0YU-HUJ-POI
             */
            merchant_reference_id?: string;
            /** @description The person's middle name. */
            middle_name?: string;
            /** @description Mobile phone number in E.164 format. */
            mobile_number?: string;
            /**
             * @description The person's full name.
             * @example John Doe
             */
            name?: string;
            /**
             * @description The person's nationality.
             * @example Indian
             */
            nationality?: string;
            /** @description Additional classification of the type of payment, as required by the bank. Possible values: priority , regular */
            payment_type?: string;
            /**
             * @description The country code of the person's phone.
             * @example 1
             */
            phone_country_code?: string;
            /** @description Phone number in E.164 format. */
            phone_number?: string;
            /**
             * @description Postal code portion of the address.
             * @example 110004
             */
            postcode?: string;
            /** @description Province portion of the address. */
            province?: string;
            /** @description Purpose of the transaction. */
            purpose_code?: string;
            /** @description NA. */
            routing_code_type_1?: string;
            /** @description NA. */
            routing_code_type_2?: string;
            /** @description NA. */
            routing_code_type_3?: string;
            /** @description NA. */
            routing_code_value_1?: string;
            /** @description NA. */
            routing_code_value_2?: string;
            /** @description NA. */
            routing_code_value_3?: string;
            /** @description Routing number for the UK. */
            sort_code?: string;
            /**
             * @description State portion of the address.
             * @example New York
             */
            state?: string;
            /** @description Additional description suitable for a customer transaction statement. */
            statement_narrative?: string;
            /** @description District of the sender's or beneficiary's city. */
            suburb?: string;
            /**
             * @description Tax identification number.
             * @example AIYPK06263
             */
            tax_id?: string;
            /** @description Virtual Payment Address. */
            vpa?: string;
        };
        /** @enum {string} */
        Category: "bank" | "card" | "cash" | "ewallet" | "rapyd_ewallet" | "bank_redirect" | "bank_transfer";
        CardIssuing: {
            /** @description Time that the card was activated, in Unix time. Response only. */
            activated_at?: number;
            /** @description Time that the card was assigned to a cardholder, in Unix time. Response only. */
            assigned_at?: number;
            /** @description Reason for blocking the card. */
            blocked_reason?: string;
            /** @description ID of the card. String starting with **card_**. */
            card_id?: string;
            /** @description ID of the card program that the card is issued from. String starting with **cardprog_**. */
            card_program?: string;
            /** @description The country where the card is issued. Two-letter ISO 3166-1 ALPHA-2 code. Response only. */
            country_iso_alpha_2?: string;
            /** @description Time of creation of the issued card object, in Unix time. Response only. */
            created_at?: number;
            ewallet_contact?: components["schemas"]["Contact"];
            /** @description ID of the Issued Card object. String starting with **ci_**. */
            id?: string;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /** @description Details of the issued card. */
            public_details?: Record<string, never>;
            /** @description Status of the card */
            status?: string;
            /** @description Reserved */
            card_tracking_id?: string;
        };
        CardIssuingMasked: {
            /** @description Time that the card was activated, in Unix time. Response only. */
            activated_at?: number;
            /** @description Time that the card was assigned to a cardholder, in Unix time. Response only. */
            assigned_at?: number;
            /** @description Reason for blocking the card. */
            blocked_reason?: string;
            /** @description ID of the card. String starting with **card_**. */
            card_id?: string;
            /** @description ID of the card program that the card is issued from. String starting with **cardprog_**. */
            card_program?: string;
            /** @description Reserved. Webhook only. */
            configuration?: string;
            /** @description The country where the card is issued. Two-letter ISO 3166-1 ALPHA-2 code. Response only. */
            country_iso_alpha_2?: string;
            /** @description Time of creation of the issued card object, in Unix time. Response only. */
            created_at?: number;
            ewallet_contact?: components["schemas"]["Contact"];
            /** @description ID of the Issued Card object. String starting with **ci_**. */
            id?: string;
            /** @description A JSON object defined by the client. */
            metadata?: string;
            /** @description Details of the issued card. */
            public_details?: Record<string, never>;
            /** @description Status of the card */
            status?: string;
            /** @description Reserved */
            card_tracking_id?: string;
            /** @description Actual card number */
            card_number?: string;
            /** @description Card security code */
            cvv?: string;
            /** @description Expiration month of the card. Two digits. Relevant when the card issuer supports it for the country. */
            expiration_month?: string;
            /** @description Expiration year of the card. Two digits. Relevant when the card issuer supports it for the country. */
            expiration_year?: string;
            /** @description Bank Identifier Number for the institution issuing the card. Response only. */
            bin?: string;
            /** @description Two-digit code. */
            sub_bin?: string;
        };
        CardDetailsResponse: {
            card?: string;
            country?: components["schemas"]["Country_1"];
            currency?: components["schemas"]["Currency_1"];
            /** @description ID of the customer, a string starting with **cus_**. */
            customer?: string;
            /** @description ID of the card token hosted page, a string starting with hp_card_ */
            id?: string;
            /** @description End of the time when the customer can use the hosted page, in Unix time. If page_expiration is not set, the hosted page expires 14 days after creation. Range is 1 minute to 30 days. */
            page_expiration?: number;
            /** @description Limits the page to a specific type of payment method. For example, dk_visa_card */
            payment_method_type?: string;
            payment_params?: components["schemas"]["PaymentParams"];
            customer_card_payment_methods?: components["schemas"]["CustomerPaymentMethod"];
        };
        CardTransaction: {
            /** @description Amount of the transaction, in units defined in currency. Decimal, including the correct number of decimal places for the currency exponent, as defined in ISO 2417:2015. Response only. */
            amount?: number;
            /** @description Authorization code sent to the merchant. Relevant to authorizations approved by Rapyd. Response only. */
            auth_code?: string;
            /** @description Approver of the transaction when remote authorization is used. See Remote Authorization. */
            authorization_approved_by?: string;
            /** @description The first 6 digits of the card number. Response only. */
            bin?: string;
            card_authorization?: string;
            /** @description ID of the card. String starting with card_. Response only. */
            card_id?: string;
            /** @description ID of the card program that the card is issued from. String starting with **cardprog_**. Response only. */
            card_program?: string;
            /** @description Time of creation of the transaction object, in Unix time. Response only. */
            created_at?: number;
            currency?: components["schemas"]["Currency"];
            /** @description The exchange rate. Response only. */
            fx_rate?: number;
            /** @description ID of the issued card transaction object. String starting with **cit_**. */
            id?: string;
            /** @description Type of the transaction. */
            issuing_txn_type?: string;
            /** @description The last 4 digits of the card number. Response only. */
            last4?: string;
            /** @description Four-digit merchant category code (MCC) of the initiator of the transaction, as defined in ISO 18245. Response only. */
            merchant_category_code?: string;
            /** @description Name and location of the merchant. Maximum 40 characters. Response only. */
            merchant_name_location?: string;
            /** @description ID of the original card transaction. Response only. */
            original_transaction_id?: string;
            /** @description Original amount for FX transactions, when currency is different from original_txn_currency. Response only. */
            original_txn_amount?: number;
            /** @description Original currency in FX transaction. Three-letter ISO 4217 code. Response only. */
            original_txn_currency?: string;
            /**
             * @description The mode of the POS entry. One of the following
             * @enum {string}
             */
            pos_entry_mode?: "magstripe" | "manual_entered" | "emv" | "emv_standin" | "nfc" | "network_token" | "ecommerce" | "3ds_ecommerce" | "adjustment";
            /** @description Reserved. */
            retrieval_reference_number?: string;
            /** @description Reserved */
            systems_trace_audit_number?: string;
            /** @description ID of the wallet transaction. String starting with **wt_**. Response only. */
            wallet_transaction_id?: string;
        };
        Contact: {
            address?: components["schemas"]["Address"];
            business_details?: components["schemas"]["ContactBusiness"];
            /** @description Indicates the degree to which this contact can use the wallet. */
            compliance_profile?: number;
            /**
             * @description Type of contact.
             * @enum {string}
             */
            contact_type?: "personal" | "business";
            country?: components["schemas"]["Country"];
            created_at?: number;
            /** @description Date of birth of the individua */
            date_of_birth?: string;
            /** @description Email address of the contact */
            email?: string;
            /** @description ID of the Rapyd Wallet that this contact is associated with. String starting with **ewallet_**. */
            ewallet?: string;
            /** @description First name of the personal contact or primary person associated with the business contact. */
            first_name?: string;
            /**
             * @description Gender of the personal contact or primary person associated with the business contact
             * @enum {string}
             */
            gender?: "male" | "female" | "other" | "not_applicable";
            /**
             * @description Description of the type of residency at the contact's residence.
             * @enum {string}
             */
            house_type?: "lease" | "live_with_family" | "own" | "owner" | "month_to_month" | "housing_project";
            /** @description ID of the contact object. String starting with cont_. */
            id?: string;
            /** @description ID number as shown by the ID document. */
            identification_number?: string;
            /** @description Type of the identification document associated with the contact. Uppercase. */
            identification_type?: string;
            /** @description Describes additional information about the business contact for a company wallet. */
            issued_card_data?: Record<string, never>;
            /** @description Family name of the personal contact or primary person associated with the business contact. Required for issuing a card to a personal contact. */
            last_name?: string;
            /**
             * @description Marital status of the personal contact or primary person associated with the business contact.
             * @enum {string}
             */
            marital_status?: "married" | "single" | "divorced" | "widowed" | "cohabiting" | "not_applicable";
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /** @description Middle name of the personal contact or primary person associated with the business contact. */
            middle_name?: string;
            /** @description Name of the contact's mother */
            mothers_name?: string;
            nationality?: components["schemas"]["Country"];
            /** @description Phone number of the contact in E.164 format. */
            phone_number?: string;
            /** @description Second last name of the personal contact or primary person associated with the business contact. */
            second_last_name?: string;
            /**
             * @description Determines whether Rapyd sends notifications to the contact. Default is false.
             * @default false
             */
            send_notifications: boolean;
            /**
             * @description Result of the verification check.
             * @enum {string}
             */
            verification_status?: "not verified" | "KYCd";
            /** @description Reference ID for the contact. Limited to 45 characters. Should be unique per merchant per e-wallet. */
            contact_reference_id?: string;
        };
        ContactBusiness: {
            address?: components["schemas"]["Address"];
            /** @description Annual revenue of the business in US dollars. Maximum value 100000000000000. Decimal. */
            annual_revenue?: number;
            /** @description Business activity code of the business, according to the ClassificaÃ§Ã£o Nacional de Atividades EconÃ´micas of Brazil. Alphanumeric string. Maximum 7 characters. */
            cnae_code?: string;
            /** @description Time of creation of the business_details object, in Unix time. Response only. */
            created_at?: number;
            /**
             * @description Type of business entity
             * @enum {string}
             */
            entity_type?: "sole_prop" | "partnership" | "company" | "government" | "charity" | "NPO" | "association" | "trust";
            /** @description Date that the business was established. Format YYYY-MM-DD */
            establishment_date?: string;
            /** @description ID of the business_details object. String starting with busi_. */
            id?: string;
            /** @description Name of the industry that this business belongs to. Required. Alphanumeric string with no special characters. */
            industry_category?: string;
            /** @description Subcategory of the industry that this business belongs to. */
            industry_sub_category?: string;
            /** @description Type of legal entity. Alphanumeric string. */
            legal_entity_type?: string;
            /** @description Business name. */
            name?: string;
            /** @description Registration number. */
            registration_number?: string;
        };
        /** @description Country of the beneficiary. Two-letter ISO 3166-1 ALPHA-2 code. The two-letter prefix of the payout method type must match the beneficiary country code. */
        Country: string;
        Currency: string;
        /** @description Describes currency conversion for payments and payouts. Rapyd uses a snapshot of daily foreign exchange rates fetched at 9 PM UTC. The rate returned includes the FX markup fees. */
        DailyRate: {
            /**
             * @description The type of transaction that the currency exchange applies to. One of the following - payment, payout
             * @example payment
             */
            action_type?: string;
            /**
             * @description If fixed_side is buy, the value of amount. If fixed_side is sell, the value of buy_currency following the currency exchange transaction. Relevant when amount and `fixed_side` are specified.
             * @example 1000
             */
            buy_amount?: number;
            /**
             * @description The currency purchased in the currency exchange transaction. Three-letter ISO 4217 code. Uppercase.
             * @example ISK
             */
            buy_currency?: string;
            /**
             * Format: date
             * @description The date when the rate is applicable. Today or earlier. Format is YYYY-MM-DD. Default is today.
             * @example 2024-06-15
             */
            date?: string;
            /**
             * @description Indicates which currency the rate is fixed for. One of the following : * buy - The currency defined by buy_currency. * sell : The currency defined by sell_currency.
             * @example buy
             */
            fixed_side?: string;
            /**
             * @description The exchange rate. Includes FX markup fees.
             * @example 128.1629678715
             */
            rate?: number;
            /**
             * Format: float
             * @description If `fixed_side` is **sell**, the value of amount. If `fixed_side` is **buy**, the value of `sell_currency` following the currency exchange transaction. Relevant when `amount` and `fixed_side` are specified.
             * @example 7.8
             */
            sell_amount?: number;
            /**
             * @description Selling currency
             * @example USD
             */
            sell_currency?: string;
        };
        ListWebhooksResponse: {
            attempts?: components["schemas"]["ListWebhooksResponse_attempts"];
            /** @description Timestamp for the creation of the webhook. Unix time. */
            created_at?: number;
            /** @description The data section of the webhook itself. */
            data?: Record<string, never>;
            /** @description Timestamp of the last attempt at sending the webhook. Unix time. */
            last_attempt_at?: number;
            /** @description Timestamp of the next attempt at sending the webhook. Unix time. */
            next_attempt_at?: number;
            /** @description Status of the webhook. One of the following: <BR> * **NEW** (new) - The webhook was created and has not yet been sent successfully. <BR> * **CLO** (closed) - The webhook was sent successfully.<BR> * **ERR** (error) - Attempts were made to send the webhook, but the maximum number of retries was reached. The automatic retry process failed. The webhook was not sent. <BR> * **RET** (retried) - The webhook was resent. */
            status?: string;
            /** @description ID of the webhook. String starting with **wh_**. */
            token?: string;
            /** @description Internal name of the webhook type. */
            type?: number;
        };
        ResendWebhookResponse: {
            attempts?: components["schemas"]["ListWebhooksResponse_attempts"];
            /** @description Timestamp for the creation of the webhook. Unix time. */
            created_at?: number;
            /** @description The data section of the webhook itself. */
            data?: Record<string, never>;
            /** @description Timestamp of the last attempt at sending the webhook. Unix time. */
            last_attempt_at?: number;
            /** @description Timestamp of the next attempt at sending the webhook. Unix time. */
            next_attempt_at?: number;
            /** @description Status of the webhook. One of the following: <BR> * **NEW** (new) - The webhook was created and has not yet been sent successfully. <BR> * **CLO** (closed) - The webhook was sent successfully.<BR> * **ERR** (error) - Attempts were made to send the webhook, but the maximum number of retries was reached. The automatic retry process failed. The webhook was not sent. <BR> * **RET** (retried) - The webhook was resent. */
            status?: string;
        };
        ListCountriesResponse: {
            languages?: components["schemas"]["ListCountriesResponse_languages"];
        };
        ListCurrenciesResponse: {
            /** @description Three-letter ISO 4217 alphabetic code for the currency. */
            code?: string;
            /** @description Number of digits for the minor currency unit. */
            digits_after_decimal_separator?: string;
            /** @description Name of the currency in English. */
            name?: string;
            /** @description ISO 4217 numeric code for the currency. */
            numeric_code?: string;
            /** @description Unicode symbol for the currency. If there is no official Unicode symbol, this field contains the string **undefined**. */
            symbol?: string;
        };
        ListSupportedLanguagesResponse: {
            languages?: components["schemas"]["ListSupportedLanguagesResponse_languages"];
        };
        /** @description Describes the fields relating to discounts in REST messages and webhooks for customer profiles and subscriptions Contains information about the coupon that applies to the customer. Read-only field. Adding a discount is a 2-step process - 1. Create Coupon, which returns a coupon ID. 2. Add the coupon ID to the coupon field of the customer with Create Customer or Update Customer. */
        CustomerDiscount: {
            coupon?: components["schemas"]["Coupon"];
            /**
             * @description ID of the Customer object that the discount applies to. String starting with cus_. Response only.
             * @example cus_3f4ed3168413d863671602dfbe839aa2
             */
            customer?: string;
            /**
             * @description The final time that a discount can be used, in Unix time. When the value is -1, the discount never expires. Response only.
             * @example 1679473563
             */
            end?: number;
            /**
             * @description ID of the Discount object. String starting with dis_. Response only.
             * @example dis_ab0445dee00fdcdd83811760ffe90e3b
             */
            id?: string;
            /**
             * @description The number of times that the discount was used for a specific customer or subscription. The initial value is 0. The value is incremented by 1 each time that the discount is used. Response only.
             * @example 0
             */
            number_of_uses?: number;
            /**
             * @description The time that a discount was created, in Unix time. Response only.
             * @example 1679473563
             */
            start?: number;
            /**
             * @description ID of the Subscription object that the discount applies to. String starting with sub_. Response only.
             * @example sub_199e8c92ec0ec2bcbe56740042639d6e
             */
            subscription?: string;
            /**
             * @description Indicates whether the discount can be used. Response only.
             * @example true
             */
            valid?: boolean;
        } | null;
        /** @description Describes the fields relating to discounts in REST messages and webhooks for customer profiles and subscriptions Contains information about the coupon that applies to the customer. Read-only field. Adding a discount is a 2-step process - 1. Create Coupon, which returns a coupon ID. 2. Add the coupon ID to the coupon field of the customer with Create Customer or Update Customer. */
        SubscriptionDiscount: {
            coupon?: components["schemas"]["Coupon"];
            /**
             * @description The final time that a discount can be used, in Unix time. When the value is -1, the discount never expires. Response only.
             * @example 1679473563
             */
            end?: number;
            /**
             * @description ID of the Discount object. String starting with dis_. Response only.
             * @example dis_ab0445dee00fdcdd83811760ffe90e3b
             */
            id?: string;
            /**
             * @description The number of times that the discount was used for a specific customer or subscription. The initial value is 0. The value is incremented by 1 each time that the discount is used. Response only.
             * @example 0
             */
            number_of_uses?: number;
            /**
             * @description The time that a discount was created, in Unix time. Response only.
             * @example 1679473563
             */
            start?: number;
            /**
             * @description ID of the Subscription object that the discount applies to. String starting with sub_. Response only.
             * @example sub_199e8c92ec0ec2bcbe56740042639d6e
             */
            subscription?: string;
            /**
             * @description Indicates whether the discount can be used. Response only.
             * @example true
             */
            valid?: boolean;
        } | null;
        /** @enum {string} */
        EntityType: "company" | "individual";
        EwalletTransactionDetails: {
            action_data?: Record<string, never>;
            metadata?: Record<string, never>;
            /** @description Amount of the transaction, in units of the currency defined in currency. Decimal, including the correct number of decimal places for the currency exponent, as defined in ISO 4217:2015. */
            amount?: number;
            /** @description The updated wallet balance after successful completion of the transaction. */
            balance?: number;
            /**
             * @description Balance type affected by the transaction. One of the following
             * @enum {string}
             */
            balance_type?: "available_balance" | "on_hold_balance" | "received_balance" | "reserve_balance";
            /** @description Time the transaction was made, in Unix time. */
            created_at?: number;
            /** @description Three-letter ISO 4217 code for the currency used in the amount field. */
            currency?: string;
            /** @description ID of the wallet. String starting with **ewallet_**. */
            ewallet_id?: string;
            /** @description ID of the transaction. String starting with **wt_** or UUID. */
            id?: string;
            /** @description Unique identifier of the wallet object. String starting with **ewallet_**. */
            reason?: string;
            /** @description Status of the transaction. */
            status?: string;
            /** @description Type of transaction */
            type?: string;
            /** @description Sub type of the transaction */
            subtype?: string;
        } & ((components["schemas"]["EwalletTransaction"] & components["schemas"]["EwalletTransactionP2PAdditionlData"]) | components["schemas"]["EwalletTransaction"]);
        EwalletTransactionP2PDetails: {
            action_data?: Record<string, never>;
            metadata?: Record<string, never>;
            /** @description Amount of the transaction, in units of the currency defined in currency. Decimal, including the correct number of decimal places for the currency exponent, as defined in ISO 4217:2015. */
            amount?: number;
            /** @description The updated wallet balance after successful completion of the transaction. */
            balance?: number;
            /**
             * @description Balance type affected by the transaction. One of the following
             * @enum {string}
             */
            balance_type?: "available_balance" | "on_hold_balance" | "received_balance" | "reserve_balance";
            /** @description Time the transaction was made, in Unix time. */
            created_at?: number;
            /** @description Three-letter ISO 4217 code for the currency used in the amount field. */
            currency?: string;
            /** @description ID of the wallet. String starting with **ewallet_**. */
            ewallet_id?: string;
            /** @description ID of the transaction. String starting with **wt_** or UUID. */
            id?: string;
            /** @description Unique identifier of the wallet object. String starting with **ewallet_**. */
            reason?: string;
            /** @description Status of the transaction. */
            status?: string;
            /** @description Type of transaction */
            type?: string;
            /** @description Sub type of the transaction */
            subtype?: string;
            /** @description Beneficiary wallet ID */
            destination_ewallet_id?: string;
            /** @description Source wallet ID */
            source_ewallet_id?: string;
        };
        EwalletTransaction: {
            metadata?: Record<string, never>;
            /** @description Amount of the transaction, in units of the currency defined in currency. Decimal, including the correct number of decimal places for the currency exponent, as defined in ISO 4217:2015. */
            amount?: number;
            /** @description The updated wallet balance after successful completion of the transaction. */
            balance?: number;
            /**
             * @description Balance type affected by the transaction. One of the following
             * @enum {string}
             */
            balance_type?: "available_balance" | "on_hold_balance" | "received_balance" | "reserve_balance";
            /** @description Time the transaction was made, in Unix time. */
            created_at?: number;
            /** @description Three-letter ISO 4217 code for the currency used in the amount field. */
            currency?: string;
            /**
             * @description The destination balance type when funds are transferred from one balance to another within the wallet.
             * @enum {string|null}
             */
            destination_balance_type?: "available_balance" | "on_hold_balance" | "received_balance" | "reserve_balance" | null;
            /** @description ID of the wallet receiving the money. String starting with **ewallet_**. Response only. */
            destination_ewallet_id?: string | null;
            /** @description ID of the wallet. String starting with **ewallet_**. */
            ewallet_id?: string;
            /** @description ID of the transaction. String starting with wt_ or UUID. */
            id?: string;
            /** @description Unique identifier of the wallet object. String starting with **ewallet_**. */
            reason?: string;
            /**
             * @description The source balance type when funds are transferred from one balance to another within the wallet
             * @enum {string|null}
             */
            source_balance_type?: "available_balance" | "on_hold_balance" | "received_balance" | "reserve_balance" | null;
            /** @description ID of the wallet sending the money. String starting with **ewallet_**. */
            source_ewallet_id?: string | null;
            /** @description Status of the transaction. */
            status?: string;
            /** @description Type of transaction */
            type?: string;
            /** @description Subtype of the transaction. */
            subtype?: number;
            action_data?: Record<string, never>;
        };
        EwalletTransactionP2PAdditionlData: {
            /** @description ID of the wallet sending the money. String starting with ewallet_. */
            source_ewallet_id?: string | null;
            /** @description ID of the wallet receiving the money. String starting with ewallet_. Response only. */
            destination_ewallet_id?: string | null;
        };
        Ewallet: {
            accounts?: components["schemas"]["Account"][];
            /**
             * @description Indicates the type of client wallet
             * @enum {string}
             */
            category?: "collect" | "disburse" | "card_authorization" | "general";
            contacts?: components["schemas"]["Ewallet_contacts"];
            /** @description Email address of the wallet owner. Response only. Deprecated. */
            email?: string;
            /** @description Wallet ID defined by the customer or end user. Must be unique. */
            ewallet_reference_id?: string;
            /** @description First name of the wallet owner. */
            first_name?: string;
            /** @description Unique identifier of the wallet object. String starting with **ewallet_**. */
            id?: string;
            /** @description Last name of the wallet owner. */
            last_name?: string;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /** @description Phone number of the wallet owner in E.164 format. Response only. Deprecated. */
            phone_number?: string;
            /**
             * @description Status of the wallet
             * @enum {string}
             */
            status?: "ACT" | "DIS";
            /**
             * @description Type of wallet.
             * @enum {string}
             */
            type?: "company" | "person" | "client";
            /** @description Result of the verification check. */
            verification_status?: string;
        };
        /** @description Field Object */
        Field: {
            /** @description Three-letter alphabetic ISO 4217 code for the official currency used in the country. */
            code?: string;
            /** @description Whether the field is always required for using the payment method */
            is_required?: boolean;
            /** @description Indicates whether the field can be updated with Update Payment Method */
            is_updatable?: boolean;
            instructions?: string;
            /** @description Name of the currency in English. */
            name?: string;
            /** @description Three-letter ISO numeric 4217 code for the currency. */
            numeric_code?: string;
            required_fields?: components["schemas"]["Field"][];
            /** @enum {string} */
            type?: "boolean" | "number" | "string" | "object";
            /** @description A regular expression that defines the format when type is string. */
            regex?: string;
            /** @description Defines specific conditions when a field is required for a payment method. When the conditions defined by conditions are met, the field is required even though the value of `is_required` is **false**. */
            conditions?: components["schemas"]["Field_conditions"][];
            /** @description Description of the field. */
            description?: string;
        };
        /** @description Describes the fees for processing the currency exchange. Relevant to payouts with FX. */
        FxFee: {
            /**
             * @description Specifies how the fee is calculated. One of the following:
             *     * net - The fee is deducted from the amount paid.
             *     For example, in a payout of $100 with a fee of 5%, the recipient receives $95.00 and the $5.00 fee goes to the client wallet.
             *     * gross - The fee is charged on top of the amount paid.
             *     For example, for a transaction of $100 with a fee of 5%, the sender pays $105.00. The recipient receives $100.00 and the $5.00 fee goes to the client wallet.
             *
             * @example gross
             */
            calc_type?: string;
            /**
             * @description The amount of the fee. Percentage.
             * @example 2.5
             */
            value?: number;
        };
        HostedBeneficiaryTokenResponse: {
            /**
             * @description The two-letter ISO 3166-1 ALPHA-2 code for the country of the beneficiary’s bank account. The two-letter prefix of the payout method type matches the beneficiary country code.
             * @example FR
             */
            beneficiary_country?: string;
            /**
             * @description Currency accepted by the beneficiary’s bank account. Three-letter ISO 4217 code.
             * @example EUR
             */
            beneficiary_currency?: string;
            /**
             * @description Type of entity for the beneficiary. One of the following:
             * @enum {string}
             */
            beneficiary_entity_type?: "company" | "individual";
            /**
             * @description When the value is **true**, the hosted tokenization page displays additional required fields.<BR> * Additional required fields when `beneficiary_entity_type` is **individual**: `address`, `city`, `country`, `date_of_birth`, `first_name`, `gender`, `identification_type`, `identification_value`, `last_name`, `nationality`. <BR> * Additional required fields when `beneficiary_entity_type` is **company**: `address`, `city`, `company_name`, `country`, `country_of_incorporation`, `date_of_incorporation`, `identification_type`, `identification_value`.<BR> For more information on the additional required fields, see 'Create Extended Beneficiary'.<BR> **Note**: Currently only available in the sandbox.
             * @enum {boolean}
             */
            beneficiary_extended_fields?: true | false;
            /** @description ID of the beneficiary. String starting with **beneficiary_**. */
            beneficiary_id?: string;
            /** @description Additional information about the beneficiary. */
            beneficiary_optional_fields?: components["schemas"]["HostedBeneficiaryTokenResponse_beneficiary_optional_fields"][];
            /** @description Indicates whether the beneficiary has been validated. */
            beneficiary_validated?: boolean;
            /** @description URL where the customer is redirected after pressing **Back to Website** to exit the hosted page. This URL overrides the `merchant_website` URL. Does not support localhost URLs. */
            cancel_url?: string;
            /**
             * @description The category of payout method. One of the following: <BR> * **bank**<BR> * **card** - US only.
             * @enum {string}
             */
            category?: "bank" | "card";
            /** @description URL where the customer is redirected after pressing **Close** to exit the hosted page. This URL overrides the `merchant_website` URL. Does not support localhost URLs. */
            complete_url?: string;
            /** @description The two-letter ISO 3166-1 ALPHA-2 code for the beneficiary’s country. The two-letter prefix of the payout method type must match the beneficiary country code. */
            country?: string;
            /** @description Currency accepted by the beneficiary’s bank account. Three-letter ISO 4217 code. */
            currency?: string;
            /**
             * @description Type of entity for the beneficiary. One of the following:
             * @enum {string}
             */
            entity_type?: "company" | "individual";
            /** @description The page expiration date in Unix time. */
            expiration?: string;
            /** @description ID of the beneficiary tokenization page. String starting with **hp_ben_**.The page expiration date in Unix time. */
            id?: string;
            /** @description Determines the default language of the hosted page. For a list of values, see 'List Supported Languages'.<BR> * When this parameter is null, the language of the user's browser is used.<BR> * If the language of the user's browser cannot be determined, the default language is English. */
            language?: string;
            /**
             * @description Client's name.
             * @example Rapyd
             */
            merchant_alias?: string;
            /** @description Color of the call-to-action (CTA) button on the hosted page.<BR> To configure this field, use the Client Portal. */
            merchant_color?: string;
            /** @description Contains details of the client’s customer support. To configure these fields, use the Client Portal. */
            merchant_customer_support?: components["schemas"]["HostedBeneficiaryTokenResponse_merchant_customer_support"][];
            /** @description URL for the image of the client's logo.<BR> To configure this field, use the Client Portal. */
            merchant_logo?: string;
            /** @description Identifier defined by the client for reference purposes. Limit: 45 characters. */
            merchant_reference_id?: string;
            /** @description The URL where the customer is redirected after exiting the hosted page. <BR> Relevant when one or both of the following fields is unset:<BR> * `cancel_url` <BR> * `complete_url`<BR> To configure this field, use the Client Portal. */
            merchant_website?: string;
            /** @description End of the time when the customer can use the hosted page, in Unix time. If `page_expiration` is not set, the hosted page expires 14 days after creation. <BR> **Range**: 1 minute to 30 days. */
            page_expiration?: number;
            /** @description Currency accepted by the beneficiary’s bank account. Three-letter ISO 4217 code. */
            payout_currency?: string;
            /** @description The payout method type selected by the customer. The two-letter prefix must match the beneficiary country code. */
            payout_method_type?: string;
            /** @description List of payout methods that are excluded from display on the beneficiary tokenization page. */
            payout_method_types_exclude?: Record<string, never>[];
            /** @description Array of strings. List of payout methods that are displayed on the beneficiary tokenization page. */
            payout_method_types_include?: Record<string, never>[];
            /** @description URL of the hosted page that is shown to the customer. */
            redirect_url?: string;
            /** @description The two-letter ISO 3166-1 ALPHA-2 code for the sender’s country. */
            sender_country?: string;
            /** @description Currency paid from the sender’s wallet. Three-letter ISO 4217 code. */
            sender_currency?: string;
            /**
             * @description Type of entity for the sender. One of the following:.
             * @enum {string}
             */
            sender_entity_type?: "company" | "individual";
            /**
             * @description Status of the hosted page. One of the following:<BR>* **NEW** - The hosted page was created.<BR> * **DON** - Done. The beneficiary details were saved.<BR> * **EXP** - The hosted page expired.
             * @enum {string}
             */
            status?: "NEW" | "DON" | "EXP";
            /** @description Timestamp for the request to create the beneficiary tokenization object page, in Unix time. */
            timestamp?: string;
            /** @description ID of the beneficiary tokenization page. String starting with **hp_ben_**. */
            tokenization_page?: string;
        };
        Limit: {
            /** @description The amount of the limit. */
            amount?: number;
            /** @description Three-letter ISO 4217 code for the currency of an existing account. */
            currency?: string;
            /** @description The limit type. */
            type?: string;
            updated_at?: number;
        };
        MassPayoutResponse: {
            /** @description Time of creation of the batch operation, in Unix time (seconds). */
            created_at?: number;
            /** @description ID of the batch operation. String starting with **batch_**.Three-letter ISO 4217 code for the currency of an existing account. */
            id?: string;
            /** @description Filename of the uploaded batch file. */
            original_name?: string;
            /** @description Status of the batch operation - "NEW". */
            status?: string;
            /** @description Batch operation type - "mass_payout_pci". */
            type?: string;
        };
        /**
         * @description Gender of the individual. Required when `entity_type` is **individual**.
         * @enum {string}
         */
        gender: "male" | "female" | "other" | "not_applicable";
        /** @description virtual account transaction. */
        VirtualAccountTransactionResponse: components["schemas"]["IssuingTransactionFxData"] & {
            /** @description ID of the virtual bank account. */
            account_id?: string;
            /** @description Type of the virtual account number. */
            account_id_type?: string;
            /** @description Amount of the transaction, in units defined in currency. */
            amount?: number;
            /** @description Timestamp for the transaction, in Unix time */
            created_at?: number;
            /** @description Currency of the account. Three-letter ISO 4217 code. */
            currency?: string;
            /** @description ID of the Rapyd Wallet that is attached to the virtual account. String starting with ewallet_. */
            ewallet?: string;
            /** @description ID of the transaction. String starting with isutran_. */
            id?: string;
        };
        /** @description Describes the fees for processing the currency exchange. Relevant to payouts with FX. */
        IssuingTransactionFxData: {
            /** @description The amount sent by the sender to the virtual account, in units of the currency defined in original_currency. */
            original_amount?: number;
            original_currency?: components["schemas"]["Currency_1"];
            /** @description Currency conversion rate for the transaction. */
            fx_rate?: number;
        };
        Payout: {
            /**
             * @description Amount of the payout, in units defined by payout_currency. Decimal, including the correct number of decimal places for the currency exponent, as defined in ISO 2417:2015. Same as payout_amount. Response only.
             * @example 1000
             */
            amount?: number;
            beneficiary?: components["schemas"]["Beneficiary"];
            beneficiary_country?: components["schemas"]["Country_1"];
            /** @description Time of creation of the payout, in Unix time. Response only. */
            created_at?: number;
            /** @description Description of the payout transaction. */
            description?: string;
            /** @description Indicates the error code of the last unsuccessful operation on the Payout object. */
            error?: string | null;
            /** @description The estimated time period in which the beneficiary will receive the funds. */
            estimated_time_of_arrival?: string;
            /** @description An array of one object, which contains the following fields: * ewallet_id - The ID of the wallet that the money is transferred from, a string starting with **ewallet_**. * amount - Amount of the transaction in currency units defined in currency. * percent - A decimal number representing a percentage of the total payout. Response only. */
            ewallets?: components["schemas"]["Payout_ewallets"][];
            /**
             * @description Determines the day the payout expires, in Unix time. The payout must be completed before the start of this day. Relevant to cash payout methods where the is_expirable field is true in the response to List Payout Method Types.
             * @example 1607941348
             */
            expiration?: number | null;
            /** @description Currency conversion rate for the payout. Decimal. Response only. */
            fx_rate?: number;
            /** @description Reserved. Response only. */
            gc_error_code?: string | null;
            /**
             * @description ID of the payout. String starting with **payout_**.
             * @example payout_548969fc5a0bf89da3cec70a1529338c
             */
            id?: string;
            /** @description Reserved. Response only. */
            identifier_type?: string | null;
            /** @description Reserved. Response only. */
            identifier_value?: string | null;
            /** @description Describes how the customer collects the payout. Contains the following fields: * name - Short description of the instructions. * steps - A 'steps' object containing a list of steps for the customer to take. Each step is named stepN, where N is an integer.
             *      */
            instructions?: components["schemas"]["Payout_instructions"][];
            /** @description Additional information from the merchant. For example, the merchant's instructions and transaction number that must be presented for collecting the payout. */
            instructions_value?: Record<string, never>;
            /**
             * @description ID defined by the client. Limited to 255 characters.
             * @example GHY-0YU-HUJ-POI
             */
            merchant_reference_id?: string | null;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /**
             * @description Cumulative amount received by the beneficiary, in units defined by payout_currency. Response only.
             * @example 1000
             */
            paid_amount?: number;
            /**
             * @description Time of the payout, in Unix time. Response only.
             * @example 1607941348
             */
            paid_at?: string | null;
            payout_currency?: components["schemas"]["Currency"];
            payout_fees?: components["schemas"]["PayoutFees"];
            /**
             * @description The type of payout method. The two-letter prefix must match the beneficiary country computed.
             * @example us_general_bank
             */
            payout_method_type?: string;
            /**
             * @description The type of the payout method.
             * @example bank
             * @enum {string}
             */
            payout_type?: "card" | "cash" | "ewallet" | "bank" | "rapyd_ewallet";
            sender?: components["schemas"]["Sender"];
            /** @description Amount that the sender is paying in units of the currency defined in sender_currency.
             *     This amount remains the same regardless of FX fees. Required when payout_amount is not used. Decimal.
             *      */
            sender_amount?: number;
            sender_country?: components["schemas"]["Country"];
            sender_currency?: components["schemas"]["Currency"];
            /** @description A statement that includes the reason for the payout. Limited to 35 characters. */
            statement_descriptor?: string;
            status?: components["schemas"]["PayoutStatus"];
        };
        PayoutFees: {
            fx_fee?: components["schemas"]["FxFee"];
            /**
             * @description The total gross fees for the transaction, in units defined by currency_code. Relevant to responses.
             * @example 4.23
             */
            gross_fees?: number;
            /**
             * @description The total net fees for the transaction, in units defined by merchant_requested_currency. Relevant to responses.
             * @example 0
             */
            net_fees?: number;
            transaction_fee?: components["schemas"]["TransactionFee"];
        } | null;
        PayoutMethodType: {
            /** @description An array of objects that describe limits on the amount, per currency. Contains the following fields:
             *     maximum_amount - Maximum amount supported by this payout method for the indicated currency. Decimal number.
             *     minimum_amount - Minimum amount supported by this payout method for the indicated currency. Decimal number.
             *     * payout_currency - Currency of the payout. Three-letter ISO 4217 code. Uppercase. */
            amount_range_per_currency?: components["schemas"]["PayoutAmountRangePerCurrency"][];
            beneficiary_country?: components["schemas"]["Country"];
            /**
             * @description A list of the beneficiary entity types supported by this payout method. One or more of the following: company individual Response only.
             * @example [
             *       "company",
             *       "individual"
             *     ]
             */
            beneficiary_entity_types?: components["schemas"]["EntityType"][];
            category?: components["schemas"]["Category"];
            /** @description URL of an image that the merchant can use to represent the payout method. */
            image?: string;
            /** @description Indicates whether the payout can be canceled. Relevant when category is cash. One of the following values 0 - Not cancelable. 1 - cancelable.' */
            is_cancelable?: number;
            /** @description Indicates whether the payout expires if not completed. Relevant when category is cash. One of the following values 0 - Not expirable. 1 - expirable.' */
            is_expirable?: number;
            /** @description Indicates whether the payout must be made at a specific physical location. Relevant when category is cash. One of the following values 0 - Not locationspecific. 1 - location specific.' */
            is_location_specific?: number;
            /** @description The maximum time (in seconds) that the merchant can set for completing the payout. Relevant when is_expirable is true. */
            maximum_expiration_seconds?: number;
            /** @description The minimum time (in seconds) that the merchant can set for completing the payout. Relevant when is_expirable is true. */
            minimum_expiration_seconds?: number;
            /** @description Payout method name. */
            name?: string;
            /**
             * @description A list of the currencies supported by this payout method. Three-letter ISO 4217 code. Uppercase. Response only.
             * @example [
             *       "USD"
             *     ]
             */
            payout_currencies?: components["schemas"]["Currency"][];
            /**
             * @description The type of payout method. The two-letter prefix must match the beneficiary country code. Required when default_payout_method_type is not used.
             * @example us_general_bank
             */
            payout_method_type?: string;
            sender_country?: components["schemas"]["Country"];
            /**
             * @description List of currencies that the sender is paying with. Currency consists of a three-letter ISO 4217 code. Response only.
             * @example [
             *       "USD"
             *     ]
             */
            sender_currencies?: components["schemas"]["Currency"][];
            /**
             * @description A list of the sender entity types supported by this payout method. One or more of the following:
             *     company
             *     individual
             *     Response only.
             *
             * @example [
             *       "company",
             *       "individual"
             *     ]
             */
            sender_entity_types?: components["schemas"]["EntityType"][];
            /** @description The estimated time period in which the beneficiary will receive the funds. */
            estimated_time_of_arrival?: string;
            /** @description Indicates whether the payout method is currently available. One of the following values: 0 - Not available. 1 - Available. */
            status?: number;
        };
        PayoutMethodTypeDetails: {
            /** @description concatenation of all fields. */
            batch_file_header?: string;
            beneficiary_country?: components["schemas"]["Country"];
            beneficiary_entity_type?: components["schemas"]["EntityType"];
            /** @description Lists all the beneficiary required fields for payout method */
            beneficiary_required_fields?: components["schemas"]["PayoutRequiredFields"][];
            /** @description URL of an image that the merchant can use to represent the payout method. */
            image?: string;
            /** @description Indicates whether the payout can be canceled. Relevant when category is cash. One of the following values 0 - Not cancelable. 1 - cancelable.' */
            is_cancelable?: number;
            /** @description Indicates whether the payout expires if not completed. Relevant when category is cash. One of the following values 0 - Not expirable. 1 - expirable.' */
            is_expirable?: number;
            /** @description Indicates whether the payout must be made at a specific physical location. Relevant when category is cash. One of the following values 0 - Not location specific. 1 - location specific.' */
            is_location_specific?: number;
            /** @description Indicates whether the payout is made automatically, without any action by the beneficiary. */
            is_online?: boolean;
            /** @description Maximum amount supported by this payout method for the indicated currency. Decimal number. */
            maximum_amount?: number;
            /** @description The maximum time (in seconds) that the merchant can set for completing the payout. Relevant when is_expirable is true. */
            maximum_expiration_seconds?: number;
            /** @description Minimum amount supported by this payout method for the indicated currency. Decimal number. */
            minimum_amount?: number;
            /** @description The minimum time (in seconds) that the merchant can set for completing the payout. Relevant when is_expirable is true. */
            minimum_expiration_seconds?: number;
            payout_currency?: components["schemas"]["Currency"];
            /**
             * @description The type of payout method. The two-letter prefix must match the beneficiary country code. Required when default_payout_method_type is not used.
             * @example us_general_bank
             */
            payout_method_type?: string;
            /** @description Lists all the payout options for payout method. */
            payout_options?: components["schemas"]["PayoutRequiredFields"][];
            sender_country?: components["schemas"]["Country"];
            sender_currency?: components["schemas"]["Currency"];
            sender_entity_type?: components["schemas"]["EntityType"];
            /** @description Lists all the sender required fields for payout method */
            sender_required_fields?: components["schemas"]["PayoutRequiredFields"][];
            /** @description Indicates whether the payout method is currently available. One of the following values: 0 - Not available. 1 - Available. */
            status?: number;
        };
        PayoutRequest: {
            /** @description String starting with beneficiary_ or the object describing the beneficiary. */
            beneficiary?: string | components["schemas"]["Beneficiary"];
            /**
             * @description Country of the beneficiary. Two-letter ISO 3166-1 ALPHA-2 code. Uppercase.
             * @example US
             */
            beneficiary_country?: string;
            /**
             * @description Type of entity for the beneficiary. One of the following: individual, company
             * @enum {string}
             */
            beneficiary_entity_type?: "individual" | "company";
            /**
             * @description Determines whether completion of the payout requires confirmation of the FX rate. Relevant to payouts with foreign exchange. Default is false.
             * @default false
             */
            confirm_automatically: boolean;
            /**
             * @description conversion rate
             * @default 1
             */
            converstion_rate: number;
            /** @description Description of the payout transaction. */
            description?: string;
            /**
             * @description ID of the wallet that the money is transferred from. String starting with ewallet_.
             * @example ewallet_4f1757749b8858160274e6db49f78ff3
             */
            ewallet?: string;
            /**
             * @description Determines the day the payout expires, in Unix time. The payout must be completed before the start of this day. Relevant to cash payouts.
             * @example 1607941348
             */
            expiration?: string;
            /** @description Location of the payout transaction. */
            location?: string;
            /**
             * @description ID defined by the client. Limited to 255 characters.
             * @example GHY-0YU-HUJ-POI
             */
            merchant_reference_id?: string;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /**
             * @description Amount of the payout, in units of the currency defined in payout_currency. Mandatory when sender_amount is not used. Decimal.
             * @example 110
             */
            payout_amount?: number;
            payout_currency?: components["schemas"]["Currency_1"];
            /**
             * @description The type of payout method. The two-letter prefix must match the beneficiary country code. Required when the beneficiary does not have a default payout method type.
             * @example us_general_bank
             */
            payout_method_type?: string;
            /** @description Payout options */
            payout_options?: Record<string, never>;
            /** @description String starting with sender_ or the object describing the sender. */
            sender?: string | components["schemas"]["Sender"];
            sender_country?: components["schemas"]["Country_1"];
            sender_currency?: components["schemas"]["Currency_1"];
            sender_entity_type?: components["schemas"]["EntityType"];
            /** @description A statement that includes the reason for the payout. Limited to 35 characters. */
            statement_descriptor?: string;
        };
        PayoutRequiredFields: {
            /** @description List out the allowed values */
            allowed_values?: string;
            /** @description Description of the field */
            description?: string;
            /** @description Indicates whether the field is always required for using the payout method */
            is_required?: boolean;
            /** @description Name of the field */
            name?: string;
            /** @description A regular expression that defines the format when type is string. Note: Rapyd uses a unique variant of the regex standard. See note in           "https://docs.rapyd.net/en/get-payment-method-required-fields.html"
             *      */
            regex?: string;
            /** @description Indicates transfer type of the payout */
            transfer_type?: string;
            /**
             * @description Indicates datatype of the field
             * @enum {string}
             */
            type?: "boolean" | "number" | "string";
        };
        PayoutReturned: {
            /**
             * @description Amount of the payout, in units defined by payout_currency. Decimal, including the correct number of decimal places for the currency exponent, as defined in ISO 2417:2015. Same as payout_amount. Response only.
             * @example 1000
             */
            amount?: number;
            beneficiary?: components["schemas"]["Beneficiary"];
            beneficiary_country?: components["schemas"]["Country"];
            /** @description Time of creation of the payout, in Unix time. Response only. */
            created_at?: number;
            /** @description Description of the payout transaction. */
            description?: string;
            /** @description Indicates the error code of the last unsuccessful operation on the Payout object. */
            error?: string | null;
            /** @description The estimated time period in which the beneficiary will receive the funds. */
            estimated_time_of_arrival?: string;
            /** @description An array of one object, which contains the following fields: * ewallet_id - The ID of the wallet that the money is transferred from, a string starting with **ewallet_**. * amount - Amount of the transaction in currency units defined in currency. * percent - A decimal number representing a percentage of the total payout. Response only. */
            ewallets?: components["schemas"]["Payout_ewallets"][];
            /**
             * @description Determines the day the payout expires, in Unix time. The payout must be completed before the start of this day. Relevant to cash payout methods where the is_expirable field is true in the response to List Payout Method Types.
             * @example 1607941348
             */
            expiration?: number | null;
            /** @description Currency conversion rate for the payout. Decimal. Response only. */
            fx_rate?: number;
            /** @description Reserved. Response only. */
            gc_error_code?: string | null;
            /**
             * @description ID of the payout. String starting with **payout_**.
             * @example payout_548969fc5a0bf89da3cec70a1529338c
             */
            id?: string;
            /** @description Reserved. Response only. */
            identifier_type?: string | null;
            /** @description Reserved. Response only. */
            identifier_value?: string | null;
            /** @description Describes how the customer collects the payout. Contains the following fields: * name - Short description of the instructions. * steps - A 'steps' object containing a list of steps for the customer to take. Each step is named stepN, where N is an integer.
             *      */
            instructions?: components["schemas"]["Payout_instructions"][];
            /** @description Additional information from the merchant. For example, the merchant's instructions and transaction number that must be presented for collecting the payout. */
            instructions_value?: Record<string, never>;
            /**
             * @description ID defined by the client. Limited to 255 characters.
             * @example GHY-0YU-HUJ-POI
             */
            merchant_reference_id?: string | null;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /**
             * @description Cumulative amount received by the beneficiary, in units defined by payout_currency. Response only.
             * @example 1000
             */
            paid_amount?: number;
            /**
             * @description Time of the payout, in Unix time. Response only.
             * @example 1607941348
             */
            paid_at?: string | null;
            payout_currency?: components["schemas"]["Currency"];
            payout_fees?: components["schemas"]["PayoutFees"];
            /**
             * @description The type of payout method. The two-letter prefix must match the beneficiary country computed.
             * @example us_general_bank
             */
            payout_method_type?: string;
            /**
             * @description The type of the payout method.
             * @example bank
             * @enum {string}
             */
            payout_type?: "card" | "cash" | "ewallet" | "bank" | "rapyd_ewallet";
            sender?: components["schemas"]["Sender"];
            /** @description Amount that the sender is paying in units of the currency defined in sender_currency.
             *     This amount remains the same regardless of FX fees. Required when payout_amount is not used. Decimal.
             *      */
            sender_amount?: number;
            sender_country?: components["schemas"]["Country"];
            sender_currency?: components["schemas"]["Currency"];
            /** @description A statement that includes the reason for the payout. Limited to 35 characters. */
            statement_descriptor?: string;
            status?: components["schemas"]["PayoutReturnedStatus"];
        };
        /** @enum {string} */
        PayoutStatus: "Created" | "Completed" | "Canceled" | "Rejected" | "Error" | "Confirmation" | "Expired" | "Returned";
        /** @enum {string} */
        PayoutReturnedStatus: "Returned" | "Created" | "Completed" | "Canceled" | "Rejected" | "Error" | "Confirmation" | "Expired";
        PutFundsOnHoldResponse: {
            /**
             * @description  * **Transactions** - Amount of the transaction, in units of the currency defined in `currency`. Decimal, including the correct number of decimal places for the currency exponent, as defined in ISO 4217:2015.<BR> * **Wallet Account Operations** - Amount of the account limit.
             * @example 100
             */
            amount?: number;
            /** @description Three-letter ISO 4217 code for the currency used in the `amount` field. */
            currency_code?: string;
            /** @description ID of the wallet owner's user. UUID. */
            destination_account_id?: string;
            /**
             * @description Balance type that the funds are transferred to. See 'Wallet Balance Types'.
             * @enum {string}
             */
            destination_balance_type?: "available_balance" | "on_hold_balance" | "received_balance" | "reserve_balance";
            /** @description ID of the transaction with regard to the destination. String starting with **wt_**. */
            destination_transaction_id?: string;
            /** @description ID of the wallet owner's user. UUID. */
            destination_user_profile_id?: string;
            /** @description ID of the transaction. UUID. */
            id?: string;
            /**
             * @description Balance type that the funds are transferred from. See 'Wallet Balance Types'. See 'Wallet Balance Types'.
             * @enum {string}
             */
            source_balance_type?: "available_balance" | "on_hold_balance" | "received_balance" | "reserve_balance";
            /** @description ID of the transaction with regard to the source. String starting with **wt_**. */
            source_transaction_id?: Record<string, never>;
            /** @description ID of the wallet owner's user. UUID. */
            source_user_profile_id?: string;
        };
        Sender: {
            /**
             * @description Bank account number of sender.
             * @example 10285730135312349
             */
            account_number?: string;
            /** @description Additional data required by the payout method. Object.. */
            additional_data?: Record<string, never>;
            /** @description The person's second last name. */
            additional_last_name?: string;
            /** @description The address of the sender. */
            address?: string;
            /** @description Domestic identifier of the bank. */
            bank_code?: string;
            /** @description Name of the bank. */
            bank_name?: string;
            /** @description When the beneficiary is not a relative of the sender, the relationship should be specified as client or non-relative. */
            beneficiary_relationship?: string;
            /**
             * @description City where the sender is located.
             * @example New York
             */
            city?: string;
            /**
             * @description Name of the sender company. Relevant when entity_type is company.
             * @example ABC
             */
            company_name?: string;
            country?: components["schemas"]["Country"];
            currency?: components["schemas"]["Currency"];
            /**
             * @description The date of birth of the sender. Relevant when entity_type is individual.
             * @example 18/03/1990
             */
            date_of_birth?: string;
            /**
             * @description Date of incorporation of the corporation.
             * @example 18/03/2010
             */
            date_of_incorporation?: string;
            /** @description The person's email address. */
            email?: string;
            entity_type?: components["schemas"]["EntityType"];
            /**
             * @description First name of the sender. Relevant when `entity_type` is **individual**.
             * @example Scott
             */
            first_name?: string;
            /**
             * @description ID of the Sender object. String starting with **sender_**. Response only.
             * @example sender_216cf9141fba698e7dc2729d1f439c1b
             */
            id?: string;
            /** @description The date of issuance of the person's identification document. */
            id_date_of_issue?: string;
            /** @description The expiration date of the person's identification document. */
            id_expiry?: string;
            /** @description The government agency that issued the person's identification document. */
            id_issue_authority?: string;
            /** @description The location where the person's identification document was issued. */
            id_issue_location?: string;
            /**
             * @description Type of identification document for the sender. When entity_type is company, this field must be company_registered_number. When entity_type is individual, one of the following values:
             *     * drivers_license
             *     * identification_id
             *     * international_passport
             *     * residence_permit* social_security
             *     * work_permit
             *
             * @example drivers_license
             */
            identification_type?: string;
            /**
             * @description identification number on the document mentioned in `identification_type`.
             * @example HJKOSN2435460
             */
            identification_value?: string;
            /**
             * @description Last name of the sender. Relevant when `entity_type` is individual.
             * @example Williams
             */
            last_name?: string;
            /** @description ID defined by the merchant. Rapyd does not validate this value to enforce uniqueness. */
            merchant_reference_id?: string;
            /** @description The person's middle name. */
            middle_name?: string;
            /** @description Mobile phone number in E.164 format. */
            mobile_number?: string;
            /**
             * @description Name of the sender. Relevant when `entity_type` is company.
             * @example Scott Williams
             */
            name?: string;
            /**
             * @description The person's nationality.
             * @example US
             */
            nationality?: string;
            /** @description The person's occupation. */
            occupation?: string;
            /** @description The country code of the person's phone. */
            phone_country_code?: string;
            /** @description Phone number in E.164 format. */
            phone_number?: string;
            /**
             * @description Postal code of the sender.
             * @example 110005
             */
            postcode?: string;
            /** @description Province portion of the address. */
            province?: string;
            /** @description Reason for the payout. */
            purpose_code?: string;
            /** @description The person's source of income. */
            source_of_income?: string;
            /**
             * @description State where the sender is located.
             * @example New York
             */
            state?: string;
            /** @description District of the sender's or beneficiary's city. */
            suburb?: string;
            /** @description Tax identification number. */
            tax_id?: string;
        };
        setPINResponse: {
            /** @description Time that the card was activated, in Unix time. */
            activated_at?: number;
            /** @description Time that the card was assigned to a cardholder, in Unix time. */
            assigned_at?: string;
            /** @description Bank Identifier Number for the institution issuing the card. */
            bin?: string;
            /**
             * @description Reason for blocking the card.
             * @enum {string}
             */
            blocked_reason?: "blocked_reversible" | "canceled" | "compliance" | "locked_incorrect_pin" | "migrated" | "none" | "other" | "reissued" | "suspected_fraud";
            /** @description ID of the card. String starting with **card_**. */
            card_id?: string;
            /** @description ID of the card program that the card is issued from. String starting with **cardprog_**. */
            card_program?: string;
            /** @description Reserved. */
            card_tracking_id?: string;
            /** @description The country where the card is issued. Two-letter ISO 3166-1 ALPHA-2 code. */
            country_iso_alpha_2?: string;
            /** @description Time of creation of the issued card object, in Unix time. */
            created_at?: number;
            /** @description Card security code. only. */
            cvv?: number;
            /** @description Expiration month of the card. Two digits. Relevant when the card issuer supports it for the country. only. */
            expiration_month?: string;
            /** @description Expiration year of the card. Two digits. Relevant when the card issuer supports it for the country. */
            expiration_year?: string;
            /** @description Describes the wallet contact that the card is assigned to. String starting with **cont_**. For details about the fields of the 'contact' object, see 'Add Contact to Wallet'in online API reference. */
            ewallet_contact?: string;
            /** @description ID of the issued card object. String starting with **ci_**. */
            id?: string;
            /** @description A JSON object defined by the client. */
            metadata?: string;
            /**
             * @description Status of the card. One of the following:<BR>* **ACT** - Active.<BR> * **BLO** - Blocked.<BR>* **IMP** - Imported in bulk, but not yet personalized.<BR>* **INA** - Inactive.<BR>
             * @enum {string}
             */
            status?: "ACT" | "BLO" | "IMP" | "INA";
            /** @description Two-digit code. */
            sub_bin?: string;
        };
        SimulateCardTransactionAuthorizationRequestEEA: {
            /** @description Amount of the transaction, in units defined in `currency`. */
            amount?: number;
            auth_response?: components["schemas"]["SimulateCardTransactionAuthorizationRequestEEA_auth_response"];
            /** @description ID of the card. String starting with **card_**. */
            card_id?: string;
            /** @description ID of the transaction. String starting with **cit_**. */
            card_transaction_id?: string;
            /** @description Currency of the transaction. Three-letter ISO 4217 code.Currency of the refund transaction. Three-letter ISO 4217 code. */
            currency_code?: string;
            /** @description The exchange rate. Relevant to capture (clearing) transactions. */
            fx_rate?: string;
            /** @description ID of the issued card transaction. String starting with **cit_**. */
            id?: string;
            /**
             * @description Type of transaction on the issued card.
             * @enum {string}
             */
            issuing_txn_type?: "ADJUSTMENT" | "ATM_FEE" | "CREDIT" | "REFUND" | "REVERSAL" | "SALE";
            /** @description Last 4 digits of the card number. */
            last4?: string;
            /** @description Four-digit merchant category code (MCC) of the initiator of the transaction, as defined in ISO 18245. */
            merchant_category_code?: string;
            /** @description Name and location of the merchant. */
            merchant_name_location?: string;
            /** @description ID of the original issued card transaction. String starting with **cit_**. */
            original_transaction_id?: string;
            /** @description Original amount for FX transactions, when `currency` is different from `original_txn_currency`. */
            original_txn_amount?: number;
            /** @description Original currency in an FX transaction. */
            original_txn_currency?: string;
            /**
             * @description The mode of entry of the transaction at the point of sale.
             * @enum {string}
             */
            pos_entry_mode?: "adjustment" | "ecommerce" | "emv" | "emv_standin" | "magstripe" | "manual_entered" | "network_token" | "nfc" | "3ds_ecommerce";
            /** @description Retrieval reference number for the card transaction. */
            retrieval_reference_number?: string;
            /** @description Reserved. */
            systems_trace_audit_number?: string;
            /** @description ID of the wallet transaction String starting with **wt_**. */
            wallet_transaction_id?: string;
        };
        SimulateClearingCardTransactionEEA: {
            /** @description Amount of the transaction, in units defined in `currency`. */
            amount?: number;
            auth_response?: components["schemas"]["SimulateCardTransactionAuthorizationRequestEEA_auth_response"];
            /** @description ID of the card. String starting with **card_**. */
            card_id?: string;
            /** @description ID of the transaction. String starting with **cit_**. */
            card_transaction_id?: string;
            /** @description Currency of the transaction. Three-letter ISO 4217 code.Currency of the refund transaction. Three-letter ISO 4217 code. */
            currency_code?: string;
            /** @description The exchange rate. Relevant to capture (clearing) transactions. */
            fx_rate?: string;
            /** @description ID of the issued card transaction. String starting with **cit_**. */
            id?: string;
            /** @description Indicates whether remote authorization is enabled. */
            is_remote_auth?: boolean;
            /** @description Four-digit merchant category code (MCC) of the initiator of the transaction, as defined in ISO 18245. */
            merchant_category_code?: string;
            /** @description Reserved. */
            merchant_identification_code?: string;
            /** @description Name and location of the merchant. Maximum 40 characters. */
            merchant_name_location?: string;
            /** @description The URL where the remote authorization is sent. */
            remote_auth_endpoint?: string;
            remote_auth_response?: components["schemas"]["SimulateClearingCardTransactionEEA_remote_auth_response"];
            /** @description Amount debited from the Rapyd Wallet. Decimal, including the correct number of decimal places for the currency exponent, as defined in ISO 2417:2015. */
            transaction_amount?: number;
            /** @description Original transaction currency, if different from the currency credited to the Rapyd Wallet. Three-letter ISO 4217 code. */
            transaction_currency_code?: string;
            /**
             * @description Type of transaction.
             * @enum {string}
             */
            txn_type?: "ADJUSTMENT" | "ATM_FEE" | "CREDIT" | "REFUND" | "REVERSAL" | "SALE";
        };
        SimulateCardTransactionAuthorizationReversalEEA: {
            /** @description Amount of the refund, in units defined in `currency`. */
            amount?: number;
            auth_response?: components["schemas"]["SimulateCardTransactionAuthorizationRequestEEA_auth_response"];
            /** @description ID of the card. String starting with **card_**. */
            card_id?: string;
            /** @description ID of the transaction. String starting with **cit_**. */
            card_transaction_id?: string;
            /** @description Currency of the transaction. Three-letter ISO 4217 code.Currency of the refund transaction. Three-letter ISO 4217 code. */
            currency_code?: string;
            /** @description The exchange rate. Relevant to capture (clearing) transactions. */
            fx_rate?: string;
            /** @description ID of the issued card transaction. String starting with **cit_**. */
            id?: string;
            /** @description Indicates whether remote authorization is enabled. */
            is_remote_auth?: boolean;
            /** @description Four-digit merchant category code (MCC) of the initiator of the transaction, as defined in ISO 18245. */
            merchant_category_code?: string;
            /** @description Reserved. */
            merchant_identification_code?: string;
            /** @description Name and location of the merchant. Maximum 40 characters. */
            merchant_name_location?: string;
            /** @description The URL where the remote authorization is sent. */
            remote_auth_endpoint?: string;
            remote_auth_response?: components["schemas"]["SimulateClearingCardTransactionEEA_remote_auth_response"];
            /** @description Amount debited from the Rapyd Wallet. Decimal, including the correct number of decimal places for the currency exponent, as defined in ISO 2417:2015. */
            transaction_amount?: number;
            /**
             * @description Type of transaction.
             * @enum {string}
             */
            txn_type?: "ADJUSTMENT" | "ATM_FEE" | "CREDIT" | "REFUND" | "REVERSAL" | "SALE";
        };
        simulateBlockCardResponse: {
            /** @description Time that the card was activated, in Unix time. */
            activated_at?: number;
            /** @description Time that the card was assigned to a cardholder, in Unix time. */
            assigned_at?: number;
            /**
             * @description Reason for blocking the card.
             * @enum {string}
             */
            blocked_reason?: "blocked_reversible" | "canceled" | "compliance" | "locked_incorrect_pin" | "migrated" | "none" | "other" | "reissued" | "suspected_fraud";
            /** @description ID of the card. String starting with **card_**. */
            card_id?: string;
            /** @description The country where the card is issued. Two-letter ISO 3166-1 ALPHA-2 code. */
            country_iso_alpha_2?: string;
            /** @description Time of creation of the issued card object, in Unix time. only. */
            created_at?: number;
            /** @description Describes the wallet contact that the card is assigned to. String starting with **cont_**. For details about the fields of the 'contact' object, see 'Add Contact to Wallet'. */
            ewallet_contact?: string;
            /** @description ID of the issued card object. String starting with **ci_**. */
            id?: string;
            /** @description A JSON object defined by the client. */
            metadata?: string;
            /**
             * @description Status of the card. One of the following:<BR>* **ACT** - Active.<BR> * **BLO** - Blocked.<BR>* **IMP** - Imported in bulk, but not yet personalized.<BR>* **INA** - Inactive.<BR>
             * @enum {string}
             */
            status?: "ACT" | "BLO" | "IMP" | "INA";
        };
        /** @description Describes the fee for processing the transaction. */
        TransactionFee: {
            /**
             * @description Specifies how the fee is calculated. One of the following:
             *     * net - The fee is deducted from the amount paid.
             *     For example, in a payout of $100 with a fee of 5%, the recipient receives $95.00 and the $5.00 fee goes to the client wallet.
             *     * gross - The fee is charged on top of the amount paid.
             *     For example, for a transaction of $100 with a fee of 5%, the sender pays $105.00. The recipient receives $100.00 and the $5.00 fee goes to the client wallet.
             *
             * @example gross
             */
            calc_type?: string;
            /**
             * @description One of the following:
             *     percentage - A percentage of the transaction amount.
             *     For example, 5 percent is represented by value=5. absolute - A fixed amount
             *
             * @example absolute
             */
            fee_type?: string;
            /**
             * @description The amount of the fee. Decimal, including the correct number of decimal places for the currency exponent, as defined in ISO 2417:2015. If the amount is a whole number, use an integer and not a decimal.
             * @example 2
             */
            value?: number;
        };
        Transfer: {
            /** @description Amount of the transfer. Decimal. */
            amount?: number;
            /** @description Time the transaction was made, in Unix time. */
            created_at?: number;
            /** @description Three-letter ISO 4217 code for the currency used in the amount field. */
            currency_code?: string;
            /** @description ID of the wallet receiving the money. String starting with **ewallet_**. Response only. */
            destination_ewallet_id?: string;
            /** @description Phone number of the owner of the wallet receiving the money, in E.164 format. */
            destination_phone_number?: string;
            /** @description ID of the transaction with regard to the destination. String starting with **wt_**. */
            destination_transaction_id?: string;
            /** @description ID of the transaction. String starting with **wt_** or UUID. */
            id?: string;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /** @description Metadata created with Set Transfer Response. Response only. */
            response_metadata?: Record<string, never>;
            /** @description ID of the wallet sending the money. String starting with **ewallet_**. Response only. */
            source_ewallet_id?: string;
            /** @description ID of the transaction with regard to the source. String starting with **wt_**. */
            source_transaction_id?: string;
            /**
             * @description < Status of the transaction. CAN - Canceled. The transferor canceled the transfer. CLO - Closed. The transferee accepted the funds. DEC - Declined. The transferee rejected the transfer. EXP - Expired. The transferee did not respond before the transfer expired. HLD - Hold. Rapyd Protect is putting this transfer on hold and reviewing it. PEN - Pending. Waiting for the transferee to accept. REJ - Rejected. Rapyd Protect has rejected this transfer.
             * @enum {string}
             */
            status?: "CAN" | "CLO" | "DEC" | "EXP" | "HLD" | "PEN" | "REJ";
            /** @description Time of the Set Transfer Response operation, in Unix time. Read-only. */
            transfer_response_at?: number;
            /** @description Determines the day the transfer expires, in Unix time. Acceptance of the transfer must occur before the start of this day. Default is 14 days after creation of the transfer. */
            expiration?: number;
        };
        Status: {
            /**
             * @description Error code of the API request. Empty when response is successful.
             * @example
             */
            error_code?: string;
            /**
             * @description Description of the API error message. Empty when response is successful.
             * @example
             */
            message?: string;
            /**
             * @description Unique identifier (UUID)) to track the request.
             * @example 0fd8809c-ed02-4862-9a79-507b9528ac23
             */
            operation_id?: string;
            /**
             * @description Response code of the API error message. Empty when response is successful.
             * @example
             */
            response_code?: string;
            /**
             * @description Status of the API indicating success or failure.
             * @example false
             */
            status?: boolean;
        };
        /** @description Indicates the amount range for the payment method's currencies. Each object contains the following fields:* currency - Three-letter ISO 4217 format of currency* maximum_amount - The maximum payment amount* minimum_amount - The minimum payment amount */
        PaymentAmountRangePerCurrency: components["schemas"]["PaymentAmountRangePerCurrency_inner"][];
        /** @description Bank Identification Number (BIN) details. Read-only. Object containing the following fields - * bin_number - BIN number * country - The two-letter ISO 3166-1 ALPHA-2 code for the country. Uppercase. * funding - Type of card funding. One of the following [credit, debit, prepaid, unknown] * bank - Name of the issuing bank. Relevant to cards */
        BinDetails: {
            brand?: string;
            bin_number?: string;
            type?: string;
            issuer?: string;
            country?: components["schemas"]["Country_1"];
            level?: string;
        };
        CardTokenResponse: {
            /** @description Indicates whether the hosted page displays address fields to fill in.<BR> * **true** - The address fields are displayed. <BR> * **false** - The address fields are displayed only for country codes **US**, **GB** and **CA**. */
            billing_address_collect?: boolean;
            /**
             * @description URL where the customer is redirected after pressing **Back to Website** to exit the hosted page. This URL overrides the `merchant_website` URL. Does not support localhost URLs.
             * @default false
             */
            cancel_url: string;
            card_fields?: components["schemas"]["CardTokenResponse_card_fields"];
            /** @description Category of payment method: **card**. */
            category?: string;
            /** @description URL where the customer is redirected after pressing **Close** to exit the hosted page. This URL overrides the `merchant_website` URL. Does not support localhost URLs.The two-letter ISO 3166-1 ALPHA-2 code for the country. */
            complete_url?: string;
            /** @description URL where the customer is redirected when payment is successful, after returning from an external page such as a 3DS page. Does not support localhost URLs. */
            complete_payment_url?: string;
            /** @description The two-letter ISO 3166-1 ALPHA-2 code for the country. */
            country?: string;
            /** @description In transactions without FX, defines the currency of the transaction. Three-letter ISO 4217 code. <BR> In FX transactions: <BR> * When `fixed_side` is **buy**, it is the currency received in the Rapyd wallet. <BR> * When `fixed_side` is **sell**, it is the currency charged to the buyer. <BR> See also `fixed_side` and `requested_currency` fields. */
            currency?: string;
            /** @description ID of a specific customer. String starting with **cus_**. */
            customer?: string;
            /** @description Relevant error message and ID number of the error. */
            error_code?: string;
            /** @description URL where the customer is redirected when payment is not successful, after returning from an external page, such as a 3DS page. Does not support localhost URLs. */
            error_payment_url?: string;
            /** @description ID of the card token hosted page, a string starting with **hp_card_**. */
            id?: string;
            /**
             * @description Determines the default language of the hosted page. For a list of values, see [List Supported Languages](https://docs.rapyd.net/en/list-supported-languages.html). <BR> * When this parameter is null, the language of the user's browser is used. <BR> If the language of the user's browser cannot be determined, the default language is English.
             * @default en
             */
            language: string;
            /**
             * @description Reserved.
             * @default Rapyd
             */
            merchant_alias: string;
            /** @description Color of the call-to-action (CTA) button on the hosted page. To configure this field, use the Client Portal. See [Customizing Your Hosted Page](https://docs.rapyd.net/en/customizing-your-hosted-page.html). */
            merchant_color?: string;
            merchant_customer_support?: components["schemas"]["MerchantCustomerSupport"];
            /** @description The URL where the customer is redirected after exiting the hosted page. Relevant when one or both of the following fields is unset: <BR>* `cancel_url` <BR>* `complete_url`.<BR> To configure this field, use the **Fallback URL** field in the Client Portal. See [Customizing Your Hosted Page](https://docs.rapyd.net/en/customizing-your-hosted-page.html). */
            merchant_website?: string;
            /** @description End of the time when the customer can use the hosted page, in Unix time. If `page_expiration` is not set, the hosted page expires 14 days after creation. Range: 1 minute to 30 days. */
            page_expiration?: string;
            /** @description Limits the page to a specific type of payment method. For example, **dk_visa_card**. For a list of payment methods, use []List Payment Methods by Country](https://docs.rapyd.net/en/list-payment-methods-by-country.html). */
            payment_method_type?: string;
            payment_params?: components["schemas"]["CardTokenResponse_payment_params"];
            /** @description URL of the hosted page that is shown to the customer.Contains the following fields. When these fields do not include values, the user is redirected to the hosted page, and a related status message appears at the top of the page. */
            redirect_url?: string;
            /** @description Status of the hosted page. One of the following: <BR> * **NEW** - The hosted page was created. <BR> * **DON** - Done. The card was added to the customer profile. <BR> * **EXP** - The hosted page expired.URL of the hosted page that is shown to the customer. */
            status?: string;
        };
        /** @description Describes the fields in the client_details object in REST messages for payments. The client_details object describes the browser that the customer is using. The client collects this information and sends it as part of the Create Payment request. This information is used for processing the 3DS version 2 authentication of the customer. Note that Client Details information is not returned in the API response and it does not appear in any webhooks. */
        ClientDetailsObject: {
            /** @description IP address of the customer. */
            ip_address?: string;
            /** @description Indicates whether the browser is enabled for Java. */
            java_enabled?: boolean;
            /** @description Indicates whether the browser is enabled for JavaScript. */
            java_script_enabled?: boolean;
            /** @description The language the browser is configured for, as defined in IETF BCP 47. */
            language?: string;
            /**
             * @description Indicates the screen color depth of the customer's browser, in bits.
             * @enum {integer}
             */
            screen_color_depth?: 1 | 4 | 8 | 15 | 16 | 24 | 32 | 48;
            /** @description Height of the customer's screen, in pixels. 1-6 digits. */
            screen_height?: number;
            /** @description Width of the customer's screen, in pixels. 1-6 digits. */
            screen_width?: number;
            /** @description Difference in minutes between UTC and the customer's time zone. Positive or negative integer. */
            time_zone_offset?: number;
        };
        CheckoutPageResponse: components["schemas"]["HostedPageStatusBaseResponse"] & components["schemas"]["HostedPageAdditionalResponse"] & components["schemas"]["CheckoutUrlResponse"];
        CheckoutUrlResponse: {
            /** @description URL where the customer is redirected after pressing Finish to exit the hosted page. This URL overrides the merchant_website URL. Does not support localhost URLs. */
            complete_checkout_url?: string;
            /** @description URL where the customer is redirected after pressing Back to Website to exit the hosted page. This URL overrides the merchant_website URL. Does not support localhost URLs. */
            cancel_checkout_url?: string;
        };
        Condition: {
            /** @description Description of the condition */
            description?: string;
            /** @description The name of a field, including the path. The field is the first operand of the condition. The path starts with one of the following - * payment - The field is a Create Payment body parameter. Not relevant to the payment_method and payment_method_options objects. * payment.payment_method_type - The field appears in the current Get Payment Method Required Fields response under fields or payment_method_options. * organization - The field relates to your organization, such as your merchant type category. Your organization specifies the field when activating your account. See Activating Your Account (KYB) */
            element_name?: string;
            /** @description A symbol representing the operator of the condition. String starting with $. The operator determines the relationship between the operands See documentation - "https://docs.rapyd.net/en/payment-method-type.html" */
            operator?: string;
            /** @description One or more possible values of the element_name field. The second operand of the condition "https://docs.rapyd.net/en/payment-method-type.html" */
            threshold_value?: string | number;
        };
        /** @description The coupon can be applied to the following objects - * Subscription - All charges in the subscription are subject to the discount described in the coupon. To add a coupon to a subscription, first use Create Coupon. Then add the coupon ID to the coupon field of the subscription with Create Subscription or Update Subscription. * Customer - The discount applies to all charges to the customer. To add a coupon to a customer, first use Create Coupon. Then add the coupon ID to the coupon field of the customer with Create Customer or Update Customer. * Order - The discount applies to a single order. To add a coupon to an order, first use Create Coupon. The duration field of the coupon must be set to repeating, and the duration_in_months and discount_duration_in_uses fields must be set to 1. Then add the coupon ID to the coupon field of the order with Create an Order or Update Order. A coupon can be applied to one or more customers or subscriptions. However, a subscription can have only one coupon, and the only way to assign two or more coupons to a customer is to assign them to separate subscriptions. If there is a coupon for the customer and another coupon for the customer's subscription, the subscription coupon takes precedence. */
        Coupon: {
            /**
             * @description The amount of money to subtract from the payment. Decimal. Range: Positive decimal number, including the correct number of decimal places for the currency exponent, as defined in ISO 2417:2015.
             * @example 0
             */
            amount_off?: number;
            /**
             * @description When the coupon was created, in Unix time. Response only.
             * @example 1671697165
             */
            created?: number;
            currency?: components["schemas"]["Currency_1"];
            /**
             * @description Description of the coupon.
             * @example Sample Coupon 1
             */
            description?: string;
            /**
             * @description The number of times that the coupon can be redeemed by a specific customer or subscription. Relevant when duration is repeating and redeem_by is not set.
             * @example 2
             */
            discount_duration_in_uses?: number;
            /**
             * @description The final date that a discount can be used, in Unix time. Relevant when discount_validity_in_months is not set.
             * @example 0
             */
            discount_valid_until?: number;
            /**
             * @description The number of months after the discount is created that it can be used. Relevant when discount_valid_until is not set.
             * @example 2
             */
            discount_validity_in_months?: number;
            /**
             * @description Determines how long the discount remains in effect. One of the following:
             *     * forever
             *     * repeating
             *
             * @example forever
             * @enum {string}
             */
            duration?: "forever" | "repeating";
            /**
             * @description Determines the number of months that the coupon remains in effect after its creation. Integer. Required when duration is repeating.
             * @example 3
             */
            duration_in_months?: number;
            /**
             * @description Unique ID for this coupon. English alphanumeric characters with no special characters except underscore. If the merchant does not define an ID, Rapyd generates a string starting with **coupon_**.
             * @example coupon_c1194a18a9972ca7f9804826f00c9eb8
             */
            id?: string;
            /**
             * @description Determines the number of times the coupon can be redeemed. The number of customers, subscriptions or orders that the coupon is applied to cannot exceed this number. Integer.
             * @example 2
             */
            max_redemptions?: number;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /**
             * @description Determines the size of the discount, measured in percent. Integer. Range: 1-100.
             * @example 10
             */
            percent_off?: number;
            /**
             * @description The last time at which the coupon can be redeemed, in Unix time. After the redeem_by date, the coupon can no longer be applied to new customers. 'redeem_by' takes precedence over the setting of **discount_duration_in_uses** and **duration_in_months**.
             * @example 0
             */
            redeem_by?: number;
            /**
             * @description Indicates the number of times the coupon has been applied to a customer, subscription or invoice. If the discount has been used more than one time by a customer, subscription or invoice, the number of redemptions after the first is also added to this value. Integer. When this value equals **max_redemptions**, the coupon becomes no longer valid. Response only.
             * @example 0
             */
            times_redeemed?: number;
            /**
             * @description Indicates whether the coupon can be redeemed.
             * @example true
             */
            valid?: boolean;
        } & (unknown | unknown);
        /** @description customer */
        Customer: {
            addresses?: components["schemas"]["Address_1"][];
            /** @description The tax ID number of the customer. Relevant when the customer is a business */
            business_vat_id?: string;
            /** @description Time of creation of this customer, in Unix time. Response only */
            created_at?: number;
            /** @description The payment method that is used when the 'payment' object or subscription does not specify a payment method. The value must also appear in the payment_methods list. The payment method is referenced by its name field. */
            default_payment_method?: string;
            /** @description Indicates whether there is currently a failure of an automatic payment that is part of a subscription, or an invoice that was not paid when due. Response only. true - The account is delinquent. false - The account is current */
            delinquent?: boolean;
            /** @description A text description of the customer */
            description?: string;
            discount?: components["schemas"]["Discount"];
            /** @description Customer's email address. Maximum 512 characters */
            email?: string;
            /** @description ID of the wallet that is linked to the customer. String starting with **ewallet_**. Each wallet can be associated with only one customer */
            ewallet?: string;
            /** @description ID of the Customer object. String starting with **cus_** */
            id?: string;
            /** @description A custom string that is prefixed to all invoices for this customer. For more information see Invoice Object at "https://docs.rapyd.net/en/invoice-364856.html" */
            invoice_prefix?: string;
            /** @description A JSON object defined by the client */
            metadata?: Record<string, never>;
            /** @description The name of the customer */
            name: string;
            payment_methods?: components["schemas"]["Customer_payment_methods"];
            /** @description Customer's primary phone number in E.164 format. The merchant is responsible for verifying that the number is correct. One method of verifying could be to send an activation code to the phone by SMS, with a limited time for response. */
            phone_number?: string;
            subscriptions?: components["schemas"]["Subscription"][];
        };
        /** @description Describes the fields contained in REST messages and webhooks for payment methods saved to a customer profile */
        CustomerPaymentMethod: {
            category?: components["schemas"]["Category"];
            /** @description Hash of the card number, expiration date and CVV. Read-only. Relevant to cards. */
            fingerprint_token?: string;
            /** @description ID of the Payment Method object. String starting with card_ or other_ */
            id?: string;
            /** @description A URL to the image of the icon for the type of payment method. Response only */
            image?: string;
            last4?: components["schemas"]["Last4"];
            /** @description A JSON object defined by the client */
            metadata?: Record<string, never>;
            /** @description The name of the customer */
            name?: string;
            /** @description Identifier for use in a recurring card payment. In recurring payments, use the network reference ID you got from the response or webhook when adding the payment method to the customer. In the payment_method.fields object, use it in place of the cvv field, along with the other required fields for the card payment method. This field cannot be used together with a payment method ID or a customer ID. Note that for all payments, you must use the network reference ID from adding the payment method to the customer. The response in each subsequent payment contains a different network reference ID, which is not for use in requests. Relevant to clients with PCI certification who have been authorized to use this feature */
            network_reference_id?: string;
            next_action?: components["schemas"]["NextAction"];
            /** @description URL where the customer is redirected for additional steps required for the payment. Response only. To simulate 3DS authentication in the sandbox, see Simulating 3DS Authentication - "https://docs.rapyd.net/en/simulating-3ds-authentication---api-method.html" */
            redirect_url?: string;
            /** @description Reserved. Response only. */
            supporting_documentation?: string;
            /** @description ID of the token that represents the card. String starting with card_. Relevant to cards. Relevant if the value of is_tokenizable is true for the payment method in the response to List Payment Methods by Country. See Payment Method Type Object at "https://docs.rapyd.net/en/payment-method-type-364771.html" */
            token?: string;
            /** @description Name of the payment method type. For example, us_mastercard_card. To get a list of payment methods for a country, use List Payment Methods by Country. */
            type?: string;
            /** @description Reserved. Response only */
            webhook_url?: string;
        } & ({
            /** @description ID of the Payment Method object. String starting with **card_** or **other_**. */
            id?: string;
            /** @description Name of the payment method type. For example, **it_visa_card**. To get a list of payment methods for a country, use 'List Payment Methods by Country'. */
            type?: string;
            category?: components["schemas"]["Category"];
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /** @description A URL to the image of the icon for the type of payment method. Response only */
            image?: string;
            /** @description Reserved. Response only */
            webhook_url?: string;
            /** @description Reserved. Response only. */
            supporting_documentation?: string;
            next_action?: components["schemas"]["NextAction"];
        } & ({
            /**
             * @description BIC (SWIFT) code for the bank account.
             * @example 12345678XXX
             */
            bic_swift?: string;
            /** @description Last four digits of the bank account number or IBAN (International Bank Account Number). */
            account_last4?: string;
        } | {
            /** @description Customer's last name. */
            last_name?: string;
            /** @description Customer's first name. */
            first_name?: string;
        } | {
            /** @description Last four digits of the card or IBAN (International Bank Account Number). */
            last4?: string;
            /** @description Results of the Access Control Server (ACS) check. Possible values: * pass *fail * unavailable *unchecked * Relevant to cards. */
            acs_check?: string;
            /** @description Verification of the card’s CVV. Valid values: * pass * fail * unavailable *  unchecked */
            cvv_check?: string;
            bin_details?: components["schemas"]["BinDetails"];
            /** @description Year of expiration. */
            expiration_year?: string;
            /** @description Month of expiration. */
            expiration_month?: string;
            /** @description Hash of the card number, expiration date and CVV. */
            fingerprint_token?: string;
        }));
        CustomerRequest: {
            /** @description Array of address objects associated with this customer. For more information */
            addresses?: components["schemas"]["Address_1"][];
            /** @description The tax ID number of the customer */
            business_vat_id?: string;
            /** @description The ID of a coupon that is assigned to this customer */
            coupon?: string;
            payment_method?: components["schemas"]["CustomerRequest_payment_method"];
            /** @description A text description of the customer */
            description?: string;
            /** @description Customer's email address */
            email?: string;
            /** @description ID of the wallet that is linked to the customer. String starting with **ewallet_**. */
            ewallet?: string;
            /** @description A custom string that is prefixed to all invoices for this customer. */
            invoice_prefix?: string;
            /** @description A JSON object defined by the Rapyd partner */
            metadata?: Record<string, never>;
            /** @description The name of the individual customer or the business name */
            name?: string;
            /** @description Customer's primary phone number in E.164 format */
            phone_number?: string;
        };
        /** @description Describes the fields relating to discounts in REST messages and webhooks for customer profiles and subscriptions Contains information about the coupon that applies to the customer. Read-only field. Adding a discount is a 2-step process: <BR> 1. Create Coupon, which returns a coupon ID. <BR>2. Add the coupon ID to the coupon field of the customer with Create Customer or Update Customer. */
        Discount: {
            coupon?: components["schemas"]["Coupon"];
            /**
             * @description ID of the Customer object that the discount applies to. String starting with **cus_**. Response only.
             * @example cus_3f4ed3168413d863671602dfbe839aa2
             */
            customer?: string;
            /**
             * @description The final time that a discount can be used, in Unix time. When the value is -1, the discount never expires. Response only.
             * @example 1679473563
             */
            end?: number;
            /**
             * @description ID of the Discount object. String starting with **dis_**. Response only.
             * @example dis_ab0445dee00fdcdd83811760ffe90e3b
             */
            id?: string;
            /**
             * @description The number of times that the discount was used for a specific customer or subscription. The initial value is 0. The value is incremented by 1 each time that the discount is used. Response only.
             * @example 0
             */
            number_of_uses?: number;
            /**
             * @description The time that a discount was created, in Unix time. Response only.
             * @example 1679473563
             */
            start?: number;
            /**
             * @description ID of the Subscription object that the discount applies to. String starting with **sub_**. Response only.
             * @example sub_199e8c92ec0ec2bcbe56740042639d6e
             */
            subscription?: string;
            /**
             * @description Indicates whether the discount can be used. Response only.
             * @example true
             */
            valid?: boolean;
        } | null;
        /** @description Describes the fields relating to discounts in REST messages and webhooks for customer profiles and subscriptions Contains information about the coupon that applies to the customer. Read-only field. Adding a discount is a 2-step process: <BR> 1. Create Coupon, which returns a coupon ID. <BR>2. Add the coupon ID to the coupon field of the customer with Create Customer or Update Customer. */
        DiscountCustomerResponse: {
            coupon?: components["schemas"]["Coupon"];
            /**
             * @description ID of the Customer object that the discount applies to. String starting with **cus_**. Response only.
             * @example cus_3f4ed3168413d863671602dfbe839aa2
             */
            customer?: string;
            /**
             * @description The final time that a discount can be used, in Unix time. When the value is -1, the discount never expires. Response only.
             * @example 1679473563
             */
            end?: number;
            /**
             * @description ID of the Discount object. String starting with **dis_**. Response only.
             * @example dis_ab0445dee00fdcdd83811760ffe90e3b
             */
            id?: string;
            /**
             * @description The number of times that the discount was used for a specific customer or subscription. The initial value is 0. The value is incremented by 1 each time that the discount is used. Response only.
             * @example 0
             */
            number_of_uses?: number;
            /**
             * @description The time that a discount was created, in Unix time. Response only.
             * @example 1679473563
             */
            start?: number;
            /**
             * @description Indicates whether the discount can be used. Response only.
             * @example true
             */
            valid?: boolean;
        } | null;
        /** @description Describes the fields contained in REST messages and webhooks for disputes of payments. */
        Dispute: {
            /** @description Reserved. */
            id?: string;
            /**
             * @description ID of the dispute. String starting with **dispute_**.
             * @example dispute_6bd95ecec6bee6a505d39b56dbded2ec
             */
            token?: string;
            /**
             * @description Indicates the status of the dispute operation. One of the following values: * ACT (Active) - The dispute was initiated and is awaiting action by the merchant. * RVW (Review) - Rapyd is reviewing the merchant's evidence contesting the dispute. * PRA (Pre-Arbitration) - Rapyd is reviewing the merchant's evidence contesting a previously contested dispute. * ARB (Arbitration) - The merchant rejected a pre-arbitration outcome. Rapyd is awaiting a ruling by an arbitration committee from the card schemes. * LOS (Lose) - The merchant lost the dispute. Funds were deducted from the merchant wallet. Final status. * WIN (Win) - The merchant won the dispute. Funds were credited to the merchant wallet. Final status. * REV (Reverse) - The card issuer reversed the dispute. Funds were credited to the merchant wallet. Final status.
             *
             * @example ACT
             * @enum {string}
             */
            status?: "ACT" | "RVW" | "PRA" | "ARB" | "LOS" | "WIN" | "REV";
            /** @description Amount that Rapyd deducted from the merchant due to the dispute. */
            amount?: number;
            /** @description Three-letter ISO 4217 code for the currency used in the amount field. */
            currency?: string;
            /** @description The category of dispute that was provided by the card network. */
            dispute_category?: string;
            /** @description A short description of the reason for the dispute. */
            dispute_reason_description?: string;
            original_transaction_currency?: components["schemas"]["Currency_1"];
            /** @description Amount of the original payment. */
            original_transaction_amount?: number;
            /** @description Amount of the dispute, as reported to Rapyd. */
            original_dispute_amount?: number;
            original_dispute_currency?: components["schemas"]["Currency_1"];
            /**
             * @description ID of the payment that the dispute is charged against. String starting with **payment_**.
             * @example payment_ce936f36d93bc9307a3db9ebfd3deaaa
             */
            original_transaction_id?: string;
            /** @description ID of the wallet that the money is paid into. String starting with **ewallet_**. Relevant when the request includes a single wallet. Response only. */
            ewallet_id?: string;
            /** @description The date the transaction was processed by the card network. */
            central_processing_date?: number;
            /** @description Time of creation of the dispute, in Unix time. Response only. */
            created_at?: number;
            /** @description Time that the dispute was last updated, in Unix time. Response only. */
            updated_at?: number;
            /** @description The latest date for the dispute to be contested in Unix time. Response only. */
            due_date?: number;
            /**
             * @description ID of the payment method. String starting with **card_**.
             * @example card_39d8aee398dfa5492fc2a0ea2822958f
             */
            payment_method?: string;
            /** @description Details of the payment method that was used for the payment. See Payment Method Data Object. Response only. */
            payment_method_data?: Record<string, never>;
            /** @description FX rate. Relevant to FX payments. */
            rate?: number;
            /** @description Reserved. */
            evidence?: string;
            /** @description Reserved. */
            evidence_reason_code?: string;
            /** @description When true, indicates that the disputed payment was automatically refunded based on pre-determined criteria. Response only. */
            pre_dispute?: boolean;
            /** @description An Acquirer Reference Number (ARN) is a unique number assigned to a credit card transaction as it moves through the payment flow. Banks can use it to help trace the payment/ refund if it appears to be missing. An ARN will be available for Visa and Mastercard charges.
             *      */
            arn?: string;
        };
        Escrow: {
            ewallets?: components["schemas"]["Escrow_ewallets"];
        };
        EscrowResponse: {
            /** @description Total amount of funds that are currently held in the escrow, in the currency defined in `currency_code` in the payment. */
            amount_on_hold?: number;
            /** @description Date and time the escrow was created, in Unix time. */
            created_at?: number;
            /** @description The currency of the escrow balance. Three-letter ISO 4217 code. */
            currency?: number;
            escrow_releases?: components["schemas"]["EscrowResponse_escrow_releases"];
            /** @description Indicates that the number of escrow releases is greater than the number returned in the response. */
            id?: string;
            /** @description Date and time of the completion of the last payment or partial payment, in Unix time. */
            last_payment_completion?: number;
            /** @description ID of the payment, a string starting with **payment_**. */
            payment?: number;
            /** @description Status of the escrow. One of the following:<BR> * **pending** - The payment and escrow were created, but the payment is not completed and the funds are not in the escrow.<BR> * **on_hold** - The payment is completed and the funds are in escrow. canceled - The escrow is canceled.<BR>* **released** - All or part of the funds have been released to the wallets. */
            status?: string;
            /** @description Total amount of funds that were released to the wallets, in the currency defined in currency_code in the payment response. */
            total_amount_released?: string;
            /** @description Date and time of the last update to the escrow, in Unix time. */
            updated_at?: number;
        };
        /** @description Group Payment */
        GroupPayment: {
            /** @description Amount of the group payment, in units defined by `currency`. */
            amount?: number;
            /** @description Indicates the total amount of failed payments that have not been replaced. */
            amount_to_replace?: string;
            /** @description Reason for cancellation of the group payment. */
            cancel_reason?: string;
            /** @description Country where the payment methods are supported. Two-letter ISO 3166-1 ALPHA-2 code. */
            country?: string;
            /** @description Currency of the payments. Three-letter ISO 4217 code. */
            currency?: string;
            /** @description Description of the group payment. */
            description?: string;
            /** @description End of the time allowed for customers to make this payment, in Unix time. */
            expiration?: number;
            /** @description ID of the 'group_payment' object. String starting with **gp_**. */
            id?: string;
            /** @description Identifier defined by the client for reference purposes. Limit: 45 characters. */
            merchant_reference_id?: string;
            /** @description A JSON object defined by the client */
            metadata?: Record<string, never>;
            /** @description Array of `payment` objects. All payments must have the same currency and must be supported in the same country. For details of the fields in the 'payment' object. */
            payments?: Record<string, never>;
            /** @description Reason for cancellation of the group payment. */
            reason?: string;
            /** @description Indicates the status of the group payment operation. One of the following values: <BR>> * **active** - The group payment was created and one or more payments are still open.<BR> * **canceled** - The group payment was canceled. <BR>* **closed** - All payments in the group payment are complete.Response only. */
            status?: string;
        };
        /**
         * @description Status of the hosted page. One of the following: NEW - The hosted page was created. DON - Done. The card was added to the customer profile. EXP - The hosted page expired.
         *
         * @enum {string}
         */
        HostedPageStatus: "NEW" | "DON" | "EXP";
        HostedPageActivateCardResponse: {
            /** @description URL where the customer is redirected after pressing **Back to Website** to exit the hosted page. This URL overrides the `merchant_website` URL. Does not support localhost URLs. */
            cancel_url?: string;
            /** @description URL where the customer is redirected after pressing **Close** to exit the hosted page. This URL overrides the `merchant_website` URL. Does not support localhost URLs. */
            complete_url?: string;
            /** @description ID of the wallet contact that the card is assigned to. Must have a valid phone number. String starting with **cont_**. */
            ewallet_contact?: string;
            /** @description Reserved. */
            geo_country?: string;
            /** @description ID of the hosted page for activating a card, a string starting with **hp_issuing_act_**. */
            id?: string;
            /** @description Determines the default language of the hosted page.<BR>* When this parameter is null, the language of the user's browser is used.<BR>* If the language of the user's browser cannot be determined, the default language is English. */
            language?: string;
            /**
             * @description Client's name.
             * @default Rapyd
             */
            merchant_alias: string;
            /** @description Color of the call-to-action (CTA) button on the hosted page. To configure this field, use the Client Portal. */
            merchant_color?: string;
            merchant_customer_support?: components["schemas"]["MerchantCustomerSupport"];
            /** @description URL for the image of the client's logo. To configure this field, use the Client Portal. */
            merchant_logo?: string;
            /** @description URL for the terms and conditions of the agreement between the client and the client’s customers.<BR>To configure this field, use the Client Portal. */
            merchant_privacy_policy?: string;
            /** @description URL for the client's terms and conditions. To configure this field, use the Client Porta */
            merchant_terms?: string;
            /** @description The URL where the customer is redirected after exiting the hosted page. Relevant when `cancel_url`, `complete_url` or both fields are not set. To configure this field, use the Client Portal. */
            merchant_website?: string;
            /** @description End of the time when the customer can use the hosted page, in Unix time. If `page_expiration` is not set, the hosted page expires 14 days after creation.<BR>**Range**: 1 minute to 30 days. */
            page_expiration?: number;
            /** @description When **true**, connects an issued card to a wallet contact. Relevant to a card that was issued in bulk and is not assigned to a specific person. Transparent to the customer. See also 'Personalize Bulk-Issued Card' in online documentation. */
            personalize?: number;
            /** @description URL of the hosted page that is shown to the customer. */
            redirect_url?: string;
            /** @description Reserved. */
            region?: string;
            /** @description When **true**, the customer cannot reset the PIN via a hosted page. */
            skip_pin?: boolean;
            status?: components["schemas"]["HostedPageStatus"];
        };
        HostedPageCardPINResponse: {
            /** @description URL where the customer is redirected after pressing **Back to Website** to exit the hosted page. This URL overrides the `merchant_website` URL. Does not support localhost URLs. */
            cancel_url?: string;
            /** @description ID of the card. String starting with **card_**. */
            card_issuing?: string;
            /** @description ID of the Issued Card object, a string starting with **ci_**. */
            card_token?: string;
            /** @description URL where the customer is redirected after pressing **Close** to exit the hosted page. This URL overrides the `merchant_website` URL. Does not support localhost URLs. */
            complete_url?: string;
            /** @description ID of the wallet contact that the card is assigned to. Must have a valid phone number. String starting with **cont_**. */
            ewallet_contact?: string;
            /** @description Reserved. */
            geo_country?: string;
            /** @description ID of the hosted page for activating a card, a string starting with **hp_issuing_act_**. */
            id?: string;
            /** @description Determines the default language of the hosted page.<BR>* When this parameter is null, the language of the user's browser is used.<BR>* If the language of the user's browser cannot be determined, the default language is English. */
            language?: string;
            /**
             * @description Client's name.
             * @default Rapyd
             */
            merchant_alias: string;
            /** @description Color of the call-to-action (CTA) button on the hosted page. To configure this field, use the Client Portal. */
            merchant_color?: string;
            merchant_customer_support?: components["schemas"]["MerchantCustomerSupport"];
            /** @description URL for the image of the client's logo. To configure this field, use the Client Portal. */
            merchant_logo?: string;
            /** @description URL for the terms and conditions of the agreement between the client and the client’s customers.<BR>To configure this field, use the Client Portal. */
            merchant_privacy_policy?: string;
            /** @description URL for the client's terms and conditions. To configure this field, use the Client Porta */
            merchant_terms?: string;
            /** @description The URL where the customer is redirected after exiting the hosted page. Relevant when `cancel_url`, `complete_url` or both fields are not set. To configure this field, use the Client Portal. */
            merchant_website?: string;
            /** @description End of the time when the customer can use the hosted page, in Unix time. If `page_expiration` is not set, the hosted page expires 14 days after creation.<BR>**Range**: 1 minute to 30 days. */
            page_expiration?: number;
            /** @description URL of the hosted page that is shown to the customer. */
            redirect_url?: string;
            /** @description Reserved. */
            region?: string;
            /** @description When **true**, the customer cannot reset the PIN via a hosted page. */
            skip_view_pin?: boolean;
            status?: components["schemas"]["HostedPageStatus"];
        };
        HostedPageStatusBaseResponse: {
            /** @description Determines the default language of the hosted page. When this parameter is null, the language of the user's browser is used. If the language of the user's browser cannot be determined, the default language is English */
            language?: string;
            /**
             * @description Reserved, the default name is Rapyd
             * @default Rapyd
             */
            merchant_alias: string;
            /** @description Color of the call-to-action (CTA) button on the hosted page. To configure this field, use the Client Portal */
            merchant_color?: string;
            merchant_customer_support?: components["schemas"]["MerchantCustomerSupport"];
            /** @description URL for the image of the client's logo. To configure this field, use the Client Portal */
            merchant_logo?: string;
            /** @description The URL where the customer is redirected after exiting the hosted page. Relevant when cancel_url or complete_url or both fields is unset. To configure this field, use the Client Portal */
            merchant_website?: string;
            /** @description URL of the hosted page that is shown to the customer. */
            redirect_url?: string;
            /** @description URL for the client's terms and conditions. To configure this field, use the Client Portal */
            merchant_terms?: string;
            /** @description URL where the customer is redirected after pressing Back to Website to exit the hosted page. This URL overrides the merchant_website URL. Does not support localhost URLs. */
            cancel_url?: string;
            /** @description URL where the customer is redirected after pressing Close to exit the hosted page. This URL overrides the merchant_website URL. Does not support localhost URLs. */
            complete_url?: string;
            /** @description URL for the terms and conditions of the agreement between the client and the client’s customers. To configure this field, use the Client Portal. */
            merchant_privacy_policy?: string;
            /** @description Length of time for the payment to be completed after it is created, measured in seconds. When both expiration and payment_expiration are set, the payment expires at the earlier time. */
            page_expiration?: number;
            status?: components["schemas"]["HostedPageStatus"];
        };
        HostedPageAdditionalResponse: {
            /** @description Details of an account funding transaction (AFT), which transfers funds from a card to a cardholder's wallet. */
            account_funding_transaction?: Record<string, never>;
            /** @description The amount of the payment, in units of the currency defined in currency. Decimal, including the correct number of decimal places for the currency exponent, as defined in ISO 2417:2015. If the amount is a whole number, use an integer and not a decimal. */
            amount?: number;
            /** @description URL where the customer is redirected after pressing Back to Website to exit the hosted page. This URL overrides the `merchant_website` URL. Does not support localhost URLs. */
            cancel_checkout_url?: string;
            cart_items?: components["schemas"]["HostedPageAdditionalResponse_cart_items"];
            /** @description URL where the customer is redirected after pressing Finish to exit the hosted page. This URL overrides the `merchant_website` URL. Does not support localhost URLs. */
            complete_checkout_url?: string;
            country?: components["schemas"]["Country_1"];
            currency?: components["schemas"]["Currency_1"];
            /** @description Description of the payment transaction. To display the description, set display_description to true in custom_elements. */
            customer?: string;
            /** @description Determines whether the payment is held in escrow for later release. */
            escrow?: boolean;
            /** @description Determines the number of days after creation of the payment that funds are released from escrow. Funds are released at 5:00 pm GMT on the day indicated. Integer, range: 1-90. */
            escrow_release_days?: number;
            /** @description ID of the Rapyd checkout page. String starting with **checkout_**. */
            id?: string;
            /** @description A string that represents the text on the main Call to Action (CTA) button. One of the following:<BR>* place_your_order - Place Your Order.<BR>* pay - Pay.<BR>* pay_now - Pay Now.<BR>* make_payment - Make Payment.<BR>* purchase - Purchase.<BR>* buy - Buy.<BR>* donate - Donate.<BR>* To configure this button, use the Client Portal. */
            merchant_main_button?: string;
            /** @description URL for the terms and conditions of the agreement between the client and the client’s customers. To configure this field, use the Client Portal. */
            merchant_privacy_policy?: string;
            /** @description URL for the client's terms and conditions. To configure this field, use the Client Portal */
            merchant_terms?: string;
            /** @description The URL where the customer is redirected after exiting the hosted page. Relevant when one or both of the following fields is unset: <BR>* `cancel_url` <BR>* `complete_url`.<BR> To configure this field, use the Client Portal */
            merchant_website?: string;
            custom_elements?: components["schemas"]["HostedPageAdditionalResponse_custom_elements"];
            /** @description Length of time for the payment to be completed after it is created, measured in seconds. When both expiration and payment_expiration are set, the payment expires at the earlier time. */
            page_expiration?: number;
            payment?: components["schemas"]["Payment"];
            /** @description Length of time for the payment to be completed after it is created, measured in seconds. When both expiration and payment_expiration are set, the payment expires at the earlier time. */
            payment_expiration?: number;
            /** @description The type of the payment method. For example, **it_visa_card** */
            payment_method_type?: string;
            /** @description A list of the categories of payment method that are supported on the checkout page. The categories appear on the page in the order provided */
            payment_method_type_categories?: string[];
            /** @description List of payment methods that are excluded from display on the checkout page. */
            payment_method_types_exclude?: string[];
            /** @description List of payment methods that are displayed on the checkout page. The payment methods appear on the page in the order provided. */
            payment_method_types_include?: string[];
            /** @description Time of creation of the checkout page, in Unix time. */
            timestamp?: number;
        };
        /** @description Invoice item */
        InvoiceItemResponse: {
            /** @description ID of the invoice item. String starting with **ii_**. */
            id?: string;
            /** @description The amount of the total charge or credit for this item. Decimal, including the correct number of decimal places for the currency exponent, as defined in ISO 2417:2015.<BR> This is `quantity` times `unit_amount`. A credit is indicated by a negative number. */
            amount?: number;
            /** @description Three-letter ISO 4217 code for the currency used in the `amount` field. */
            currency?: string;
            /** @description ID of the customer. String starting with **cus_**. */
            customer?: string;
            /** @description The time of the charge or credit, in Unix time. */
            date?: string;
            /** @description item description */
            description?: string;
            /** @description Determines whether this invoice item is subject to the discount defined in the coupon that is assigned to the customer or subscription. */
            discountable?: boolean;
            /** @description ID of the invoice item. String starting with **ii_**. */
            invoice_item?: string;
            /** @description ID of the invoice that this invoice item is assigned to. Relevant when `subscription` is not set. */
            invoice?: string;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            period?: components["schemas"]["InvoiceItemResponse_period"];
            plan?: components["schemas"]["Plan"];
            /** @description Indicates whether the invoice item is prorated. */
            proration?: boolean;
            /** @description Indicates the number of units charged as a single invoice item. Integer. */
            quantity?: number;
            /** @description ID of the subscription this invoice item is assigned to. By default, the invoice item is assigned to the customer's subscription whose current billing cycle ends first. Relevant when `invoice` is not set. */
            subscription?: string;
            /** @description Per-unit price of the product or service, adjusted as defined in the plan. Decimal. */
            unit_amount?: number;
        };
        /** @description Invoice item */
        InvoiceItem: {
            /** @description line item id */
            id?: string;
            /** @description amount */
            amount?: number;
            currency?: components["schemas"]["Currency_1"];
            /** @description item description */
            description?: string;
            discountable?: boolean;
            /** @description invoice item id */
            invoice_item?: string;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            period?: components["schemas"]["InvoiceItem_period"];
            proration?: boolean;
            quantity?: number;
            plan?: components["schemas"]["Plan"];
            /** @description ID of the subscription that generates charges to this customer. String starting with **sub_**. */
            subscription?: string;
            /** @description ID of the subscription item that generates charges to this customer. */
            subscription_item?: string;
            type?: string;
        };
        /** @description Invoice */
        InvoiceResponse: {
            id?: string;
            attempt_count?: number;
            /** @description Number of automatic attempts that Rapyd made to retry paying this invoice if it failed. */
            attempted?: number;
            /** @description Number of automatic attempts that Rapyd made to retry paying this invoice if it failed. */
            automatic_attempt_count?: number;
            /** @description Determines the method of collection, pay_automatically or send_invoice. Default is pay_automatically */
            billing?: string;
            /**
             * @description The reason for billing
             * @enum {string}
             */
            billing_reason?: "subscription_cycle" | "subscription_create" | "manual" | "upcoming";
            /** @description The time the invoice was created, in Unix time. Response only. */
            created_at?: number;
            discount?: components["schemas"]["Discount"];
            currency?: components["schemas"]["Currency_1"];
            /** @description ID of the customer. String starting with cus_. */
            customer?: string;
            /** @description The number of days until the due date. */
            days_until_due?: number;
            /** @description Description of the invoice. */
            description?: string;
            /** @description The amount of the discount that was applied to this invoice. */
            discount_amount?: number;
            /** @description The date payment is due on this invoice. This value is calculated from the date the invoice is created, plus the number of days specified in the `days_until_due` field. Format is in Unix time. */
            due_date?: string;
            lines?: components["schemas"]["InvoiceItemResponse"][];
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /** @description Object containing additional payment_options fields. */
            payment_fields?: Record<string, never>;
            /** @description Payment method for the invoice. */
            payment_method?: string | null;
            /** @description Description of the invoice for the customer's credit card statement. Limited to 22 characters. */
            statement_descriptor?: string;
            subscription?: components["schemas"]["Payment"];
            /** @description The tax rate, defined as a percentage. */
            tax_percent?: number;
            payment?: components["schemas"]["Payment"];
            payout?: components["schemas"]["Payout"];
            /** @description Reserved */
            payout_fields?: Record<string, never>;
            /** @description Last date in the period covered by the invoice, in Unix time. Response only. */
            period_end?: number;
            /** @description First date in the period covered by the invoice, in Unix time. Response only. */
            period_start?: number;
            /** @description The time when the next payment attempt will be made, in Unix time. */
            next_payment_attempt?: number;
            number?: string;
            /**
             * @description An invoice moves through a series of statuses. See status table below.
             * @enum {string}
             */
            status?: "draft" | "deleted" | "open" | "paid" | "void" | "uncollectible";
            /** @description Total of all line items before discount and before tax. Decimal. Response only. */
            subtotal?: number;
            /** @description Total after discount and tax. Decimal. */
            total?: number;
            /** @enum {string} */
            type?: "payment" | "payout";
        };
        InvoiceLineResponse: {
            id?: string;
            amount?: number;
            currency?: components["schemas"]["Currency_1"];
            description?: string;
            discountable?: boolean;
            invoice_item?: string;
            metadata?: Record<string, never>;
            period?: components["schemas"]["InvoiceLineResponse_period"];
            proration?: boolean;
            quantity?: number;
            subscription?: string;
            subscription_item?: string;
            type?: string;
            plan?: components["schemas"]["Plan"] | string;
        };
        /** @description last4 - Last four digits of the card number. Read-only. Relevant to cards */
        Last4: string;
        /** @description Contains details of the client’s customer support. To configure these fields, use the Client Portal. */
        MerchantCustomerSupport: {
            /** @description Email address. */
            email?: string;
            /** @description URL for the client's customer support service. */
            url?: string;
            /** @description Phone number for contacting the client's customer support service. */
            phone_number?: string;
            /** @description URL for the image of the client's logo. To configure this field, use the Client Portal. */
            merchant_logo?: string;
        };
        /**
         * @description Indicates the next action for completing the payment. Response only. One of the following values are - * 3d_verification - The next action is 3DS authentication. To simulate 3DS authentication in the sandbox, see Simulating 3DS Authentication. Relevant only to card payments. * pending_capture - The next action is pending the capture of the amount. Relevant only to card payments when the amount is not zero. * pending_confirmation - The next action is pending the confirmation for the payment. Relevant to all payment methods excluding card payment. * not_applicable - The payment has completed or the next action is not relevant.
         * @enum {string}
         */
        NextAction: "3d_verification" | "pending_capture" | "pending_confirmation" | "not_applicable";
        OrderItem: {
            amount?: number;
            currency?: components["schemas"]["Currency_1"];
            description?: string;
            parent?: string;
            quantity?: number;
            /** @enum {string} */
            type?: "discount" | "shipping" | "sku" | "tax";
        };
        OrderItemResponse: {
            /** @description Price of one SKU unit, in the currency defined in currency. Decimal, including the correct number of decimal places for the currency exponent, as defined in ISO 2417:2015. */
            amount?: number;
            currency?: components["schemas"]["Currency_1"];
            /** @description Description of the item. */
            description?: string;
            /** @description ID of the SKU object that represents the product. One of the following: ID of the SKU object. String starting with sku_ ID of the coupon. If generated by Rapyd, a string starting with coupon_.
             *      */
            parent?: string;
            /** @description Quantity of the product in the line item. Integer. Required when type is sku. */
            quantity?: number;
            /** @description Type of line item. */
            type?: string;
        };
        OrderResponse: {
            id?: string;
            amount?: number;
            amount_returned?: number;
            payment?: components["schemas"]["Payment"];
            created?: number;
            customer?: string;
            currency?: string;
            email?: string;
            external_coupon_code?: string;
            items?: components["schemas"]["OrderItemResponse"][];
            metadata?: Record<string, never>;
            /** @description A list of the returns charged against this order. */
            returns?: components["schemas"]["OrderReturnedItemResponse"][];
            shipping_address?: Record<string, never>;
            status?: string;
            status_transitions?: components["schemas"]["OrderResponse_status_transitions"];
            updated?: number;
            upstream_id?: string;
            tax_percent?: number;
        };
        OrderReturnedResponse: {
            id?: string;
            amount?: number;
            created?: number;
            currency?: components["schemas"]["Currency_1"];
            items?: components["schemas"]["OrderReturnedItemResponse"][];
            order?: string;
            refund?: string;
        };
        OrderReturnedItemResponse: {
            amount?: number;
            currency?: components["schemas"]["Currency_1"];
            description?: string;
            parent?: string;
            quantity?: number;
            type?: string;
        };
        /** @description The outcome object describes the outcome of the Rapyd Protect risk assessment */
        Outcome: {
            /** @enum {string} */
            network_status?: "approved_by_network" | "declined_by_network" | "not_sent_to_network" | "reversed_after_approval";
            /** @enum {string} */
            payment_flow_type?: "direct" | "eWallet" | "ewallet_payout" | "card" | "redirect_url";
            payment_options?: components["schemas"]["PaymentOptions"];
            /** @description Indicates the status of the payment method. One of the following value is 1 means the payment_method_type is Valid */
            status?: string;
            /** @enum {string} */
            risk_level?: "normal" | "elevated" | "highest" | "not_assessed";
            /** @description Message to the merchant */
            seller_message?: string;
        };
        /** @description Collects money from a payment method and deposits it into one or more Rapyd Wallets */
        Payment: {
            address?: components["schemas"]["Address_1"];
            /**
             * @description The amount received by the recipient, in units of the currency defined in currency. Decimal, including the correct number of decimal places for the currency exponent, as defined in ISO 2417:2015. To verify a card, set to 0.
             * @default 0
             */
            amount: number;
            /** @description Indicates that the card payment was authorized by the card network. */
            auth_code?: string;
            /** @description Reason for cancellation or reversal of a payment. Response only. */
            cancel_reason?: string;
            /**
             * @description Indicates whether the payment has been successfully captured. Response only.
             * @default true
             */
            captured: boolean;
            /** @description URL where the customer is redirected for final steps in completing the operation. Provided by the clientRelevant to bank redirect payment methods */
            complete_payment_url?: string;
            country_code?: components["schemas"]["Country_1"];
            /** @description Time of creation of the payment, in Unix time. Response only. */
            created_at?: number;
            currency_code?: components["schemas"]["Currency_1"];
            /** @description ID of the customer who is making the payment. String starting with **cus_**. When a payment is created without an existing customer, the platform creates an anonymous customer with no payment methods. Response only. */
            customer_token?: string;
            /** @description Description of the payment */
            description?: string;
            dispute?: components["schemas"]["Dispute"];
            /** @description Relevant error message (with an underscore between words) and ID number of the error. Response only. */
            error_code?: string;
            /** @description URL where the customer is redirected in case of an error in the operation. Provided by the client.Relevant to bank redirect payment methods */
            error_payment_url?: string;
            /** @description Describes the escrow. Relevant when the payment is created with escrow set to true. Response only. */
            escrow?: Record<string, never>;
            /** @description ID of the wallet that the money is paid into. String starting with ewallet_. Relevant when the request includes a single wallet. Response only. */
            ewallet_id?: string;
            /** @description Specifies the wallets that the money is collected into. If this is left blank, the money goes into the oldest 'collection'-type client wallet. If there is no 'collection' client wallet, the money goes into the oldest 'general'-type client wallet. */
            ewallets?: components["schemas"]["Payment_ewallets"][];
            /**
             * @description End of the time allowed for customer to make this payment, in Unix time. Must be after the current time
             * @default 0
             */
            expiration: number;
            /** @description Error code explaining the reason for failure of the payment. Response only. */
            failure_code?: string;
            /** @description Message to the merchant, explaining the reason for failure of the payment. Response only. */
            failure_message?: string;
            /** @description Indicates whether the FX rate is fixed for the buy side (seller) or for the sell side (buyer). * buy - The currency that the Rapyd Wallet receives for goods or services. Fixed side buy relates to the seller (merchant) funds. For example, a US-based merchant wants to charge 100 USD. The buyer (customer) pays the amount in MXN that converts to 100 USD. This is the default. * sell - The currency that the buyer is charged for purchasing goods or services. Fixed side sell relates to the buyer (customer) funds. For example, a US-based merchant wants to charge a buyer 2,000 MXN and will accept whatever amount in USD that is converted from 2,000 MXN. */
            fixed_side?: string;
            /** @description Reserved. */
            flow_type?: string;
            /**
             * @description Exchange rate for the transaction. When fixed_side is buy, fx_rate is the buy rate. When fixed_side is sell, fx_rate is the sell rate. Decimal number as string. Response only.
             * @default 1
             */
            fx_rate: number;
            /** @description ID of the group payment. String starting with gp_. Relevant when the payment is part of a group payment. */
            group_payment?: string;
            /** @description ID of the payment. String starting with payment_. Response only */
            id?: string;
            /** @description Reason for cancellation or reversal of a payment. Response only. */
            initiation_type?: string;
            /** @description Describes how the customer makes the payment. Read-only. Contains the following fields - * name - Description of the payment method. * steps - A steps object containing a list of steps for the customer to take. Each step is named stepN, where N is an integer. */
            instructions?: components["schemas"]["Payment_instructions"][];
            /** @description ID of the invoice that this payment is for. String starting with inv_. Response only. */
            invoice?: string;
            /**
             * @description Indicates whether the payment has been partially paid. When false, indicates that the payment is unpaid or fully paid. Response only.
             * @default false
             */
            is_partial: boolean;
            /** @description ID defined by the client. Limited to 255 characters. */
            merchant_reference_id?: string;
            /** @description Indicates the amount paid by the payer, in units of the currency defined in merchant_requested_currency. Relevant to payments with FX. Read only. */
            merchant_requested_amount?: string;
            /** @description Indicates the currency that merchant receives. Three-letter ISO 4217 code. Uppercase. Relevant to payments with FX. Response only. */
            merchant_requested_currency?: string;
            /** @description A JSON object defined by the client in the Customer Payment Method object. Response only. */
            metadata?: Record<string, never>;
            /** @description Reserved */
            mid?: string;
            next_action?: components["schemas"]["NextAction"];
            /** @description ID of the order that this payment is for. Read-only. Relevant when the payment is for an order. */
            order?: string;
            /**
             * @description * Foreign exchange payments - The amount paid by the sender, in units of the currency defined in requested_currency, including gross transaction fees and gross FX fees. * Payments not involving foreign exchange - The amount of the payment, in units of the currency defined in currency, including gross transaction fees. Response only.
             * @default 0
             */
            original_amount: number;
            outcome?: components["schemas"]["Outcome"];
            /**
             * @description Indicates whether the payment has been fully captured. Response only.
             * @default false
             */
            paid: boolean;
            /**
             * @description Time of the last capture, in Unix time. Response only.
             * @default 0
             */
            paid_at: number;
            payment_fees?: components["schemas"]["Fee"];
            /** @description payment_method ID or object. If not specified in this field, the payment method is the default payment method specified for the customer. Mandatory when there is no default payment method. For a description of the fields in the payment_method object, see Customer Payment Method Object. */
            payment_method?: string;
            /** @description Details of the payment_method_data object. See Payment Method Data Object. Response only. */
            payment_method_data?: Record<string, never> | null;
            /** @description Object describing additional payment method fields required for the payment. These values are not saved as part of the payment method object. To determine the fields required, run Get Payment Method Required Fields. */
            payment_method_options?: Record<string, never>;
            /** @description A type of payment method that a customer can use for making payments.
             *      The payment method type has a suffix with one of the following values [_bank, _card, _cash, _ewallet] */
            payment_method_type?: string;
            /**
             * @description Category of payment method type. Read-only.
             * @enum {string}
             */
            payment_method_type_category?: "bank_transfer" | "bank_redirect" | "card" | "cash" | "ewallet";
            /** @description Email address that the receipt for this transaction is sent to */
            receipt_email?: string;
            /** @description Reserved. Response only */
            receipt_number?: string;
            /** @description URL where the customer is redirected for additional steps required for the payment. Response only. To simulate 3DS authentication in the sandbox, see Simulating 3DS Authentication */
            redirect_url?: string;
            /**
             * @description Indicates whether there was a refund against this payment. Response only.
             * @default false
             */
            refunded: boolean;
            /**
             * @description The total amount refunded against this payment, in units of the currency defined in currency. Response only.
             * @default 0
             */
            refunded_amount: number;
            refunds?: components["schemas"]["Payment_refunds"];
            /** @description Contains the customer name and the associated bank account. This includes - * name - Name of the customer. * account_id - ID of the customer's bank account. * bank_code - SWIFT code for the customer's bank. Response only. */
            remitter_information?: Record<string, never>;
            /** @description * true - Saves the card for future use. This is the default. * false - Does not save the card. Relevant when payment_method_type_category is card and the "Create Payment" request includes full card details. */
            save_payment_method?: boolean;
            /** @description A text description suitable for a customer's payment statement. Limited to 22 characters. If this field is not specified, Rapyd populates it with the name of the merchant */
            statement_descriptor?: string;
            status?: components["schemas"]["PaymentStatus"];
            /** @description A set of text codes for the customer to use to complete the steps described in the instructions field. Response only.
             *      The name of the field is the local name of the code, or some other label. For example
             *      * code * paycode * pay_code * payid * pairing_code * payment_code * response_code */
            textual_codes?: Record<string, never>;
            /** @description ID of the associated transaction. Response only */
            transaction_id?: string;
            /** @description A set of images for the customer to use to complete the steps described in the instructions field. For example, a QR code or barcode. Response only. */
            visual_codes?: Record<string, never>;
        };
        PaymentFee: {
            fx_fee?: components["schemas"]["FxFee"];
            /**
             * @description The total gross fees for the transaction, in units defined by currency_code. Relevant to responses.
             * @example 4.23
             */
            gross_fees?: number;
            /**
             * @description The total net fees for the transaction, in units defined by merchant_requested_currency. Relevant to responses.
             * @example 0
             */
            net_fees?: number;
            transaction_fee?: components["schemas"]["TransactionFee"];
        } | null;
        /** @description Retrieves details of a payment link. */
        PaymentLink: {
            /**
             * @description The amount of the payment, in units of the currency defined in currency. Decimal, including the correct number of decimal places for the currency exponent, as defined in ISO 2417:2015. On the hosted payment page, the customer: <BR><BR> Cannot modify the amount when amount_is_editable is false or not used. <BR><BR> Can modify the amount when amount_is_editable is true and amount has a positive value. <BR><BR> Must enter an amount when amount_is_editable is true and amount is 0, null, or not used.
             * @example 100
             */
            amount?: number;
            /** @description Determines whether the customer can edit the amount.<br><br> **true** - The customer can edit the amount. <br><br> **false** - The customer cannot edit the amount. */
            amount_is_editable?: boolean;
            /**
             * @description The two-letter ISO 3166-1 ALPHA-2 code for the country.
             * @example FR
             */
            country?: string;
            /**
             * @description The two-letter ISO 3166-1 ALPHA-2 code for the country. <BR><BR> **Transactions without FX** - Indicates the currency of the amount received by the recipient. BR><BR> **FX transactions** - Indicates the currency of the amount paid by the buyer.
             * @example EUR
             */
            currency?: string;
            /**
             * @description ID of a specific customer. String starting with **cus_**. Restricts the payment link to the customer.
             * @example cus_34534dsfgdg3453
             */
            customer?: string;
            /**
             * @description Indicates whether the FX rate is fixed for the buy side (seller) or for the sell side (buyer). <BR><BR> * buy - The currency that the Rapyd Wallet receives for goods or services. Fixed side buy relates to the seller (merchant) funds. For example, a US-based merchant wants to charge 100 USD. The buyer (customer) pays the amount in MXN that converts to 100 USD. This is the default. <BR><BR> * sell - The currency that the buyer is charged for purchasing goods or services. Fixed side sell relates to the buyer (customer) funds. For example, a US-based merchant wants to charge a buyer 2,000 MXN and will accept whatever amount in USD that is converted from 2,000 MXN.
             * @example sell
             */
            fixed_side?: string;
            /**
             * @description ID of the payment link. String starting with **hp_reuse_**.
             * @example hp_reuse_bd5cbfc99af8fffc834c444e746246c3
             */
            id?: string;
            /**
             * @description Determines the default language of the hosted page. For a list of values, see https://docs.rapyd.net/en/list-supported-languages.html. <BR><BR> When this parameter is null, the language of the user's browser is used. BR><BR> If the language of the user's browser cannot be determined, the default language is English.
             * @default en
             */
            language: string;
            /**
             * @description Indicates the maximum number of times that the payment link can be used for payments. When not defined, there is no limit.
             * @example 7
             */
            max_payments?: number;
            /**
             * @description Client's name.
             * @default Rapyd
             */
            merchant_alias: string;
            /**
             * @description Color of the call-to-action (CTA) button on the hosted page. To configure this field, use the Client Portal. See https://docs.rapyd.net/en/customizing-your-hosted-page.html.
             * @example 323fff
             */
            merchant_color?: string;
            merchant_customer_support?: components["schemas"]["MerchantCustomerSupport"];
            /** @description URL for the image of the client's logo. To configure this field, use the Client Portal. */
            merchant_logo?: string;
            /** @description URL for the terms and conditions of the agreement between the client and the client’s customers. To configure this field, use the Client Portal. */
            merchant_privacy_policy?: string;
            /** @description Identifier defined by the client for reference purposes. Limit: 45 characters. */
            merchant_reference_id?: string;
            /** @description The URL where the customer is redirected after exiting the hosted page. Relevant when one or both of the following fields is unset: <BR><BR> * `cancel_url` <BR><BR> * `complete_url`<BR><BR> To configure this field, use the Client Portal */
            merchant_website?: string;
            /** @description End of the time when the customer can use the payment link, in Unix time. One year after creation. <BR> <BR> **Note:** Each hosted page that the payment link generates expires 14 days after creation. */
            page_expiration?: number;
            /** @description Currency for one side of an FX transaction. Three-letter ISO 4217 code. <BR><BR>* When `fixed_side` is **sell**, it is the currency received in the Rapyd Wallet. <BR><BR>* When `fixed_side` is **buy**, it is the currency charged to the buyer (customer). */
            requested_currency?: string;
            /** @description The payment link URL. */
            redirect_url?: string;
            /** @description Status of the hosted payment page. One of the following: <BR><BR>* **NEW** - The hosted page was created. <BR><BR>* **EXP** - The hosted page expired. */
            status?: string;
            /** @description Optional parameters for the checkout page. */
            template?: Record<string, never>;
        };
        /** @description A type of payment method that a customer can use for making payments. */
        PaymentMethodType: {
            amount_range_per_currency?: components["schemas"]["PaymentAmountRangePerCurrency"];
            category?: components["schemas"]["Category"];
            country?: components["schemas"]["Country_1"];
            currencies?: components["schemas"]["Currency_1"][];
            /** @description Payment Method Type required field */
            fields?: components["schemas"]["Field_1"][];
            /** @description A URL to the image of the icon for the type of payment method. Response only */
            image?: string;
            /** @description Indicates whether a payment made with this payment method can be canceled. Response only */
            is_cancelable?: boolean;
            /** @description Indicates whether the merchant can set an expiration time for the customer to complete the payment. Response only */
            is_expirable?: boolean;
            /** @description Indicates whether the payment is completed immediately online. Response only */
            is_online?: boolean;
            /** @description Indicates whether the payment method type supports refunds */
            is_refundable?: boolean;
            /** @description Indicates whether the token of the payment method can be used in a collect operation */
            is_tokenizable?: boolean;
            /** @description Indicates whether a Web-based version of the payment method type exists */
            is_virtual?: boolean;
            /** @description The maximum time (in seconds) that the merchant can set for completing the payment. Relevant when is_expirable is true */
            maximum_expiration_seconds?: number;
            /** @description The minimum time (in seconds) that the merchant can set for completing the payment. Relevant when is_expirable is true */
            minimum_expiration_seconds?: number;
            /** @description Indicates whether multiple overage charges are allowed for this payment method type */
            multiple_overage_allowed?: boolean;
            /** @description The name of the payment method, in user-friendly terms. For example, Ireland Visa card. Response only */
            name?: string;
            /** @enum {string} */
            payment_flow_type?: "direct" | "eWallet" | "ewallet_payout" | "card" | "redirect_url" | "cash" | "bank transfer";
            payment_options?: components["schemas"]["Field_1"][];
            /** @description Indicates the status of the payment method. One of the following value is 1 means the payment_method_type is Valid */
            status?: string;
            /** @description Describes the digital wallet providers that support the payment method. These providers may include **apple_pay** and **google_pay**. */
            supported_digital_wallet_providers?: string[];
            /** @description Type of the payment method. For example, it_visa_card */
            type?: string;
            /** @description Indicates the name of the Web-based version of this payment method type */
            virtual_payment_method_type?: string;
            /** @description Indicates if the payment method type restricted or not. */
            is_restricted?: boolean;
            /** @description Indicates if the payment method type supports subscription. */
            supports_subscription?: boolean;
        };
        /** @description Payment Method Type required fields - this is the response of GET required fields for Payment_Method_Type */
        PaymentMethodTypeRequiredFields: {
            /** @description Payment Method Type required field */
            fields?: components["schemas"]["Field_1"][];
            /** @description The maximum time (in seconds) that the merchant can set for completing the payment. Relevant when is_expirable is true */
            maximum_expiration_seconds?: number;
            /** @description The minimum time (in seconds) that the merchant can set for completing the payment. Relevant when is_expirable is true */
            minimum_expiration_seconds?: number;
            /** @description payment method option */
            payment_method_options?: components["schemas"]["Field_1"][];
            payment_options?: components["schemas"]["Field_1"][];
            type?: string;
        };
        /** @description A payment method type is a type of payment method that any customer can use, for example, ee_mastercard_card, Mastercard for Estonia. When it is added to a customer profile, it becomes a payment method that is specific to that one customer. The name of the payment method type starts with a prefix for the country, the 2-letter ISO 3166-1 alpha-2 code. If the payment method is valid in multiple countries, the prefix is xx_. The payment method type has a suffix with one of the following values - _bank - Bank transfer or bank redirect _card - Credit card, debit card or other card _cash - Cash _ewallet - Local eWallet */
        PaymentOptions: {
            address?: components["schemas"]["Address_1"];
            amount_range_per_currency?: components["schemas"]["PaymentAmountRangePerCurrency"];
            bin_details?: components["schemas"]["BinDetails"];
            category?: components["schemas"]["Category"];
            conditions?: components["schemas"]["Condition"][];
            country?: components["schemas"]["Country_1"];
            currencies?: components["schemas"]["Currency_1"][];
            customer?: components["schemas"]["Customer"];
            /** @description Hash of the card number, expiration date and CVV. Read-only. Relevant to cards */
            fingerprint?: string;
            /** @description A URL to the image of the icon for the type of payment method. Response only */
            image?: string;
            /** @description Instructions for the field. Response only */
            instructions?: string;
            /** @description Indicates whether a payment made with this payment method can be canceled. Response only */
            is_cancelable?: boolean;
            /** @description Indicates whether the merchant can set an expiration time for the customer to complete the payment. Response only */
            is_expirable?: boolean;
            /** @description Indicates whether the payment is completed immediately online. Response only */
            is_online?: boolean;
            /** @description Indicates whether the payment method type supports refunds */
            is_refundable?: boolean;
            /** @description Whether the field is required for using the payment method. When the conditions defined by conditions are met, the field is required even though the value of is_required is false. Response only */
            is_required?: boolean;
            /** @description Indicates whether the token of the payment method can be used in a collect operation */
            is_tokenizable?: boolean;
            /** @description Indicates whether a Web-based version of the payment method type exists */
            is_virtual?: boolean;
            last4?: components["schemas"]["Last4"];
            /** @description The maximum time (in seconds) that the merchant can set for completing the payment. Relevant when is_expirable is true. Response only */
            maximum_expiration_seconds?: number;
            /** @description The minimum time (in seconds) that the merchant can set for completing the payment. Relevant when is_expirable is true. Response only */
            minimum_expiration_seconds?: number;
            /** @description Indicates whether multiple overage charges are allowed for this payment method type */
            multiple_overage_allowed?: boolean;
            /** @description The name of the payment method, in user-friendly terms. For example, 'Ireland Visa card'. Response only */
            name?: string;
            /** @enum {string} */
            payment_flow_type?: "direct" | "eWallet" | "ewallet_payout" | "card" | "redirect_url";
        };
        /**
         * @default ACT
         * @enum {string}
         */
        PaymentStatus: "ACT" | "CLO" | "ERR" | "CAN" | "EXP" | "DLD" | "REV" | "UND" | "CRE";
        PaymentParams: {
            /** @description URL where the customer is redirected after successfully completing an operation on a hosted page. Does not support localhost URLs. */
            complete_payment_url?: string;
            /** @description URL where the customer is redirected if an error occurs during or after an operation on a hosted page. Does not support localhost URLs. */
            error_payment_url?: string;
        };
        /** @description Describes the pricing structure for the invoice item. For details of the fields in the `plan` object, see 'Create Plan'. */
        Plan: {
            /** @description Indicates whether the plan is available to be added to a subscription. */
            active?: boolean;
            /**
             * @description Determines which quantity is used to calculate the pricing. One of the following:
             *     * max - The maximum reported usage within the billing cycle.
             *     * sum - The sum of all usage during a billing cycle. This is the default.
             *     * last_during_period - The last usage reported within the billing cycle.
             *     * last_ever - The last usage ever reported, if the latest billing cycles contain no usage at all. Required when usage_type is metered. Relevant when billing_scheme is set to per_unit.
             *
             * @example sum
             * @enum {string}
             */
            aggregate_usage?: "max" | "sum" | "last_during_period" | "last_ever";
            /**
             * @description The amount to charge, in units of the currency defined in currency. Decimal, including the correct number of decimal places for the currency exponent, as defined in ISO 2417:2015. If the amount is a whole number, use an integer and not a decimal. For a free service, use 0. Must be null when tiers is set. Relevant when `billing_scheme` is set to **per_unit**.
             * @example 0
             */
            amount?: number;
            /**
             * @description Describes how to compute the price. One of the following:
             *     * per_unit - The amount specified in amount is charged for each unit. Also set these related fields: amount, transform_usage, usage_type, aggregate_usage. This is the default.
             *     * tiered - The unit pricing is computed using a tiering strategy as defined with the tiers and tiers_mode fields.
             *
             * @example tiered
             * @enum {string}
             */
            billing_scheme?: "per_unit" | "tiered";
            /**
             * @description Time the 'plan' object was created, in Unix time. Response only.
             * @example 1592311574
             */
            created_at?: number;
            currency?: components["schemas"]["Currency_1"];
            /**
             * @description Unique ID for this plan. English alphanumeric characters with no special characters except underscore. If the client does not define an ID, Rapyd generates a string starting with **plan_**.
             * @example plan_51788cf4ed1b672cb0a2a97773887f5b
             */
            id?: string;
            /**
             * @description Specifies the units used in defining the billing cycle. One of the following:
             *     * day
             *     * week
             *     * month
             *     * year Maximum interval is 1 year.
             *
             * @example month
             * @enum {string}
             */
            interval?: "month" | "day" | "week" | "year";
            /**
             * @description Number of time intervals in the billing cycle. Integer
             * @example 2
             */
            interval_count?: number;
            /**
             * @description A JSON object defined by the client.
             * @example {}
             */
            metadata?: Record<string, never>;
            /**
             * @description Brief description of the plan.
             * @example Basic Parking
             */
            nickname?: string;
            /** @description The ID of the product that this plan is for, and fields describing this product in the plan. */
            product?: (components["schemas"]["Product"] | string) | null;
            /** @description Defines a tiered pricing structure. Each tier object represents a pricing tier. */
            tiers?: components["schemas"]["Plan_tiers"][];
            /**
             * @description Determines the mode for calculating the total tiered charge. One of the following values:
             *     * graduated - The total cost at each price tier is calculated separately, then all tier charges are added together.
             *     * volume - The total cost is calculated as the number of items times the applicable tier price. Relevant when billing_scheme is set to tiered
             *
             * @example volume
             * @enum {string}
             */
            tiers_mode?: "graduated" | "volume";
            transform_usage?: components["schemas"]["Plan_transform_usage"];
            /**
             * @description Specifies the number of days before charges begin to accrue. Use this parameter to define a free trial period for a service.
             * @example 0
             */
            trial_period_days?: number;
            /**
             * @description Determines whether the customer is billed when the service is not actually used. Relevant when billing_scheme is set to per_unit. One of the following:
             *     * metered - The customer is billed only for actual usage. You must also set aggregate_usage.
             *     * licensed - The customer is billed even if the service is not used. This is the default.
             *
             * @example licensed
             * @enum {string}
             */
            usage_type?: "metered" | "licensed";
        };
        PlanObject: {
            /**
             * @description Determines which quantity is used to calculate the pricing. One of the following:
             *     * max - The maximum reported usage within the billing cycle.
             *     * sum - The sum of all usage during a billing cycle. This is the default.
             *     * last_during_period - The last usage reported within the billing cycle.
             *     * last_ever - The last usage ever reported, if the latest billing cycles contain no usage at all. Required when usage_type is metered. Relevant when billing_scheme is set to per_unit.
             *
             * @example sum
             * @enum {string}
             */
            aggregate_usage?: "max" | "sum" | "last_during_period" | "last_ever";
            /**
             * @description The amount to charge, in units of the currency defined in currency. Decimal, including the correct number of decimal places for the currency exponent, as defined in ISO 2417:2015. If the amount is a whole number, use an integer and not a decimal. For a free service, use 0. Must be null when tiers is set. Relevant when billing_scheme is set to per_unit.
             * @example 0
             */
            amount?: number;
            /**
             * @description Describes how to compute the price. One of the following:
             *     * per_unit - The amount specified in amount is charged for each unit. Also set these related fields: amount, transform_usage, usage_type, aggregate_usage. This is the default.
             *     * tiered - The unit pricing is computed using a tiering strategy as defined with the tiers and tiers_mode fields.
             *
             * @example tiered
             */
            billing_scheme?: string;
            /**
             * @description Time the 'plan' object was created, in Unix time. Response only.
             * @example 1592311574
             */
            created_at?: number;
            currency?: components["schemas"]["Currency_1"];
            /**
             * @description Unique ID for this plan. English alphanumeric characters with no special characters except underscore. If the client does not define an ID, Rapyd generates a string starting with plan_.
             * @example plan_51788cf4ed1b672cb0a2a97773887f5b
             */
            id?: string;
            /**
             * @description Specifies the units used in defining the billing cycle. One of the following:
             *     * day
             *     * week
             *     * month
             *     * year Maximum interval is 1 year.
             *
             * @example month
             * @enum {string}
             */
            interval?: "month" | "day" | "week" | "year";
            /**
             * @description Number of time intervals in the billing cycle. Integer
             * @example 2
             */
            interval_count?: number;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /**
             * @description Brief description of the plan.
             * @example Basic Parking
             */
            nickname?: string;
            /** @description The ID of the product that this plan is for, and fields describing this product in the plan. */
            product?: components["schemas"]["Product"] | string;
            /** @description Defines a tiered pricing structure. Each tier object represents a pricing tier. */
            tiers?: components["schemas"]["PlanObject_tiers"][];
            /**
             * @description Determines the mode for calculating the total tiered charge. One of the following values:
             *     * graduated - The total cost at each price tier is calculated separately, then all tier charges are added together.
             *     * volume - The total cost is calculated as the number of items times the applicable tier price. Relevant when billing_scheme is set to tiered
             *
             * @example volume
             * @enum {string}
             */
            tiers_mode?: "graduated" | "volume";
            transform_usage?: components["schemas"]["Plan_transform_usage"];
            /**
             * @description Specifies the number of days before charges begin to accrue. Use this parameter to define a free trial period for a service.
             * @example 0
             */
            trial_period_days?: number;
            /**
             * @description Determines whether the customer is billed when the service is not actually used. Relevant when billing_scheme is set to per_unit. One of the following:
             *     * metered - The customer is billed only for actual usage. You must also set aggregate_usage.
             *     * licensed - The customer is billed even if the service is not used. This is the default.
             *
             * @example licensed
             * @enum {string}
             */
            usage_type?: "metered" | "licensed";
        };
        Product: {
            /**
             * @description Indicates whether the product is currently available for purchase.
             * @example true
             */
            active?: boolean;
            /**
             * @description Up to 5 unique alphanumeric strings defined by the merchant. Cannot contain spaces. For example: [ > "size", > "color"] Each string defines the key in a key-value pair in the 'attributes' object in the corresponding 'sku' objects.
             * @example [
             *       "armrest",
             *       "color",
             *       "cover"
             *     ]
             */
            attributes?: string[];
            /**
             * @description Time of creation of this product, in Unix time. Response only.
             * @example 1592299157
             */
            created_at?: number;
            /**
             * @description Full text description of the product.
             * @example The ultimate in comfort for the dedicated gamer
             */
            description?: string;
            /**
             * @description Unique string for identification of the product. Legal input includes alphanumeric characters and the underscore () character. If the merchant does not define an ID, Rapyd generates it with a string that starts with **product**.
             * @example product_0d9dc6be69c769560fe913f3b086d8ca
             */
            id?: string;
            /**
             * @description Images associated with the product.
             * @example [
             *       "64bit-encoded-image-1",
             *       "64bit-encoded-image-2"
             *     ]
             */
            images?: string[];
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /**
             * @description The name of the product or service that appears in the line items in invoices.
             * @example Gamer's Red Chair
             */
            name?: string;
            package_dimensions?: components["schemas"]["Product_package_dimensions"];
            /**
             * @description Indicates whether the product can be shipped.
             * @example true
             */
            shippable?: boolean;
            skus?: components["schemas"]["Sku"][];
            /** @description Description that is suitable for a customer's statement. Limited to 22 characters. Relevant when type is service. Must be null when type is goods. */
            statement_descriptor?: string;
            /**
             * @description One of the following:
             *     * services - Relevant to subscriptions and plans.
             *     * goods - Relevant to orders and SKUs.
             *
             * @example goods
             * @enum {string}
             */
            type?: "goods" | "services";
            /** @description Determines what one unit of this product is called on customersâ€™ receipts and invoices, such as minutes, viewings, kilometers or packages. Relevant when type is service. Must be null when type is goods. */
            unit_label?: string;
            /**
             * @description Time that this product was last updated, in Unix time. Response only.
             * @example 1592300812
             */
            updated_at?: number;
        };
        Refund: {
            /** @description Amount of the refund, in units defined by currency in the original payment. Decimal, including the correct number of decimal places for the currency exponent, as defined in ISO 2417:2015. */
            amount?: number;
            /** @description Time of creation of this refund, in Unix time. Response only. */
            created_at?: number;
            currency?: components["schemas"]["Currency_1"];
            /** @description An array of one object, which contains the following fields: * ewallet_id - The ID of the wallet that the money is transferred from, a string starting with ewallet_. * amount - Amount of the transaction in currency units defined in currency. * percent - A decimal number representing a percentage of the total payout. Response only. */
            ewallets?: components["schemas"]["Refund_ewallets"][];
            /** @description Indicates the reason that the refund failed. */
            failure_reason?: string;
            /** @description Indicates whether the FX rate is fixed for the buy side or for the sell side. Relevant for refunds with foreign exchange. Response only. */
            fixed_side?: string;
            /** @description Exchange rate for the transaction. When fixed_side is buy, fx_rate is the buy rate. When fixed_side is sell, fx_rate is the sell rate. Decimal number as string. Relevant to refunds with foreign exchange. Response only. */
            fx_rate?: string;
            /** @description ID of the Refund object. String starting with **refund_**. */
            id?: string;
            /** @description Amount debited from the merchant. Relevant to refunds with foreign exchange. Response only. */
            merchant_debited_amount?: string;
            /** @description Indicates the currency that is debited from the merchant. Three-letter ISO 4217 code. Relevant to refunds with foreign exchange. Response only. */
            merchant_debited_currency?: string;
            /** @description Merchant-defined ID. Limited to 255 characters. */
            merchant_reference_id?: string;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /** @description D of the Payment object that the refund is credited against. String starting with payment_. */
            payment?: string;
            /** @description Time that the original payment was created, in Unix time. Response only. */
            payment_created_at?: number;
            /** @description The original payment payment method type. Use List Payment Methods by Country for a list of supported types for a country */
            payment_method_type?: string;
            /** @description Indicates whether the refund was returned in proportion to the amounts received by the wallets in the payment. Relevant to a refund for a payment split among multiple wallets. */
            proportional_refund?: boolean;
            /** @description Description of the reason for the refund, provided by the merchant. */
            reason?: string;
            /** @description Number of the receipt for the refund, provided by the merchant. Response only. */
            receipt_number?: number;
            /** @description Indicates the status of the refund operation */
            status?: string;
            /** @description Time that this refund was last updated, in Unix time. Response only. */
            updated_at?: number;
        };
        Sku: {
            /**
             * @description Indicates whether the product is currently being sold. Default is false.
             * @example true
             */
            active?: boolean;
            /**
             * @description Up to 5 alphanumeric key-value pairs defined by the merchant. Each key must match a string in the attributes list of the corresponding product object.
             * @example {
             *       "color": "green"
             *     }
             */
            attributes?: Record<string, never>;
            /**
             * @description Time of creation of this SKU, in Unix time. Response  only.
             * @example 1546353713
             */
            created_at?: number;
            currency?: components["schemas"]["Currency_1"];
            /**
             * @description ID of the SKU object. Alphanumeric characters and underscores. Defined by the merchant, or a string starting with **sku**.
             * @example sku_a6d86bdc6f3a7ef6cb51de5a5678493f
             */
            id?: string;
            /** @description URL of image associated with the product. */
            image?: string;
            /** @description Contains the following fields: type - One of the following values: finite - Physical objects that can be counted. infinite - Products such as downloadable software. bucket - Products that are sold by measurable quantity. quantity - The number of units available in inventory. Integer. Relevant when type is finite. value - The status of the product on hand in inventory. Relevant when type is bucket. One of the following: in_stock - A normal amount of product is available in inventory. limited - There is enough product in inventory for small orders only. * out_of_stock - No product remains in inventory. */
            inventory?: Record<string, never>;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            package_dimensions?: components["schemas"]["Sku_package_dimensions"];
            /**
             * @description Price of one unit. Decimal.
             * @example 10.99
             */
            price?: number;
            /**
             * @description ID of the product that this SKU relates to.
             * @example product_f383d03c34fb499eb3ada4e3c574002a
             */
            product?: string;
            /**
             * @description Time that this product was last updated, in Unix time. Response only.
             * @example 1546354288
             */
            updated_at?: number;
        };
        Subscription: {
            /**
             * @description Determines the method of billing at the end of the billing cycle. Set to pay_automatically - Rapyd generates a 'payment' object, then attempts to pay it using the designated payment method.
             * @example pay_automatically
             */
            billing?: string;
            /**
             * @description Determines the start of the next full billing cycle, as defined in the plan described in the 'items'. One of the following values:
             *     * now - The present day. The next billing cycle starts right now.
             *     * Timestamp in Unix time - A time in the future, at or after the end of the free trial period, not more than the length of the billing cycle. The current billing cycle will be shorter than all other billing cycles. Relevant to creation of the subscription.
             *     * unchanged - The original billing cycle anchor is unchanged. Relevant to updating a subscription.
             *
             * @example 1592379647
             */
            billing_cycle_anchor?: string | number;
            /**
             * @description Determines the last date that charges accrue. true - Charges accrue until the end of the current billing period, then the subscription is canceled.
             *     * When no trial period is set, after cancel_at_period_end is set to true the subscription will not be renewed at the next interval.
             *     * When a trial period is set after cancel_at_period_end is set to true, the subscription will not begin. false - This is the default.
             *     * When the subscription is created, no end is defined. * When Cancel Subscription is run, charges stop immediately and the subscription is canceled.
             *
             * @example true
             */
            cancel_at_period_end?: boolean;
            /** @description Date and time that the subscription is canceled by the customer or by the client. Unix time. Response only. */
            canceled_at?: number | null;
            /**
             * @description Time of creation of this subscription, in Unix time. Response only.
             * @example 1592379647
             */
            created_at?: number | null;
            /**
             * @description End of the current billing cycle, in Unix time. Response only.
             * @example 1594971647
             */
            current_period_end?: number;
            /**
             * @description Start of the current billing cycle, in Unix time. Response only.
             * @example 1592379647
             */
            current_period_start?: number;
            /**
             * @description ID of the customer who pays for this subscription. String starting with cus_. Response only.
             * @example cus_3f4ed3168413d863671602dfbe839aa2
             */
            customer_token?: string;
            /**
             * @description Number of days from the invoice date for customer to complete the payment.
             * @example 30
             */
            days_until_due?: number | null;
            discount?: components["schemas"]["Discount"];
            /** @description Date that the subscription was canceled or otherwise terminated. Unix time. Response only. */
            ended_at?: number | null;
            /**
             * @description ID of the Subscription object. String starting with sub_.
             * @example sub_04fd8fbd78d7dd7e0e6323810a69275c
             */
            id?: string;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /** @description Additional payment_options fields. */
            payment_fields?: Record<string, never> | null;
            /**
             * @description Payment method ID or Payment Method object. if not specified in this field, the payment method is the default payment method specified for the customer.
             * @example card_320dcb1879fbc41f13a81e690636f3c2
             */
            payment_method?: string;
            /** @description Reserved. */
            payout_fields?: Record<string, never> | null;
            /**
             * @description Determines whether each upcoming subscription invoice is issued immediately.
             *     * true - The invoice is issued when the subscription is created.
             *     * false - The invoice is issued an hour after the subscription is created. This is the default.
             *
             * @example true
             */
            simultaneous_invoice?: boolean;
            /**
             * @description Status of the subscription. One of the following:
             *     * active - The customer is currently paying for this subscription.
             *     * canceled - The customer has canceled this subscription, but it remains in the Rapyd database.
             *     * past_due - Payment for this subscription was not received by the end of the billing period.
             *     * trialing - The subscription is in its free trial period. * unpaid - An error occurred in the payment for this subscription. Response only.
             *
             * @example active
             * @enum {string}
             */
            status?: "active" | "canceled" | "past_due" | "trialing" | "unpaid";
            subscription_items?: components["schemas"]["SubscriptionItems"];
            /**
             * @description The percentage tax rate that is applied to the subtotal of the invoice, after subtracting all discounts. Decimal. Range: 0-100, with up to four decimal places.
             * @example 10.5
             */
            tax_percent?: number;
            /** @description The date and time of the end of the customer's free trial period, in Unix time, or the string now. Takes precedence over trial_period_days. If trial_end is not set by the client, Rapyd calculates this date by adding trial_period_days to the date in created_at. Relevant when trial_period_days is not defined. */
            trial_end?: number | null;
            /** @description Date and time of the start of the customer's free trial period, in Unix time. Response only. */
            trial_start?: number | null;
            /**
             * @description The type of the subscription. One of the following values:
             *     * payment
             *     * payout
             *     Response only.
             *
             * @example payment
             * @enum {string|null}
             */
            type?: "payout" | "payment" | null;
        };
        SubscriptionHostedPageReponse: {
            /**
             * @description Determines the method of billing at the end of the billing cycle. Set to pay_automatically - Rapyd generates a 'payment' object, then attempts to pay it using the designated payment method.
             * @example pay_automatically
             */
            billing?: string;
            /**
             * @description Determines the start of the next full billing cycle, as defined in the plan described in the 'items'. One of the following values:
             *     * **now** - The present day. The next billing cycle starts right now.
             *     * <em>Timestamp</em> in Unix time - A time in the future, at or after the end of the free trial period, not more than the length of the billing cycle. The current billing cycle will be shorter than all other billing cycles. Relevant to creation of the subscription.
             *     * **unchanged** - The original billing cycle anchor is unchanged. Relevant to updating a subscription.
             *
             * @example 1592379647
             */
            billing_cycle_anchor?: string | number;
            /**
             * @description Determines the last date that charges accrue. **true** - Charges accrue until the end of the current billing period, then the subscription is canceled.
             *     * When no trial period is set, after `cancel_at_period_end` is set to **true** the subscription will not be renewed at the next interval.
             *     * When a trial period is set after `cancel_at_period_end` is set to **true**, the subscription will not begin. <BR> * **false** - This is the default.
             *     * When the subscription is created, no end is defined. * When 'Cancel Subscription' is run, charges stop immediately and the subscription is canceled.
             *
             * @example true
             */
            cancel_at_period_end?: boolean;
            /** @description URL where the customer is redirected after pressing **Back to Website** to exit the hosted page. This URL overrides the `merchant_website` URL. Does not support localhost URLs. or by the client. Unix time. Response only. */
            cancel_checkout_url?: string;
            /** @description Date and time that the subscription is canceled by the customer or by the client. Unix time. Response only. */
            canceled_at?: number | null;
            /** @description URL where the customer is redirected after pressing **Finish** to exit the hosted page. This URL overrides the `merchant_website` URL. Does not support localhost URLs. */
            complete_checkout_url?: string;
            /** @description URL where the customer is redirected when payment is successful, after returning from an external page such as a 3DS page. Does not support localhost URLs. */
            complete_payment_url?: string;
            /** @description The two-letter ISO 3166-1 ALPHA-2 code for the country. */
            country?: string;
            /** @description ID of a coupon to apply a discount to the subscription. String starting with **coupon_**. */
            coupon?: string;
            /**
             * @description Time of creation of this subscription, in Unix time. Response only.
             * @example 1592379647
             */
            created_at?: number | null;
            /**
             * @description End of the current billing cycle, in Unix time. Response only.
             * @example 1594971647
             */
            current_period_end?: number;
            /**
             * @description Start of the current billing cycle, in Unix time. Response only.
             * @example 1592379647
             */
            current_period_start?: number;
            custom_elements?: components["schemas"]["SubscriptionHostedPageReponse_custom_elements"];
            /**
             * @description ID of the customer who pays for this subscription. String starting with cus_. Response only.
             * @example cus_3f4ed3168413d863671602dfbe839aa2
             */
            customer?: string;
            /**
             * @description Number of days from the invoice date for customer to complete the payment.
             * @example 30
             */
            days_until_due?: number | null;
            discount?: components["schemas"]["Discount"];
            /** @description URL where the customer is redirected when payment is not successful, after returning from an external page, such as a 3DS page. Does not support localhost URLs. */
            error_payment_url?: string;
            /**
             * @description ID of the subscription. String starting with **hp_sub_**.
             * @example hp_sub_04fd8fbd78d7dd7e0e6323810a69275c
             */
            id?: string;
            /** @description Determines the default language of the hosted page. For a list of values, see List Supported Languages.<BR> * When this parameter is null, the language of the user's browser is used.<BR> * If the language of the user's browser cannot be determined, the default language is English. */
            language?: string;
            /** @description Client's name. */
            merchant_alias?: string;
            /** @description Color of the call-to-action (CTA) button on the hosted page.<BR> To configure this field, use the Client Portal. */
            merchant_color?: string;
            merchant_customer_support?: components["schemas"]["SubscriptionHostedPageReponse_merchant_customer_support"];
            /** @description Indicates the text for the call-to-action button on the subscription checkout page. */
            merchant_main_button?: Record<string, never>;
            /** @description URL for the terms and conditions of the agreement between the client and the client’s customers.<BR> To configure this field, use the Client Portal. See Customizing Your Hosted Page. */
            merchant_privacy_policy?: string;
            /** @description Identifier defined by the client for reference purposes. Limit: 45 characters. */
            merchant_reference_id?: string;
            /** @description URL for the client's terms and conditions. To configure this field, use the Client Portal. */
            merchant_terms?: string;
            /** @description The URL where the customer is redirected after exiting the hosted page.<BR> Relevant when one or both of the following fields is unset:<BR>* **cancel_url**<BR>* **complete_url**<BR> To configure this field, use the Client Portal. See Customizing Your Hosted Page.URL for the client's terms and conditions. To configure this field, use the Client Portal. */
            merchant_website?: string;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /** @description End of the time when the customer can use the hosted page, in Unix time. If page_expiration is not set, the hosted page expires 14 days after creation.<BR> * **Range**: 1 minute to 30 days. */
            page_expiration?: number;
            /** @description Describes the payment that will result from the hosted page. The id and status values are **null** until the customer successfully submits the information on the hosted page. For more information about the fields in the 'payment' object, see Create Payment. */
            payment?: Record<string, never>;
            /** @description Additional `payment_options` fields. */
            payment_fields?: Record<string, never> | null;
            /**
             * @description Payment method used for paying invoices generated by this subscription. The ID is a string starting with **card_** or **other_**.
             * @example card_320dcb1879fbc41f13a81e690636f3c2
             */
            payment_method?: string;
            /** @description URL of the hosted page that is shown to the customer. */
            redirect_url?: string;
            /**
             * @description Status of the subscription. One of the following:
             *     * active - The customer is currently paying for this subscription.
             *     * canceled - The customer has canceled this subscription, but it remains in the Rapyd database.
             *     * past_due - Payment for this subscription was not received by the end of the billing period.
             *     * trialing - The subscription is in its free trial period. * unpaid - An error occurred in the payment for this subscription. Response only.
             *
             * @example active
             * @enum {string}
             */
            status?: "active" | "canceled" | "past_due" | "trialing" | "unpaid";
            subscription_items?: components["schemas"]["SubscriptionItems"];
            /**
             * @description The percentage tax rate that is applied to the subtotal of the invoice, after subtracting all discounts. Decimal. Range: 0-100, with up to four decimal places.
             * @example 10.5
             */
            tax_percent?: number;
            /** @description Total number of subscription items. */
            total_count?: number;
            /** @description The date and time of the end of the customer's free trial period, in Unix time, or the string **now**. Takes precedence over `trial_period_days`. If `trial_end` is not set by the client, Rapyd calculates this date by adding `trial_period_days` to the date in `created_at`. Relevant when `trial_period_days` is not defined. */
            trial_end?: number | null;
            /** @description Determines whether a free trial period can be defined in a plan attached to the subscription. */
            trial_from_plan?: boolean;
            /** @description The number of days in the customer's free trial period. Integer. Range: 0-730. This value takes precedence over trial periods that are defined in a plan. Relevant when `trial_end` is not defined. */
            trial_period_days?: number;
            /** @description Date and time of the start of the customer's free trial period, in Unix time. */
            trial_start?: number | null;
        };
        SubscriptionItems: {
            /** @description A list of up to three subscription items. */
            data?: components["schemas"]["SubscriptionItem"][];
            /**
             * @description Indicates whether there are more than three items in this subscription.
             * @example false
             */
            has_more?: boolean;
            /**
             * @description Total number of items in this subscription.
             * @example 1
             */
            total_count?: number;
            /**
             * @description URL for requesting all of the items in this subscription.
             * @example /v1/subscription_items?subscription=sub_324ee75f8c26f1df94bc8cc693f3c729
             */
            url?: string;
        };
        SubscriptionItem: {
            /** @description The time the subscription item was created, in Unix time. Response only. */
            created?: number;
            /**
             * @description ID of the Subscription Item object. String starting with subi_.
             * @example subi_e5dbbf84c68e5bb7db761625158d4262
             */
            id?: string;
            /**
             * @description A JSON object defined by the client.
             * @example {"merchant_defined": true }
             */
            metadata?: Record<string, never>;
            plan?: components["schemas"]["Plan"];
            /** @description The number of units of the service defined in the plan. Integer. This number can be updated during the billing cycle using Update Subscription or Update Subscription Item. */
            quantity?: number;
            /**
             * @description ID of the subscription that this item belongs to. String starting with sub_.
             * @example sub_0de9c79c1e2beee09499dc8220493d5
             */
            subscription_id?: string | null;
        };
        /** @example GB */
        Country_1: string;
        /**
         * @description In transactions without FX, defines the currency of the transaction. Three-letter ISO 4217 code.<BR> In FX transactions:<BR> * When `fixed_side` is **buy**, it is the currency received in the Rapyd wallet.<BR> * When `fixed_side` is **sell**, it is the currency charged to the buyer.
         * @example GBP
         */
        Currency_1: string;
        Status_1: {
            /**
             * @description Error code of the API request. Empty when the response is successful.
             * @example
             */
            error_code?: string;
            /**
             * @description Description about the API error. Empty when the response is successful.
             * @example
             */
            message?: string;
            /**
             * @description Unique identifier (UUID) of the response.
             * @example 0fd8809c-ed02-4862-9a79-507b9528ac23
             */
            operation_id?: string;
            /**
             * @description Response code of the API error. Empty when the response is successful.
             * @example
             */
            response_code?: string;
            /**
             * @description Status of the API response indicating success or failure.
             * @example SUCCESS
             */
            status?: string;
        };
        /** @description address associated with this specific Rapyd entity Payment/Customer etc. */
        Address_1: {
            /** @description Name of the canton administrative subdivision, as used in banking */
            canton?: string;
            /** @description City name portion of the address. Required for issuance of a card to an eWallet contact */
            city?: string;
            country?: components["schemas"]["Country_1"];
            /** @description Time of creation of the payment, in Unix time. Response only. */
            created_at?: number;
            /** @description Name of the district administrative subdivision, as used in banking */
            district?: string;
            /** @description ID of the Address object. String starting with address_ */
            id?: string;
            /** @description Line 1 of the address, such as a building number and street name */
            line_1?: string;
            /** @description Line 2 of the address, such as a suite or apartment number, or the name of a named building */
            line_2?: string;
            /** @description Line 3 of the address */
            line_3?: string;
            /** @description A JSON object defined by the client */
            metadata?: Record<string, never>;
            /** @description The name of a contact person or an `in care of` person at this address */
            name?: string;
            /** @description Phone number associated with this specific address in E.164 format. Must be unique */
            phone_number?: string;
            state?: string;
            /** @description Postal code portion of the address */
            zip?: string;
        };
        Fee: {
            fx_fee?: components["schemas"]["FxFee"];
            /**
             * @description The total gross fees for the transaction, in units defined by currency_code. Relevant to responses.
             * @example 4.23
             */
            gross_fees?: number;
            /**
             * @description The total net fees for the transaction, in units defined by `merchant_requested_currency`. Relevant to responses.
             * @example 0
             */
            net_fees?: number;
            transaction_fee?: components["schemas"]["TransactionFee"];
            total_merchant_fees?: number;
        } | null;
        /** @description Field Object */
        Field_1: {
            /** @description Three-letter alphabetic ISO 4217 code for the official currency used in the country. */
            code?: string;
            /** @description Whether the field is always required for using the payment method */
            is_required?: boolean;
            /** @description Indicates whether the field can be updated with Update Payment Method */
            is_updatable?: boolean;
            instructions?: string;
            /** @description Name of the currency in English. */
            name?: string;
            /** @description Three-letter ISO numeric 4217 code for the currency. */
            numeric_code?: string;
            required_fields?: components["schemas"]["Field_1"][];
            /** @enum {string} */
            type?: "boolean" | "number" | "string";
            /** @description A regular expression that defines the format when type is string. */
            regex?: string;
            /** @description Defines specific conditions when a field is required for a payment method. When the conditions defined by conditions are met, the field is required even though the value of is_required is false. */
            conditions?: components["schemas"]["Field_1_conditions"][];
            /** @description Description of the field. */
            description?: string;
        };
        inline_response_200: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["PaymentMethodType"][];
        };
        inline_response_200_1: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["PaymentMethodTypeRequiredFields"];
        };
        inline_response_200_2: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["Payment"][];
        };
        v1_payments_body: {
            address?: components["schemas"]["Address_1"];
            /**
             * @description The amount received by the recipient, in units of the currency defined in currency. Decimal, including the correct number of decimal places for the currency exponent, as defined in ISO 2417:2015. To verify a card, set to 0.
             * @default 0
             */
            amount: number;
            /**
             * @description Determines when the payment is processed for capture. When true, the payment is captured immediately. When false, the payment is captured at a later time. Relevant to cards. Default is true.
             * @default true
             */
            capture: boolean;
            client_details?: components["schemas"]["ClientDetailsObject"];
            /** @description URL where the customer is redirected after successfully completing an operation on an external page. */
            complete_payment_url?: string;
            currency: components["schemas"]["Currency_1"];
            /** @description string - ID of the customer who is making the payment. String starting with cus_. Required if payment_method is blank. object - Contains all required fields */
            customer?: string;
            /** @description Description of the payment */
            description?: string;
            /** @description URL where the customer is redirected in case of an error in the operation. Provided by the client.Relevant to bank redirect payment methods */
            error_payment_url?: string;
            /** @description Determines whether the payment is held in escrow for later release. */
            escrow?: boolean;
            /** @description Determines the number of days after creation of the payment that funds are released from escrow. Funds are released at 5:00 pm GMT on the day indicated. Integer, range between 1-90. Default is 90. */
            escrow_release_days?: number;
            /** @description ID of the wallet that the money is paid into. String starting with **ewallet_**. Relevant when the request includes a single wallet. */
            ewallet?: string;
            /** @description Represents the wallets that the money is paid into. Array of objects. */
            ewallets?: unknown;
            /**
             * @description End of the time allowed for customer to make this payment, in Unix time. Must be after the current time
             * @default 0
             */
            expiration: number;
            /** @description Indicates whether the FX rate is fixed for the buy side (seller's Rapyd Wallet) or for the sell side (buyer). */
            fixed_side?: string;
            /** @description ID of the group payment, a string starting with 'gp_'. Relevant to replacing a payment that failed. */
            group_payment?: string;
            /**
             * @description Describes how the transaction was initiated.
             * @enum {string}
             */
            initiation_type?: "customer_present" | "installment" | "moto" | "recurring" | "unscheduled";
            /** @description ID defined by the client. Limited to 255 characters. */
            merchant_reference_id?: string;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            payment_fees?: components["schemas"]["Fee"];
            /** @description Payment Method object or ID. */
            payment_method?: string | components["schemas"]["PaymentMethodType"];
            /** @description Object describing additional information required for the payment. The object is returned by Get Payment Method Required Fields. Note that Transactions with 3DS authentication must be authenticated within 15 minutes, after which the possibility to authenticate expires. */
            payment_method_options?: Record<string, never>;
            /** @description Email address that the receipt for this transaction is sent to. */
            receipt_email?: string;
            /** @description When fixed_side is sell, it is the currency received in the Rapyd Wallet. . When fixed_side is buy, it is the currency charged to the buyer (customer). Three-letter ISO 4217 code. */
            requested_currency?: string;
            /** @description A text description that appears in the customer's bank statement. */
            statement_descriptor?: string;
        };
        inline_response_200_3: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["Payment"];
        };
        /** @example {
         *       "status": {
         *         "error_code": "ERROR_GET_PAYMENT",
         *         "message": "The request tried to retrieve a payment, but the payment was not found. The request was rejected. Corrective action: Use a valid payment ID.",
         *         "operation_id": "889e9472-922c-40a2-861d-19977c396db5",
         *         "response_code": "ERROR_GET_PAYMENT",
         *         "status": "ERROR"
         *       }
         *     } */
        inline_response_400: {
            status?: components["schemas"]["Status_1"];
        };
        payments_paymentId_body: {
            address?: components["schemas"]["Address_1"];
            /** @description Description of the payment. */
            description?: string;
            /** @description To release escrow funds immediately, set to false. If there are multiple sellers, the funds are released to all of them. Relevant to payments with escrow. */
            escrow?: boolean;
            /** @description Defines the number of days after the creation of the payment that the funds are automatically released. Relevant when escrow is true. */
            escrow_release_days?: number;
            /** @description Category of transaction initiation type. */
            initiation_type?: string;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /** @description Email address that the receipt for this transaction is sent to. */
            receipt_email?: string;
        };
        paymentId_capture_body: {
            /**
             * @description The amount to capture, in units of the currency defined in currency. Decimal, including the correct number of decimal places for the currency exponent, as defined in ISO 2417:2015.
             * @default 0
             */
            amount: number;
            /** @description Email address that the receipt for this transaction is sent to. */
            receipt_email?: string;
            /** @description A text description suitable for a customer's payment statement. Some payment methods truncate this string to a limited number of characters. */
            statement_descriptor?: string;
        };
        payments_completePayment_body: {
            /** @description ID of the payment to complete. String starting with **payment_**. */
            token?: string;
            /** @description Depends on the type of payment method. <BR> * bank_redirect - **rapyd** <BR>* bank_transfer - The value returned in the code field of the `textual_codes` object. You can find this field in the response to the 'Create Payment' request. If the `code` field is empty, `param1` is not required.<BR>* cash - Not required.<BR>* ewallet - Not required. */
            param1?: string;
            /** @description Depends on the type of payment method. <BR> * bank_redirect - **success** <BR>* bank_transfer -  Original payment amount. Decimal, including the correct number of decimal places for the currency exponent, as defined in ISO 2417:2015.<BR>* cash - Not required.<BR>* ewallet - Not required. */
            param2?: string;
        };
        inline_response_200_4: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["CheckoutPageResponse"];
        };
        v1_checkout_body: components["schemas"]["HostedPageAdditionalResponse"] & unknown;
        inline_response_200_5: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["Subscription"][];
        };
        v1paymentssubscriptions_subscription_items: {
            /** @description ID of the plan assigned to this subscription item. */
            plan?: string;
            quantity?: number;
        };
        payments_subscriptions_body: {
            /** @description Determines the method of billing. Set to **pay_automatically**. */
            billing?: string;
            /** @description Determines the start of the next billing cycle, as defined in the plan described in the 'items'. Value must be timestamp in Unix time. */
            billing_cycle_anchor?: number;
            /** @description Terminates the subscription at the end of the current billing period. */
            cancel_at_period_end?: boolean;
            /** @description The ID of a discount coupon that applies to all subscription items associated with this subscription. If the coupon defines a fixed monetary discount, it must use the same currency as the subscription's plan. */
            coupon?: string;
            /** @description ID of the customer who pays for this subscription. String starting with cus_. */
            customer: string;
            /** @description Number of days from the invoice date for customer to complete the payment. */
            days_until_due?: number;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            payment_fields?: components["schemas"]["Payment"];
            /** @description Payment Method object or ID. */
            payment_method?: string | components["schemas"]["PaymentMethodType"];
            /** @description Determines whether each upcoming subscription invoice is issued immediately. When true, the invoice is issued when the subscription is created. When false (the default), the invoice is issued an hour after the subscription is created. */
            simultaneous_invoice?: boolean;
            /** @description Array of subscription items. Each item contains a plan (required) and a quantity */
            subscription_items: components["schemas"]["v1paymentssubscriptions_subscription_items"][];
            /** @description The percentage of tax that is applied to the entire amount of the invoice. */
            tax_percent?: number;
            /** @description The time of the end of the customer's free trial period. If trial_from_plan is set, leave this parameter unset. */
            trial_end?: number;
            /** @description Determines whether a free trial period can be defined in a 'plan' object attached to the subscription. If trial_end is set, leave this parameter unset. */
            trial_from_plan?: boolean;
            /** @description The number of days in the customer's free trial period. */
            trial_period_days?: number;
        };
        inline_response_200_6: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["Subscription"];
        };
        subscriptions_subscriptionId_body: {
            /** @description Determines the method of billing. Set to pay_automatically. */
            billing?: string;
            /** @description Determines the start of the next billing cycle, as defined in the plan described in the 'items'. Value must be timestamp in Unix time. */
            billing_cycle_anchor?: string;
            /** @description Terminates the subscription at the end of the current billing period. */
            cancel_at_period_end?: boolean;
            /** @description The ID of a discount coupon that applies to all subscription items associated with this subscription. If the coupon defines a fixed monetary discount, it must use the same currency as the subscription's plan. */
            coupon?: string;
            /** @description Number of days from the invoice date for customer to complete the payment. */
            days_until_due?: number;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            payment_fields?: components["schemas"]["PaymentOptions"];
            /** @description Payment Method object or ID. */
            payment_method?: string | components["schemas"]["PaymentMethodType"];
            /** @description Determines whether each upcoming subscription invoice is issued immediately. When true, the invoice is issued when the subscription is created. When false (the default), the invoice is issued an hour after the subscription is created. */
            simultaneous_invoice?: boolean;
            /** @description Array of subscription items. Each item contains a plan (required) and a quantity */
            subscription_items?: string[];
            /** @description The percentage of tax that is applied to the entire amount of the invoice. */
            tax_percent?: number;
            /** @description The time of the end of the customer's free trial period. If trial_from_plan is set, leave this parameter unset. */
            trial_end?: number;
            /** @description Determines whether a free trial period can be defined in a 'plan' object attached to the subscription. If trial_end is set, leave this parameter unset. */
            trial_from_plan?: boolean;
            /** @description The number of days in the customer's free trial period. */
            trial_period_days?: number;
        };
        inline_response_200_7: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["inline_response_200_7_data"];
        };
        checkout_subscriptions_body: {
            /** @description Determines the method of billing. Set to **pay_automatically**. */
            billing: string;
            /**
             * @description Determines the last date that charges accrue.<BR>* **true** - Charges accrue until the end of the current billing period, then the subscription is canceled. When no trial period is set, after this parameter is set to **true** the subscription will not be renewed at the next interval. When a trial period is set after this parameter is set to true, the subscription will not begin.<BR>* **false** - When the subscription is created, no end is defined. When Cancel Subscription is run, charges stop immediately and the subscription is canceled.
             * @default false
             */
            cancel_at_period_end: boolean;
            /** @description URL where the customer is redirected when payment is successful, after returning from an external page such as a 3DS page. Does not support localhost URLs. */
            complete_payment_url?: string;
            /** @description The two-letter ISO 3166-1 ALPHA-2 code for the country. */
            country?: string;
            /** @description The ID of a coupon to apply a discount to the subscription. If the coupon defines a fixed monetary discount, it must use the same currency as the subscription. String starting with **coupon_**. */
            coupon?: string;
            /** @description ID of the customer who pays for this subscription. String starting with **cus_**. */
            customer: string;
            /** @description Number of days from the invoice date for customer to complete the payment. */
            days_until_due?: number;
            /** @description URL where the customer is redirected when payment is not successful, after returning from an external page, such as a 3DS page. Does not support localhost URLs. */
            error_payment_url?: string;
            /** @description Determines the default language of the hosted page. For a list of values, see 'List Supported Languages'. <BR> * When this parameter is null, the language of the user's browser is used. <BR> * If the language of the user's browser cannot be determined, the default language is English. */
            language?: string;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /** @description Defines the text for the call-to-action button on the subscription checkout page.<BR> * When there is no trial period, the values are: **subscribe** (default), **purchase**, **pay** <BR> When there is a trial period, the value is **start_trial** (default). */
            merchant_main_button?: string;
            /** @description Identifier defined by the client for reference purposes. Limit: 45 characters. */
            merchant_reference_id?: string;
            /** @description End of the time when the customer can use the hosted page, in Unix time. If page_expiration is not set, the hosted page expires 14 days after creation.<BR> Range: 1 minute to 30 days. */
            page_expiration?: number;
            payment_fees?: components["schemas"]["Fee"];
            payment_fields?: components["schemas"]["Payment"];
            /** @description Payment Method object or ID. */
            payment_method?: boolean & (string | components["schemas"]["PaymentMethodType"]);
            /** @description Array of subscription items. Each item contains a plan (required) and a quantity */
            subscription_items: components["schemas"]["v1paymentssubscriptions_subscription_items"][];
            /** @description The percentage of tax that is applied to the entire amount of the invoice. */
            tax_percent?: number;
            /** @description The date and time of the end of the customer's free trial period, in Unix time, or the string **now**. Takes precedence over `trial_period_days`. If `trial_end` is not set by the client, Rapyd calculates this date by adding `trial_period_days` to the date in `created_at`. <BR> Relevant when `trial_period_days` is not defined. */
            trial_end?: number;
            /**
             * @description Determines whether a free trial period can be defined in a 'plan' object attached to the subscription.<BR> * **true** - Free trials can be defined in plans that are attached to the subscription. <BR> * **false** - Definitions of free trial in plans are ignored.
             * @default false
             */
            trial_from_plan: boolean;
            /** @description The number of days in the customer's free trial period. Integer. Range: 0-730. This value takes precedence over trial periods that are defined in a plan. Relevant when `trial_end` is not defined.The number of days in the customer's free trial period. */
            trial_period_days?: number;
        };
        inline_response_200_8: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["SubscriptionHostedPageReponse"];
        };
        inline_response_200_9: {
            data?: components["schemas"]["Subscription"];
            status?: components["schemas"]["Status_1"];
        };
        inline_response_200_10: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["Plan"][];
        };
        v1_plans_body: {
            /** @description Determines which quantity is used to calculate the pricing. Relevant when usage_type is metered. Default is sum. */
            aggregate_usage?: string;
            /** @description The amount to charge in the billing cycle. For a free service, use 0. Relevant when billing_scheme is set to per_unit. When the billing_scheme is set to tiered, set the amount in the tiers array. */
            amount?: number;
            /** @description Describes how to compute the price per billing period. One of the following values - per_unit, tiered */
            billing_scheme?: string;
            /** @description Three-letter ISO 4217 code for the currency used in fields that represent monetary amounts. Uppercase. */
            currency: string;
            /** @description Unique ID for this payment plan. English alphanumeric characters and underscore. Limited to 44 characters. If the merchant does not define an ID, Rapyd generates a string starting with plan_. */
            id?: string;
            /** @description Specifies the units used in defining the billing cycle. */
            interval: string;
            /** @description Number of intervals in the billing cycle. Default is 1. */
            interval_count?: number;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /** @description Brief description of the pricing plan. */
            nickname?: string;
            /** @description ID of the 'product' object that this plan is for. The product must have type set to service. */
            product: string;
            /** @description Defines a tiered pricing structure. Array of objects. Must be null when billing_scheme is set to per_unit. */
            tiers?: string;
            /** @description Determines the mode for calculating the total tiered charge. */
            tiers_mode?: string;
            /** @description Defines the transformation that is applied to the reported usage before the billed price is computed. */
            transform_usage?: Record<string, never>;
            /** @description Specifies the number of days before charges begin to accrue. Use this parameter to define a free trial period for a service. */
            trial_period_days?: number;
            /** @description Determines whether the customer is billed when the service is not actually used. One of the following values - metered, licensed */
            usage_type?: string;
        };
        inline_response_200_11: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["Plan"];
        };
        plans_planId_body: {
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /** @description Brief description of the pricing plan. */
            nickname?: string;
        };
        inline_response_200_12: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["inline_response_200_12_data"];
        };
        inline_response_200_13: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["Product"][];
        };
        /** @description Describes the physical size and weight of the product. Relevant when type is goods. */
        v1products_package_dimensions: {
            height?: number;
            length?: number;
            weight?: number;
            width?: number;
        };
        v1_products_body: {
            /** @description Indicates whether the product is currently available for purchase. Default is true. */
            active?: boolean;
            /** @description Array of up to 5 alphanumeric strings defined by the merchant. Each string defines the key in a key-value pair in the 'attributes' object in the corresponding 'sku' objects. */
            attributes?: string[];
            /** @description Full text description of the product. */
            description?: string;
            /** @description Unique string for identification of the product. Legal input includes all the English alphanumeric characters and the underscore (_) character. If the merchant does not define an ID, Rapyd generates it with a string that starts with product_ */
            id?: string;
            /** @description An array of images. Each image is a string in Base64 encoding. */
            images?: string[];
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /** @description The name of the product or service that is displayed to the customer. */
            name: string;
            package_dimensions?: components["schemas"]["v1products_package_dimensions"];
            /**
             * @description Indicates whether the product is physically shipped to the customer. Relevant when type is goods. Default is false.
             * @example false
             */
            shippable?: boolean;
            /** @description A text description that appears in the customer's invoice. Limited to 22 characters. Relevant when type is service. */
            statement_descriptor?: string;
            /**
             * @description One of the following - services, goods
             * @enum {string}
             */
            type: "services" | "goods";
            /** @description A label that represents units of this product, such as seats, on customers’ invoices. Relevant when type is service. */
            unit_label?: string;
        };
        inline_response_200_14: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["Product"];
        };
        /** @example {
         *       "status": {
         *         "error_code": "INVALID_PRODUCT",
         *         "message": "The request tried to perform an operation that requires a product, but the product was not found. The request was rejected. Corrective action: Use a valid product ID.",
         *         "operation_id": "fbc7054e-4493-4f01-b62e-788f189f9c0f",
         *         "response_code": "INVALID_PRODUCT",
         *         "status": "ERROR"
         *       }
         *     } */
        inline_response_400_1: {
            status?: components["schemas"]["Status_1"];
        };
        products_productsId_body: {
            /** @description Indicates whether the product is currently available for purchase. Default is true. */
            active?: boolean;
            /** @description Array of up to 5 alphanumeric strings defined by the merchant. Each string defines the key in a key-value pair in the 'attributes' object in the corresponding 'sku' objects. */
            attributes?: string[];
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /** @description The name of the product or service that is displayed to the customer. */
            name: string;
            package_dimensions?: components["schemas"]["v1products_package_dimensions"];
            /** @description A text description that appears in the customer's invoice. Limited to 22 characters. Relevant when type is service. */
            statement_descriptor?: string;
            /** @description A label that represents units of this product, such as seats, on customersâ€™ */
            unit_label?: string;
        };
        inline_response_200_15: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["SubscriptionItem"][];
        };
        v1_subscription_items_body: {
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /** @description ID of the plan assigned to this subscription item. Cannot be a plan that is already part of the subscription. */
            plan: string;
            /** @description Determines whether the charge is prorated when a subscription item is switched from one subscription to another in a billing cycle. */
            prorate?: boolean;
            /** @description Indicates the date in the middle of the billing period that is the start of the prorated charges. */
            proration_date?: number;
            /** @description The number of units of the service defined in the plan. */
            quantity?: number;
            /** @description ID of the subscription that this item belongs to. String starting with **sub_**. */
            subscription: string;
        };
        inline_response_200_16: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["SubscriptionItem"];
        };
        subscription_items_subscriptionItemId_body: {
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /** @description Determines whether the charge is prorated when a subscription item is switched from one subscription to another in a billing cycle. */
            prorate?: boolean;
            /** @description Indicates the date in the middle of the billing period that is the start of the prorated charges. */
            proration_date?: number;
            /** @description The number of units of the service defined in the plan. */
            quantity?: number;
        };
        inline_response_200_17: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["inline_response_200_17_data"];
        };
        inline_response_200_18: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["inline_response_200_18_data"][];
        };
        subscriptionItemId_usage_records_body: {
            /** @description Determines how the quantity is defined in the usage record. */
            action?: string;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /** @description The usage quantity for the specified date and time (timestamp). */
            quantity: number;
            /** @description Timestamp for the usage record in Unix time. */
            timestamp: number;
        };
        inline_response_200_19: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["inline_response_200_18_data"];
        };
        inline_response_200_20: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["Discount"];
        };
        inline_response_200_21: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["InvoiceResponse"][];
        };
        inline_response_400_2: {
            status?: components["schemas"]["Status_1"];
        };
        v1_invoices_body: {
            /** @description Determines the method of billing at the end of the billing cycle. Set to **pay_automatically** - Rapyd generates a `payment` object, then attempts to pay it using the designated payment method.The number of days until the due date. */
            billing: number;
            /** @description Three-letter ISO 4217 currency code for the currency used in all fields that refer to a monetary amount. Required when the subscription field is not provided. If subscription field is provided, then the currency defined in the subscription's plan is used. */
            currency?: string;
            /** @description ID of the customer that pays this invoice. String starting with **cus_**. */
            customer: string;
            /**
             * @description The number of days until the due date.
             * @default 30
             */
            days_until_due: number;
            /** @description Description of the invoice. */
            description?: string;
            /** @description The date payment is due on this invoice. This value is calculated from the date the invoice is created, plus the number of days specified in the `days_until_due` field. Relevant when `billing` is **send_invoice**.  Format is in Unix time. */
            due_date?: string;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /** @description Object containing additional payment_options fields. */
            payment_fields?: Record<string, never>;
            /** @description ID of the payment method for paying the invoice. If not provided, then the payment method is taken from the subscription. If the payment method is not provided in the subscription, the payment method is the customer's default payment method. */
            payment_method?: string;
            /** @description Description of the invoice for the customer's credit card statement. Limited to 22 characters. */
            statement_descriptor?: string;
            /** @description ID of the subscription that generates charges to this customer. String starting with **sub_**. */
            subscription?: string;
            /** @description The tax rate, defined as a percentage. */
            tax_percent?: number;
        };
        /** @example {
         *       "status": {
         *         "error_code": "INVALID_SUBSCRIPTION_TRIAL_END",
         *         "message": "The request tried to retrieve the upcoming invoice for a customer, but the 'trial_end' body parameter was set in the subscription and there were no invoice items in the 'lines' array. The request was rejected. Corrective action: Add valid items to the 'lines' array in the subscription or the invoice.",
         *         "response_code": "INVALID_SUBSCRIPTION_TRIAL_END",
         *         "status": "ERROR"
         *       }
         *     } */
        inline_response_400_3: {
            status?: components["schemas"]["Status_1"];
        };
        inline_response_200_22: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["InvoiceResponse"];
        };
        invoices_invoiceId_body: {
            /** @description The number of days until the due date. */
            days_until_due?: number;
            /** @description Description of the invoice. */
            description?: string;
            /** @description The date payment is due on this invoice. This value is calculated from the date the invoice is created, plus the number of days specified in the days_until_due field. Format is in Unix time. */
            due_date?: string;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /** @description Object containing additional payment_options fields. */
            payment_fields?: Record<string, never>;
            /** @description Description of the invoice for the customer's credit card statement. Limited to 22 characters. */
            statement_descriptor?: string;
            /** @description The tax rate, defined as a percentage. */
            tax_percent?: number;
        };
        inline_response_200_23: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["inline_response_200_23_data"];
        };
        /** @example {
         *       "status": {
         *         "error_code": "INVALID_INVOICE_ID",
         *         "message": "The request attempted an operation that requires an invoice, but the invoice was not found. The request was rejected. Corrective action: Use the ID of a valid invoice.",
         *         "response_code": "INVALID_INVOICE_ID",
         *         "status": "ERROR"
         *       }
         *     } */
        inline_response_400_4: {
            status?: components["schemas"]["Status_1"];
        };
        invoiceId_pay_body: {
            /** @description ID of the payment method for paying the invoice. If not included in the body, then the customer's default_payment_method is used. */
            payment_method?: string;
        };
        /** @example {
         *       "status": {
         *         "error_code": "ERROR_MARK_UNCOLLECTIBLE_NOT_OPEN_INVOICE",
         *         "message": "The request tried to mark an invoice as uncollectible, but the invoice status was not 'open'. The request was rejected. Corrective action: None. Determine why the invoice was not in 'open' status.",
         *         "response_code": "ERROR_MARK_UNCOLLECTIBLE_NOT_OPEN_INVOICE",
         *         "status": "ERROR"
         *       }
         *     } */
        inline_response_400_5: {
            status?: components["schemas"]["Status_1"];
        };
        /** @example {
         *       "status": {
         *         "error_code": "INVALID_INVOICE_CUSTOMER",
         *         "message": "The request attempted an operation that requires a customer, but the customer specified in the request was not the same as the customer defined for the subscription. The request was rejected. Corrective action: For the invoice and all of its invoice items, use the customer identified in the subscription.",
         *         "response_code": "INVALID_INVOICE_CUSTOMER",
         *         "status": "ERROR"
         *       }
         *     } */
        inline_response_400_6: {
            status?: components["schemas"]["Status_1"];
        };
        inline_response_200_24: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["InvoiceItemResponse"][];
        };
        /** @example {
         *       "status": {
         *         "error_code": "ERROR_GET_INVOICE_ITEMS",
         *         "message": "The request tried to retrieve an invoice item, but the invoice item was not found. The request was rejected. Corrective action: Use a valid invoice item ID.",
         *         "response_code": "ERROR_GET_INVOICE_ITEMS",
         *         "status": "ERROR"
         *       }
         *     } */
        inline_response_400_7: {
            status?: components["schemas"]["Status_1"];
        };
        v1_invoice_items_body: {
            /** @description The amount of the total charge or credit for this item. Decimal, including the correct number of decimal places for the currency exponent, as defined in ISO 2417:2015.<BR> This is `quantity` times `unit_amount`. A credit is indicated by a negative number. */
            amount?: number;
            /** @description Three-letter ISO 4217 code for the currency used in the `amount` field. */
            currency: string;
            /** @description ID of the customer. String starting with **cus_**. */
            customer: string;
            /** @description Description of the invoice item. */
            description?: string;
            /** @description Determines whether this invoice item is subject to the discount defined in the coupon that is assigned to the customer or subscription.<BR> For negative amounts and prorations, the default is **false**, and for all other invoice items, the default is **true**. */
            discountable?: boolean;
            /** @description ID of the invoice that this invoice item is assigned to. Relevant when `subscription` is not set. */
            invoice?: string;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /** @description Indicates the number of units charged as a single invoice item. Integer. */
            quantity?: number;
            /** @description ID of the subscription to assign this invoice item to. By default, the invoice item is assigned to the customer's subscription whose current billing cycle ends first. Relevant when `invoice` is not set. */
            subscription?: string;
            /** @description Per-unit price of the product or service, adjusted as defined in the plan. Decimal. */
            unit_amount?: number;
        };
        /** @example {
         *       "status": {
         *         "error_code": "ERROR_INVOICE_ITEM_AMOUNT_PARAM",
         *         "message": "The request tried to create an invoice item, but the amount was not was not clear. The request was rejected. Corrective action: Specify the 'amount' field, or specify both 'unit_amount' and 'quantity'.",
         *         "response_code": "ERROR_INVOICE_ITEM_AMOUNT_PARAM",
         *         "status": "ERROR"
         *       }
         *     } */
        inline_response_400_8: {
            status?: components["schemas"]["Status_1"];
        };
        invoice_items_invoiceItem_body: {
            /**
             * @description Number of days the customer has for paying this invoice. Integer.
             * @default 30
             */
            days_until_due: number;
            /** @description Description of the invoice. */
            description?: string;
            /** @description The date payment is due on this invoice. This value is calculated from the date the invoice is created, plus the number of days specified in the `days_until_due` field. Relevant when `billing` is **send_invoice**. Format is in Unix time. */
            due_date?: number;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /** @description Additional `payment_options`. */
            payment_fields?: Record<string, never>;
            /** @description Description of the invoice for the customer's credit card statement. Limited to 22 characters. */
            statement_descriptor?: string;
            /** @description The percentage tax rate that is applied to the subtotal of the invoice, after subtracting all discounts. Decimal, up to four decimal places. Range: 0-100 */
            tax_percent?: number;
        };
        /** @example {
         *       "status": {
         *         "error_code": "INVALID_INVOICE_ITEM_ID",
         *         "message": "The request tried to update or delete an invoice item, but the invoice item could not be found. The request was rejected. Corrective action: Use the correct ID for a valid invoice item.",
         *         "response_code": "INVALID_INVOICE_ITEM_ID",
         *         "status": "ERROR"
         *       }
         *     } */
        inline_response_400_9: {
            status?: components["schemas"]["Status_1"];
        };
        inline_response_200_25: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["inline_response_200_25_data"];
        };
        /** @example {
         *       "status": {
         *         "error_code": "ERROR_DELETE_INVOICE_ITEMS",
         *         "message": "The request tried to delete an invoice item, but the invoice item was not found. The request was rejected. Corrective action: Determine whether the invoice item was already deleted, and why there were multiple requests to delete it.",
         *         "response_code": "ERROR_DELETE_INVOICE_ITEMS",
         *         "status": "ERROR"
         *       }
         *     } */
        inline_response_400_10: {
            status?: components["schemas"]["Status_1"];
        };
        inline_response_200_26: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["PaymentLink"][];
        };
        payments_group_payments_body: {
            /** @description Description of the group payment */
            description?: string;
            /** @description ID defined by the client. Limited to 255 characters. */
            merchant_reference_id?: string;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /** @description Array of 'payment' objects. For details about the fields in the 'payment' object, see [Create Payment](https://docs.rapyd.net/en/create-payment.html). */
            payments: Record<string, never>;
        };
        inline_response_200_27: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["GroupPayment"];
        };
        /** @example {
         *       "status": {
         *         "error_code": "ERROR_CREATE_GROUP_PAYMENT_EXCEEDED_MAX_PARTICIPANTS",
         *         "message": "The request tried to create a group payment, but there were too many individual payments. The request was rejected. Corrective action: Use 2 to 10 payments.",
         *         "response_code": "ERROR_CREATE_GROUP_PAYMENT_EXCEEDED_MAX_PARTICIPANTS",
         *         "status": "ERROR"
         *       }
         *     } */
        inline_response_400_11: {
            status?: components["schemas"]["Status_1"];
        };
        /** @example {
         *       "status": {
         *         "error_code": "ERROR_GET_GROUP_PAYMENT",
         *         "message": "The request attempted an operation that requires a group payment, but the group payment was not found. The request was rejected. Corrective action: Use the ID of a valid group payment, a string starting with 'gp_'.",
         *         "response_code": "ERROR_GET_GROUP_PAYMENT",
         *         "status": "ERROR"
         *       }
         *     } */
        inline_response_400_12: {
            status?: components["schemas"]["Status_1"];
        };
        /** @example {
         *       "status": {
         *         "error_code": "ERROR_MISSING_GROUP_PAYMENT",
         *         "message": "The request attempted an operation that requires a group payment, but the group payment was not found. The request was rejected. Corrective action: Use the ID of a valid group payment, a string starting with 'gp_'.",
         *         "response_code": "ERROR_MISSING_GROUP_PAYMENT",
         *         "status": "ERROR"
         *       }
         *     } */
        inline_response_400_13: {
            status?: components["schemas"]["Status_1"];
        };
        inline_response_200_28: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["EscrowResponse"];
        };
        /** @example {
         *       "status": {
         *         "error_code": "ERROR_GET_ESCROW",
         *         "message": "The request attempted an operation that requires a payment and its escrow, but the payment or the escrow was not found. The request was rejected. Corrective action: Use a valid ID for the payment and for the escrow.",
         *         "response_code": "ERROR_GET_ESCROW",
         *         "status": "ERROR"
         *       }
         *     } */
        inline_response_400_14: {
            status?: components["schemas"]["Status_1"];
        };
        escrow_escrow_releases_body: components["schemas"]["Escrow"] & unknown;
        inline_response_200_29: {
            data?: components["schemas"]["EscrowResponse"];
        };
        /** @example {
         *       "status": {
         *         "error_code": "ERROR_CARD_VALIDATION_IN_PAYMENT_WITH_ESCROW",
         *         "message": "The request attempted to validate a card as part of an escrow transaction, but these two operations must be done separately. The request was rejected. Corrective action: Create a payment with a card payment method, set 'capture' to false, set 'amount’ to 0, and set 'escrow' to null. Next, create the payment with the escrow.",
         *         "response_code": "ERROR_CARD_VALIDATION_IN_PAYMENT_WITH_ESCROW",
         *         "status": "ERROR"
         *       }
         *     } */
        inline_response_400_15: {
            status?: components["schemas"]["Status_1"];
        };
        inline_response_200_30: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["Refund"][];
        };
        v1_refunds_body: {
            /** @description The amount of the refund. Decimal. */
            amount?: number;
            /** @description The currency of the amount received by the original payment source. Three-letter ISO 4217 code. */
            currency?: string;
            /** @description ID of the wallet contact that the card is assigned to. String starting with **cont_**. */
            ewallets?: string[];
            /** @description ID defined by the client. Limited to 255 characters. */
            merchant_reference_id?: string;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /** @description ID of the Payment object that the refund is charged against. String starting with **payment_**. */
            payment: string;
            /** @description Description of the reason for the refund. */
            reason?: string;
        };
        inline_response_200_31: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["Refund"];
        };
        refunds_complete_body: {
            /** @description ID of the refund. String starting with **refund_**. */
            token: string;
        };
        refunds_group_payments_body: {
            /** @description The amount of the refund, in the currency of the group payment. Decimal. If this parameter is omitted, the entire group payment is refunded. */
            amount?: number;
            /** @description ID of the group payment that the refund is charged against. String starting with **gp_**. */
            group_payment: string;
        };
        inline_response_200_32: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["inline_response_200_32_data"];
        };
        refunds_refundId_body: {
            /** @description A JSON object defined by the client. */
            metadata?: unknown;
        };
        inline_response_200_33: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["ApplePayObjectResponse"][];
        };
        inline_response_200_34: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["Dispute"][];
        };
        inline_response_200_35: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["Dispute"];
        };
        inline_response_200_36: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["Customer"][];
        };
        v1_customers_body: components["schemas"]["CustomerRequest"] & unknown;
        inline_response_200_37: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["Customer"];
        };
        /** @example {
         *       "status": {
         *         "error_code": "ERROR_CREATE_CUSTOMER",
         *         "message": "The request tried to create or update a customer, but the wallet ID provided is already in use by another customer. The request was rejected. Corrective action: Create a new wallet.",
         *         "response_code": "ERROR_CREATE_CUSTOMER",
         *         "status": "ERROR"
         *       }
         *     } */
        inline_response_400_16: {
            status?: components["schemas"]["Status_1"];
        };
        /** @example {
         *       "status": {
         *         "error_code": "ERROR_GET_CUSTOMER",
         *         "message": "The request attempted an operation that requires the ID of a customer, but the customer was not found. The request was rejected. Corrective action: Use the correct ID of the customer, a string starting with \"cus_\"",
         *         "response_code": "ERROR_GET_CUSTOMER",
         *         "status": "ERROR"
         *       }
         *     } */
        inline_response_400_17: {
            status?: components["schemas"]["Status_1"];
        };
        /** @example {
         *       "status": {
         *         "error_code": "INVALID_CUSTOMER_ID",
         *         "message": "The request attempted an operation that requires a valid customer ID, but the customer was not found. The request was rejected. Corrective action: Use the correct customer, or create a new customer.",
         *         "response_code": "INVALID_CUSTOMER_ID",
         *         "status": "ERROR"
         *       }
         *     } */
        inline_response_400_18: {
            status?: components["schemas"]["Status_1"];
        };
        /** @example {
         *       "status": {
         *         "error_code": "ERROR_DELETE_CUSTOMER",
         *         "message": "The request tried to delete a customer, but the operation failed. Corrective action: Determine whether the customer was already deleted, and why there were multiple requests to delete it.",
         *         "response_code": "ERROR_DELETE_CUSTOMER",
         *         "status": "ERROR"
         *       }
         *     } */
        inline_response_400_19: {
            status?: components["schemas"]["Status_1"];
        };
        inline_response_200_38: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["DiscountCustomerResponse"];
        };
        inline_response_200_39: {
            data?: components["schemas"]["inline_response_200_23_data"];
            status?: components["schemas"]["Status_1"];
        };
        v1_addresses_body: components["schemas"]["Address"];
        inline_response_200_40: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["AddressResponse"];
        };
        /** @example {
         *       "status": {
         *         "error_code": "INVALID_ADDRESS_PHONE_NUMBER",
         *         "message": "The request tried to add or update a phone number for an address, but the phone number is not in proper E.164 format or is not valid. The request was rejected. Corrective action: Submit the phone number in proper E.164 format.",
         *         "operation_id": "fbc7054e-4493-4f01-b62e-788f189f9c0f",
         *         "response_code": "INVALID_ADDRESS_PHONE_NUMBER",
         *         "status": "ERROR"
         *       }
         *     } */
        inline_response_400_20: {
            status?: components["schemas"]["Status_1"];
        };
        /** @example {
         *       "status": {
         *         "error_code": "ERROR_ADDRESS_GET",
         *         "message": "The request attempted an operation that requires an address, but the address was not found. The request was rejected. Corrective action: For the 'address' parameter, use a valid address ID.",
         *         "operation_id": "fbc7054e-4493-4f01-b62e-788f189f9c0f",
         *         "response_code": "ERROR_ADDRESS_GET",
         *         "status": "ERROR"
         *       }
         *     } */
        inline_response_400_21: {
            status?: components["schemas"]["Status_1"];
        };
        /** @example {
         *       "status": {
         *         "error_code": "ERROR_DELETE_ADDRESS",
         *         "message": "The request tried to delete the address, but this operation failed. The request was rejected. Corrective action: None. Only an address that is linked to a customer or not linked to any object can be deleted.",
         *         "operation_id": "fbc7054e-4493-4f01-b62e-788f189f9c0f",
         *         "response_code": "ERROR_DELETE_ADDRESS",
         *         "status": "ERROR"
         *       }
         *     } */
        inline_response_400_22: {
            status?: components["schemas"]["Status_1"];
        };
        inline_response_200_41: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["CustomerPaymentMethod"][];
        };
        customerId_payment_methods_body: {
            data?: components["schemas"]["PaymentMethodType"];
        };
        inline_response_200_42: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["CustomerPaymentMethod"];
        };
        /** @example {
         *       "status": {
         *         "error_code": "ERROR_CREATE_PAYMENT_METHOD",
         *         "message": "The request attempted an operation that requires specific fields for payment method, but a required field was missing, or an extra, unallowed field was included. Corrective action: Run \"Get Payment Method Required Fields\" and check all input fields.",
         *         "response_code": "ERROR_CREATE_PAYMENT_METHOD",
         *         "status": "ERROR"
         *       }
         *     } */
        inline_response_400_23: {
            status?: components["schemas"]["Status_1"];
        };
        /** @example {
         *       "status": {
         *         "error_code": "ERROR_CUSTOMER_PAYMENT_METHOD_NOT_FOUND",
         *         "message": "The request attempted an operation that requires the default payment method of a customer, but the customer does not have a default payment method. The request was rejected.",
         *         "response_code": "ERROR_CUSTOMER_PAYMENT_METHOD_NOT_FOUND",
         *         "status": "ERROR"
         *       }
         *     } */
        inline_response_400_24: {
            status?: components["schemas"]["Status_1"];
        };
        inline_response_200_43: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["inline_response_200_43_data"];
        };
        /** @example {
         *       "status": {
         *         "error_code": "ERROR_DELETE_PAYMENT_METHOD_IN_USE",
         *         "message": "The request tried to delete a customer's default payment method, but the payment method was in use. The request was rejected. Corrective actionis to use \"List Subscriptions\", filtered by the customer's ID, then use \"Cancel Subscription\" to remove all subscriptions that use the customer's ID or the payment method that you want to delete.",
         *         "response_code": "ERROR_DELETE_PAYMENT_METHOD_IN_USE",
         *         "status": "ERROR"
         *       }
         *     } */
        inline_response_400_25: {
            status?: components["schemas"]["Status_1"];
        };
        inline_response_200_44: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["Sku"];
        };
        /** @description inventory object {quantity, type, value} */
        v1skusskuId_inventory: {
            /** @enum {string} */
            type?: "finite" | "infinite" | "bucket";
            quantity?: number;
            /** @enum {string} */
            value?: "in_stock" | "limited" | "out_of_stock";
        };
        /** @description Physical attributes of the SKU item. Object containing the following fields - height, length, weight, width */
        v1skusskuId_package_dimensions: {
            length?: number;
            height?: number;
            weight?: number;
            width?: number;
        };
        skus_skuId_body: {
            currency?: components["schemas"]["Currency_1"];
            inventory?: components["schemas"]["v1skusskuId_inventory"];
            /** @description The amount of the price. Decimal. */
            price?: number;
            /** @description ID of the product that this SKU relates to. The type field of the product must be set to goods. */
            product?: string;
            /** @description Indicates whether the product is currently available for purchase. */
            active?: boolean;
            /** @description Array of alphanumeric key-value pairs defined by the merchant. Each key must match a string in the "attributes" list of the corresponding "product" object. */
            attributes?: string[];
            /** @description URL of image associated with the product. */
            image?: string;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            package_dimensions?: components["schemas"]["v1skusskuId_package_dimensions"];
        };
        inline_response_200_45: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["Sku"][];
        };
        v1_skus_body: {
            currency: components["schemas"]["Currency_1"];
            inventory: components["schemas"]["v1skusskuId_inventory"];
            /** @description The amount of the price. Decimal. */
            price: number;
            /** @description ID of the product that this SKU relates to. The type field of the product must be set to goods. */
            product: string;
            /** @description Indicates whether the product is currently available for purchase. */
            active?: boolean;
            /** @description Array of alphanumeric key-value pairs defined by the merchant. Each key must match a string in the "attributes" list of the corresponding "product" object. */
            attributes?: string[];
            /** @description URL of image associated with the product. */
            image?: string;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            package_dimensions?: components["schemas"]["v1skusskuId_package_dimensions"];
        };
        inline_response_200_46: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["OrderResponse"][];
        };
        v1orders_items: {
            /** @description Price of one SKU unit, in the currency defined in currency. Decimal, including the correct number of decimal places for the currency exponent, as defined in ISO 2417:2015. */
            amount?: string;
            currency?: components["schemas"]["Currency_1"];
            /** @description Description of the item. */
            description?: string;
            /** @description ID of the SKU object that represents the product. String starting with sku_. Each SKU can appear in this list only one time, for items of type 'sku'. Required when type is sku. Must be null when type is shipping. */
            parent?: string;
            /**
             * @description Type of line item.
             * @enum {string}
             */
            type?: "shipping" | "sku";
            /** @description Quantity of the product in the line item. Integer. Required when type is sku. */
            quantity?: number;
        };
        v1_orders_body: {
            /** @description ID of a coupon that is applied against this order. String starting with coupon_. The duration field of the coupon must be set to **repeating**, and the `duration_in_months` and `discount_duration_in_uses` fields must be set to **1**. */
            coupon?: string;
            /** @description ID of the customer. String starting with cus_. */
            customer: string;
            /** @description Three-letter ISO 4217 code for the currency used in the objects in the 'items' list. */
            currency: string;
            /** @description Email address of the customer. */
            email?: string;
            /** @description Array of line items. */
            items: components["schemas"]["v1orders_items"][];
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            shipping_address?: components["schemas"]["Address_1"];
            /** @description Percentage of tax to charge. Decimal. */
            tax_percent?: number;
            /** @description Merchant-defined ID for the order. If the merchant does not define an ID, Rapyd generates it. */
            upstream_id?: string;
        };
        inline_response_200_47: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["OrderResponse"];
        };
        orders_orderId_body: {
            /** @description ID of a coupon that is applied against this order. String starting with **coupon_**. The duration field of the coupon must be set to **repeating**, and the `duration_in_months` and `discount_duration_in_uses` fields must be set to **1**. */
            coupon?: string;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /** @description Percentage of tax to charge. Decimal. */
            tax_percent?: number;
            /**
             * @description Indicates the status of the order. Can be changed when status is pending, paid or fulfilled
             * @enum {string}
             */
            status?: "paid" | "pending" | "canceled" | "fulfilled" | "returned" | "partial";
        };
        v1ordersorderIdreturns_items: {
            description?: string;
            parent?: string;
            /** @enum {string} */
            type?: "sku" | "shipping" | "tax";
            quantity?: number;
            currency?: string;
            amount?: number;
            order_id?: string;
        };
        orderId_returns_body: {
            order_id?: string;
            items: components["schemas"]["v1ordersorderIdreturns_items"][];
        };
        inline_response_200_48: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["OrderReturnedResponse"];
        };
        orderId_pay_body: {
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /** @description ID of the payment method. String starting with card_ or other_. If not specified, the payment method is the default_payment_method of the customer. */
            payment_method?: string;
            /** @description ID of a customer. String starting with cus_. The order is paid with the customer's default payment method. */
            customer?: string;
        };
        inline_response_200_49: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["OrderReturnedResponse"][];
        };
        inline_response_200_50: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["Coupon"][];
        };
        inline_response_200_51: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["Coupon"];
        };
        inline_response_200_52: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["inline_response_200_52_data"];
        };
        inline_response_200_53: {
            data?: components["schemas"]["PayoutMethodTypeDetails"];
            status?: components["schemas"]["Status"];
        };
        inline_response_200_54: {
            data?: components["schemas"]["Payout"][];
            status?: components["schemas"]["Status"];
        };
        v1_payouts_body: ({
            /** @description String starting with **beneficiary_** or the object describing the beneficiary. */
            beneficiary: string | components["schemas"]["Beneficiary"];
            /**
             * @description Country of the beneficiary. Two-letter ISO 3166-1 ALPHA-2 code. Uppercase.
             * @example US
             */
            beneficiary_country?: string;
            /**
             * @description Type of entity for the beneficiary. One of the following: **individual** | **company**
             * @enum {string}
             */
            beneficiary_entity_type: "individual" | "company";
            /**
             * @description Determines whether completion of the payout requires confirmation of the FX rate. Relevant to payouts with foreign exchange. Default is false.
             * @default false
             */
            confirm_automatically: boolean;
            /**
             * @description conversion rate
             * @default 1
             */
            converstion_rate: number;
            /** @description Description of the payout transaction. */
            description?: string;
            /**
             * @description ID of the wallet that the money is transferred from. String starting with **ewallet_**.
             * @example ewallet_4f1757749b8858160274e6db49f78ff3
             */
            ewallet?: string;
            /**
             * @description Determines the day the payout expires, in Unix time. The payout must be completed before the start of this day. Relevant to cash payouts.
             * @example 1607941348
             */
            expiration?: string;
            /** @description Location of the payout transaction. */
            location?: string;
            /**
             * @description ID defined by the client. Limited to 255 characters.
             * @example GHY-0YU-HUJ-POI
             */
            merchant_reference_id?: string;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /**
             * @description Amount of the payout, in units of the currency defined in `payout_currency`. Mandatory when `sender_amount` is not used. Decimal.
             * @example 110
             */
            payout_amount: number;
            payout_currency: components["schemas"]["Currency"];
            /**
             * @description The type of payout method. The two-letter prefix must match the beneficiary country code. Required when the beneficiary does not have a default payout method type.
             * @example us_general_bank
             */
            payout_method_type?: string;
            /** @description Payout options */
            payout_options?: Record<string, never>;
            /** @description String starting with **sender_** or the object describing the sender. */
            sender: string | components["schemas"]["Sender"];
            sender_country: components["schemas"]["Country"];
            sender_currency: components["schemas"]["Currency"];
            sender_entity_type: components["schemas"]["EntityType"];
            /** @description A statement that includes the reason for the payout. Limited to 35 characters. */
            statement_descriptor?: string;
        } | unknown | unknown) & ((components["schemas"]["PayoutRequest"] & unknown) | (components["schemas"]["PayoutRequest"] & unknown));
        inline_response_200_55: {
            data?: components["schemas"]["Payout"];
            status?: components["schemas"]["Status"];
        };
        inline_response_200_56: {
            status?: components["schemas"]["Status"];
            data?: components["schemas"]["MassPayoutResponse"];
        };
        payouts_beneficiary_body: {
            category: components["schemas"]["Category"];
            /**
             * @description Name of the beneficiary company. Relevant when `entity_type` is company.
             * @example ABC
             */
            company_name?: string;
            country: components["schemas"]["Country"];
            currency: components["schemas"]["Currency"];
            /**
             * @description The type of payout method for the beneficiary. The two-letter prefix must match the beneficiary country code.
             * @example us_general_bank
             */
            default_payout_method_type?: string;
            entity_type: components["schemas"]["EntityType"];
            /**
             * @description First name of the beneficiary. Relevant when `entity_type` is individual.
             * @example John
             */
            first_name?: string;
            /**
             * @description Type of identification document for the beneficiary.
             * @example drivers_license
             */
            identification_type?: string;
            /**
             * @description Identification number on the document mentioned in `identification_type`.
             * @example ABNHDLK354665
             */
            identification_value?: string;
            /**
             * @description Family name of the beneficiary. Relevant when `entity_type` is individual.
             * @example John
             */
            last_name?: string;
            /**
             * @description ID defined by the client.
             * @example GHY-0YU-HUJ-POI
             */
            merchant_reference_id?: string;
        };
        inline_response_200_57: {
            data?: components["schemas"]["Beneficiary"];
            status?: components["schemas"]["Status"];
        };
        payouts_extended_beneficiary_body: {
            /**
             * @description Beneficiary's street address including the build number.
             * @example 123 East 32nd street
             */
            address: string;
            /**
             * @description City of the beneficiary.
             * @example anytown
             */
            city: string;
            category: components["schemas"]["Category"];
            /**
             * @description Name of the beneficiary company. Required when `entity_type` is **company**.
             * @example All Star Limousine Service
             */
            company_name?: string;
            country: components["schemas"]["Country"];
            /**
             * @description The country where the company was registered. Two-letter ISO 3166-1 ALPHA-2 code. Required when `entity_type` is **company**.
             * @example IT
             */
            country_of_incorporation?: string;
            currency: components["schemas"]["Currency"];
            /**
             * @description Date of birth of the individual. Format: DD/MM/YYYY. Required when `entity_type` is **individual**.
             * @example 05/03/1967
             */
            date_of_birth?: string;
            /**
             * @description The date when the company was registered. Format: DD/MM/YYYY. Required when `entity_type` is **company**.
             * @example 05/03/1967
             */
            date_of_incorporation?: string;
            /**
             * @description The type of payout method for the beneficiary. The two-letter prefix must match the beneficiary country code.
             * @example us_general_bank
             */
            default_payout_method_type?: string;
            entity_type: components["schemas"]["EntityType"];
            /**
             * @description First name of the beneficiary. Required when `entity_type` is **individual**.
             * @example John
             */
            first_name?: string;
            gender?: components["schemas"]["gender"];
            /**
             * @description Type of identification document for the beneficiary. When `entity_type` is **company**, this field must be**company_registered_number**. When `entity_type` is **individual**:
             * @example drivers_license
             * @enum {string}
             */
            identification_type: "drivers_license" | "identification_id" | "international_passport" | "residence_permit" | "social_security" | "work_permit";
            /**
             * @description Identification number on the document mentioned in `identification_type`.
             * @example ABNHDLK354665
             */
            identification_value: string;
            /**
             * @description Family name of the beneficiary. Required when `entity_type` is **individual**. Required when `entity_type` is **individual**.
             * @example John
             */
            last_name?: string;
            /**
             * @description ID defined by the client.
             * @example GHY-0YU-HUJ-POI
             */
            merchant_reference_id?: string;
            /**
             * @description The citizenship of the beneficiary. Two-letter ISO 3166-1 ALPHA-2 code for the country. To determine the code for a country, see 'List Countries'. Required when `entity_type` is **individual**.
             * @example SG
             */
            nationality?: string;
        };
        beneficiary_validate_body: {
            /** @description Maximum payout amount to validate, in units of the currency defined in `sender_currency`. Decimal. */
            amount: number;
            /**
             * @description String starting with **beneficiary_** or the object describing the beneficiary.
             * @example beneficiary_d895d90d276869efe1e359386a1fb3e3
             */
            beneficiary: string | components["schemas"]["Beneficiary"];
            /** @description Identifier type of beneficiary */
            identifier_type?: string;
            /** @description Identifier value to filter with */
            identifier_value?: string;
            /**
             * @description The type of the payout method. Set to a value included in the response to List Payout Method Types. The two-letter prefix must match the beneficiary country code.
             * @example us_general_bank
             */
            payout_method_type: string;
            sender_country: components["schemas"]["Country"];
            sender_currency: components["schemas"]["Currency"];
            sender_entity_type: components["schemas"]["EntityType"];
        };
        inline_response_200_58: {
            data?: components["schemas"]["inline_response_200_58_data"];
            status?: components["schemas"]["Status"];
        };
        beneficiary_beneficiaryId_body: {
            /**
             * @description Beneficiary's street address including the build number.
             * @example 123 East 32nd street
             */
            address?: string;
            /**
             * @description City of the beneficiary.
             * @example anytown
             */
            city?: string;
            /**
             * @description Name of the beneficiary company. Relevant when `entity_type` is **company**.
             * @example All Star Limousine Service
             */
            company_name?: string;
            country?: components["schemas"]["Country"];
            /**
             * @description The country where the company was registered. Two-letter ISO 3166-1 ALPHA-2 code. Relevant when `entity_type` is **company**.
             * @example IT
             */
            country_of_incorporation?: string;
            /**
             * @description Date of birth of the individual. Format: DD/MM/YYYY. Relevant when `entity_type` is **individual**.
             * @example 05/03/1967
             */
            date_of_birth?: string;
            /**
             * @description The date when the company was registered. Format: DD/MM/YYYY. Relevant when `entity_type` is **company**.
             * @example 05/03/1967
             */
            date_of_incorporation?: string;
            /**
             * @description The type of payout method for the beneficiary. The two-letter prefix must match the beneficiary country code.
             * @example us_general_bank
             */
            default_payout_method_type?: string;
            /**
             * @description First name of the beneficiary. Relevant when `entity_type` is **individual**.
             * @example John
             */
            first_name?: string;
            /**
             * @description Gender of the individual. Relevant when `entity_type` is **individual**.
             * @enum {string}
             */
            gender?: "male" | "female" | "other" | "not_applicable";
            /**
             * @description Type of identification document for the beneficiary. When `entity_type` is **company**, this field must be**company_registered_number**. When `entity_type` is **individual**:
             * @example drivers_license
             * @enum {string}
             */
            identification_type?: "drivers_license" | "identification_id" | "international_passport" | "residence_permit" | "social_security" | "work_permit";
            /**
             * @description Identification number on the document mentioned in `identification_type`.
             * @example ABNHDLK354665
             */
            identification_value?: string;
            /**
             * @description Family name of the beneficiary. Relevant when `entity_type` is **individual**. Required when `entity_type` is **individual**.
             * @example John
             */
            last_name?: string;
            /**
             * @description ID defined by the client.
             * @example GHY-0YU-HUJ-POI
             */
            merchant_reference_id?: string;
            /**
             * @description The citizenship of the beneficiary. Two-letter ISO 3166-1 ALPHA-2 code for the country. To determine the code for a country, see 'List Countries'. Relevant when `entity_type` is **individual**.
             * @example SG
             */
            nationality?: string;
        };
        /** @example {
         *       "status": {
         *         "error_code": "ERROR_GET_BENEFICIARY",
         *         "message": "The request attempted an operation that requires a payout beneficiary, but the beneficiary was not found. The request was rejected. Corrective action: Use the ID of a valid beneficiary.",
         *         "response_code": "ERROR_GET_BENEFICIARY",
         *         "status": "ERROR"
         *       }
         *     } */
        inline_response_400_26: {
            status?: components["schemas"]["Status"];
        };
        inline_response_200_59: {
            data?: components["schemas"]["inline_response_200_59_data"];
            status?: components["schemas"]["Status"];
        };
        v1hosteddisbursebeneficiary_beneficiary_optional_fields: {
            /** @description The name of the beneficiary's company. Relevant to beneficiaries that are not individuals. If the request does not contain this information, the hosted page prompts the customer for it. <BR> If `beneficiary_entity_type` is **individual**, this field must be omitted. */
            company_name?: string;
            /** @description The first name of the beneficiary. Relevant to individual beneficiaries. If the request does not contain this information, the redirect page prompts the customer for it. */
            first_name?: string;
            /** @description Type of identification document. When `entity_type` is **company**, this field must be **company_registered_number**. When `entity_type` is **individual**, one of the following values: <BR> * **drivers_license**<BR> * **identification_id** <BR> * **international_passport** <BR> * **residence_permit**<BR> * **social_security**<BR> * **work_permit** type: string */
            identification_type: unknown;
            /** @description The identification of the document mentioned in identification_type. */
            identification_value: string;
            /** @description The last name of the beneficiary. Relevant to individual beneficiaries. If the request does not contain this information, the redirect page prompts the customer for it. */
            last_name?: string;
        };
        disburse_beneficiary_body: {
            /**
             * @description The two-letter ISO 3166-1 ALPHA-2 code for the country of the beneficiary’s bank account. The two-letter prefix of the payout method type matches the beneficiary country code.
             * @example FR
             */
            beneficiary_country?: string;
            /**
             * @description Type of entity for the beneficiary. One of the following:
             * @enum {string}
             */
            beneficiary_entity_type: "company" | "individual";
            /**
             * @description When the value is **true**, the hosted tokenization page displays additional required fields.<BR> * Additional required fields when `beneficiary_entity_type` is **individual**: `address`, `city`, `country`, `date_of_birth`, `first_name`, `gender`, `identification_type`, `identification_value`, `last_name`, `nationality`. <BR> * Additional required fields when `beneficiary_entity_type` is **company**: `address`, `city`, `company_name`, `country`, `country_of_incorporation`, `date_of_incorporation`, `identification_type`, `identification_value`.<BR> For more information on the additional required fields, see 'Create Extended Beneficiary'.<BR> **Note**: Currently only available in the sandbox.
             * @default false
             * @enum {boolean}
             */
            beneficiary_extended_fields: true | false;
            /** @description Additional information about the beneficiary. */
            beneficiary_optional_fields?: components["schemas"]["v1hosteddisbursebeneficiary_beneficiary_optional_fields"][];
            /**
             * @description The category of payout method. One of the following: <BR> * **bank**<BR> * **card** - US only.
             * @enum {string}
             */
            category?: "bank" | "card";
            /** @description URL where the customer is redirected after pressing **Close** to exit the hosted page. This URL overrides the `merchant_website` URL. Does not support localhost URLs. */
            complete_url?: string;
            /** @description Determines the default language of the hosted page. For a list of values, see 'List Supported Languages'.<BR> * When this parameter is null, the language of the user's browser is used.<BR> * If the language of the user's browser cannot be determined, the default language is English. */
            language?: string;
            /**
             * @description Client's name.
             * @example Rapyd
             */
            merchant_alias?: string;
            /** @description Identifier defined by the client for reference purposes. Limit: 45 characters. */
            merchant_reference_id?: string;
            /** @description End of the time when the customer can use the hosted page, in Unix time. If `page_expiration` is not set, the hosted page expires 14 days after creation. <BR> **Range**: 1 minute to 30 days. */
            page_expiration?: number;
            /** @description Currency accepted by the beneficiary’s bank account. Three-letter ISO 4217 code. */
            payout_currency?: string;
            /** @description List of payout methods that are excluded from display on the beneficiary tokenization page. */
            payout_method_types_exclude?: Record<string, never>[];
            /** @description Array of strings. List of payout methods that are displayed on the beneficiary tokenization page. */
            payout_method_types_include?: Record<string, never>[];
            /** @description The two-letter ISO 3166-1 ALPHA-2 code for the sender’s country. */
            sender_country: string;
            /** @description Currency paid from the sender’s wallet. Three-letter ISO 4217 code. */
            sender_currency?: string;
            /**
             * @description Type of entity for the sender.
             * @enum {string}
             */
            sender_entity_type: "company" | "individual";
        };
        inline_response_200_60: {
            data?: components["schemas"]["HostedBeneficiaryTokenResponse"];
            status?: components["schemas"]["Status"];
        };
        /** @example {
         *       "status": {
         *         "error_code": "ERROR_HOSTED_PAGE_BENEFICIARY_INVALID_CATEGORY",
         *         "message": "The request tried to create a beneficiary tokenization page, but the payout category was not valid. The request was rejected. Corrective action: Set 'category' to 'bank' or 'card'.",
         *         "response_code": "ERROR_HOSTED_PAGE_BENEFICIARY_INVALID_CATEGORY",
         *         "status": "ERROR"
         *       }
         *     } */
        inline_response_400_27: {
            status?: components["schemas"]["Status"];
        };
        /** @example {
         *       "status": {
         *         "error_code": "ERROR_UPDATE_PAYOUT",
         *         "message": "The request tried to update a payout, but the payout was not found. The request was rejected. Corrective action: For the 'payout' path parameter, use the ID of a valid payout, a string starting with **payout_**.",
         *         "operation_id": "fbc7054e-4493-4f01-b62e-788f189f9c0f",
         *         "response_code": "ERROR_UPDATE_PAYOUT",
         *         "status": "ERROR"
         *       }
         *     } */
        inline_response_400_28: {
            status?: components["schemas"]["Status"];
        };
        payouts_sender_body: {
            /**
             * @description Name of the sender company. Relevant when `entity_type` is **company**.
             * @example ABC
             */
            company_name?: string;
            country: components["schemas"]["Country"];
            currency: components["schemas"]["Currency"];
            entity_type: components["schemas"]["EntityType"];
            /**
             * @description First name of the sebder. Relevant when entity_type is individual.
             * @example Scott
             */
            first_name?: string;
            /**
             * @description Type of identification document for the sender.
             * @example drivers_license
             */
            identification_type?: string;
            /**
             * @description Identification number on the document mentioned in identification_type.
             * @example ANDSFS8974562
             */
            identification_value?: string;
            /**
             * @description Last name of the sender. Relevant when `entity_type` is **individual**.
             * @example Williams
             */
            last_name?: string;
        };
        inline_response_200_61: {
            data?: components["schemas"]["Sender"];
            status?: components["schemas"]["Status"];
        };
        /** @example {
         *       "status": {
         *         "error_code": "ERROR_GET_SENDER",
         *         "message": "The request attempted an operation that requires a payout sender, but the sender was not found. The request was rejected. Corrective action: Use the ID of a valid sender.",
         *         "operation_id": "fbc7054e-4493-4f01-b62e-788f189f9c0f",
         *         "response_code": "ERROR_GET_SENDER",
         *         "status": "ERROR"
         *       }
         *     } */
        inline_response_400_29: {
            status?: components["schemas"]["Status"];
        };
        inline_response_200_62: {
            data?: components["schemas"]["inline_response_200_62_data"];
            status?: components["schemas"]["Status"];
        };
        inline_response_200_63: {
            data?: components["schemas"]["PayoutMethodType"][];
            status?: components["schemas"]["Status"];
        };
        /** @example {
         *       "status": {
         *         "error_code": "ERROR_GET_PAYOUT",
         *         "message": "The request tried to retrieve a payout, but the payout was not found. The request was rejected. Corrective action: Use the ID of a valid payout.",
         *         "operation_id": "fbc7054e-4493-4f01-b62e-788f189f9c0f",
         *         "response_code": "ERROR_GET_PAYOUT",
         *         "status": "ERROR"
         *       }
         *     } */
        inline_response_400_30: {
            status?: components["schemas"]["Status"];
        };
        payouts_payoutId_body: {
            /** @description Description of the payout. */
            description?: string;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
        };
        inline_response_200_64: {
            data?: components["schemas"]["PayoutReturned"];
            status?: components["schemas"]["Status"];
        };
        inline_response_200_65: {
            status?: components["schemas"]["Status"];
            data?: components["schemas"]["inline_response_200_65_data"];
        };
        inline_response_200_66: {
            status?: components["schemas"]["Status"];
        };
        account_transfer_body: {
            /** @description Amount of the transfer. Decimal. */
            amount: number;
            /** @description Three-letter ISO 4217 code for the currency used in the amount field. Uppercase. */
            currency: string;
            /** @description ID of the wallet receiving the money. String starting with **ewallet_**. */
            destination_ewallet: string;
            /** @description Determines the day the ewallet funds transfer expires, in Unix time. Acceptance of the ewallet transfer must be completed before the start of this day. The default setting is 14 days from the date the ewallet transfer was created. */
            expiration?: string;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /** @description ID of the wallet sending the money. String starting with **ewallet_**. */
            source_ewallet: string;
        };
        inline_response_200_67: {
            data?: components["schemas"]["Transfer"];
            status?: components["schemas"]["Status"];
        };
        transfer_response_body: {
            /** @description ID of the transfer transaction, from the `id` field in the `data` object of the response. 32-digit hexadecimal. */
            id: string;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /** @description Determines how to handle the transfer. One of the following values - accept, decline, cancel */
            status: string;
        };
        account_deposit_body: {
            /** @description Amount of the transaction. Decimal. */
            amount: number;
            /** @description Three-letter ISO 4217 code for the currency used in the `amount` field. */
            currency: string;
            /** @description ID of the Rapyd Wallet. String starting with **ewallet_**. */
            ewallet: Record<string, never>;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
        };
        inline_response_200_68: {
            status?: components["schemas"]["Status"];
            data?: components["schemas"]["inline_response_200_68_data"];
        };
        account_withdraw_body: {
            /** @description Amount of the transaction. Decimal. */
            amount: number;
            /** @description Three-letter ISO 4217 code for the currency used in the `amount` field. */
            currency: string;
            /** @description ID of the Rapyd Wallet. String starting with **ewallet_**. */
            ewallet: Record<string, never>;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
        };
        balance_hold_body: {
            /**
             * @description Amount of the transfer. Decimal.
             * @example 100
             */
            amount: number;
            /** @description Three-letter ISO 4217 code for the currency used in the `amount` field. */
            currency?: string;
            /** @description ID of the wallet associated with the contact. String starting with **ewallet_**. */
            ewallet?: string;
        };
        inline_response_200_69: {
            status?: components["schemas"]["Status"];
            data?: components["schemas"]["PutFundsOnHoldResponse"];
        };
        /** @example {
         *       "status": {
         *         "error_code": "ERROR_TRANSFER_FUNDS_DESTINATION_AND_SOURCE_CANNOT_BE_THE_SAME",
         *         "message": "The request tried to transfer funds, but the source was the same as the destination. The request was rejected. Corrective action: Set 'source_ewallet' and 'destination_ewallet' to the IDs of two different wallets.",
         *         "response_code": "ERROR_TRANSFER_FUNDS_DESTINATION_AND_SOURCE_CANNOT_BE_THE_SAME",
         *         "status": "ERROR"
         *       }
         *     } */
        inline_response_400_31: {
            status?: components["schemas"]["Status"];
        };
        inline_response_200_70: {
            data?: components["schemas"]["Contact"][];
            status?: components["schemas"]["Status"];
        };
        /** @example {
         *       "status": {
         *         "error_code": "ERROR_GET_EWALLET",
         *         "message": "The request attempted an operation that requires a wallet, but the wallet was not found. The request was rejected. Corrective action: Use the ID of a valid wallet, a string starting with **ewallet_**.",
         *         "response_code": "ERROR_GET_EWALLET",
         *         "status": "ERROR"
         *       }
         *     } */
        inline_response_400_32: {
            status?: components["schemas"]["Status"];
        };
        ewalletId_contacts_body: {
            address?: components["schemas"]["Address"];
            /** @description Type of contact: personal. */
            contact_type: string;
            /** @description 2-letter ISO 3166-1 ALPHA-2 code for the country. Uppercase. */
            country?: string;
            /** @description Date of birth of the individual. Format: MM/DD/YYYY */
            date_of_birth?: string;
            /** @description Email address for the contact. */
            email?: string;
            /** @description First name of the contact. */
            first_name?: string;
            /** @description Family name of the personal contact or primary person associated with the business contact. For a personal contact type, alphabetic characters and spaces. Required for issuing a card to a personal contact.
             *      */
            last_name?: string;
            /** @description Gender of the contact. One of the following values: male, female, other, not_applicable */
            gender?: string;
            /** @description Description of the type of residency. One of the following values: lease, live_with_family, own, owner, month_to_month, housing_project */
            house_type?: string;
            /** @description ID number as shown by the ID document. Alphanumeric string */
            identification_number?: string;
            /** @description Type of the identification document */
            identification_type?: string;
            /** @description Marital status of the contact. One of the following values: married, single, divorced, widowed, cohabiting, not_applicable */
            marital_status?: string;
            /** @description A JSON object defined by the client. */
            metadata?: string;
            /** @description Middle name of the personal contact or primary person associated with the business contact. */
            middle_name?: string;
            /** @description Name of the contact's mother. */
            mothers_name?: string;
            /** @description The citizenship of the contact. Two-letter ISO 3166-1 ALPHA-2 code for the country. Uppercase. */
            nationality?: string;
            /** @description Phone number of the contact in E.164 format. */
            phone_number?: string;
            /** @description Second last name of the contact. */
            second_last_name?: string;
            /** @description Determines whether Rapyd sends notifications to the contact. Default is false. */
            send_notifications?: boolean;
            /** @description Reference ID for the contact. Limited to 45 characters. Should be unique per merchant per e-wallet. */
            contact_reference_id?: string;
        };
        inline_response_200_71: {
            data?: components["schemas"]["Contact"];
            status?: components["schemas"]["Status"];
        };
        /** @example {
         *       "status": {
         *         "error_code": "ERROR_ADD_CONTACT_TOO_MANY_CONTACTS",
         *         "message": "The request tried to add a contact to a personal wallet, but a personal wallet can have only one contact. The request was rejected. Corrective action: None. Determine why an attempt was made to give a personal wallet two contacts. Consider creating a company wallet.",
         *         "response_code": "ERROR_ADD_CONTACT_TOO_MANY_CONTACTS",
         *         "status": "ERROR"
         *       }
         *     } */
        inline_response_400_33: {
            status?: components["schemas"]["Status"];
        };
        /** @example {
         *       "status": {
         *         "error_code": "ERROR_GET_EWALLET_CONTACT",
         *         "message": "The request attempted an operation that requires a wallet contact, but the contact was not found. The request was rejected. Corrective action: In the path, specify the ID of a valid wallet, a string starting with \"ewallet\", and the ID of a valid contact belonging to that wallet, a string starting with \"cont\".",
         *         "response_code": "ERROR_GET_EWALLET_CONTACT",
         *         "status": "ERROR"
         *       }
         *     } */
        inline_response_400_34: {
            status?: components["schemas"]["Status"];
        };
        /** @example {
         *       "status": {
         *         "error_code": "ERROR_UPDATE_EWALLET_CONTACT",
         *         "message": "The request tried to update a business wallet contact, but there was a format error in the business details. The request was rejected. Corrective action: Provide all data in the correct format. See the API reference.",
         *         "response_code": "ERROR_UPDATE_EWALLET_CONTACT",
         *         "status": "ERROR"
         *       }
         *     } */
        inline_response_400_35: {
            status?: components["schemas"]["Status"];
        };
        inline_response_200_72: {
            data?: components["schemas"]["inline_response_200_72_data"];
            status?: components["schemas"]["Status"];
        };
        /** @example {
         *       "status": {
         *         "error_code": "ERROR_DELETE_CONTACT_FROM_PERSONAL_EWALLET",
         *         "message": "The request tried to delete a contact, but the wallet was a personal wallet. A personal wallet can have only one contact and it cannot be deleted. The request was rejected. Corrective action: None. Determine why an attempt was made to delete the contact.",
         *         "response_code": "ERROR_DELETE_CONTACT_FROM_PERSONAL_EWALLET",
         *         "status": "ERROR"
         *       }
         *     } */
        inline_response_400_36: {
            status?: components["schemas"]["Status"];
        };
        inline_response_200_73: {
            data?: components["schemas"]["inline_response_200_73_data"];
            status?: components["schemas"]["Status"];
        };
        /** @example {
         *       "status": {
         *         "error_code": "ERROR_GET_COMPLIANCE_LEVELS",
         *         "message": "",
         *         "response_code": "ERROR_GET_COMPLIANCE_LEVELS",
         *         "status": "ERROR"
         *       }
         *     } */
        inline_response_400_37: {
            status?: components["schemas"]["Status"];
        };
        card_details_cardToken_body: {
            /** @description The color of the card, specified by one of the following formats: `hexadecimal value`  `CSS color name` `RGB` `RGBA`  `black` */
            card_color?: string;
            /** @description Determines the default language of the hosted page. When this parameter is null, the language of the user's browser is used. If the language of the user's browser cannot be determined, the default language is English */
            language?: string;
            /** @description The URL of the logo image that appears on the card. If the logo is not specified, the name of the merchant appears. */
            logo?: string;
            /** @description The orientation of the logo on the card:
             *       `landscape`  `square` `portrait`
             *         Default value: `landscape`
             *      */
            logo_orientation?: string;
        };
        inline_response_200_74: {
            data?: components["schemas"]["HostedPageStatusBaseResponse"] & components["schemas"]["CardDetailsResponse"];
            status?: components["schemas"]["Status_1"];
        };
        inline_response_200_75: {
            status?: components["schemas"]["Status_1"];
            data?: (components["schemas"]["CardIssuing"] | components["schemas"]["CardIssuingMasked"])[];
        };
        issuing_cards_body: {
            /** @description ID of the card program that the card is issued from. String starting with **cardprog_**. */
            card_program: string;
            /** @description Two-letter ISO 3166-1 ALPHA-2 code for the country. */
            country?: string;
            /** @description ID of the wallet contact that the card is assigned to. String starting with **cont_**. */
            ewallet_contact: string;
            /** @description Expiration month of the card. */
            expiration_month?: string;
            /** @description Expiration year of the card. */
            expiration_year?: string;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
        };
        inline_response_200_76: {
            data?: components["schemas"]["CardIssuing"] | components["schemas"]["CardIssuingMasked"];
            status?: components["schemas"]["Status_1"];
        };
        inline_response_200_77: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["CardIssuing"] | components["schemas"]["CardIssuingMasked"];
        };
        cards_activate_body: {
            /** @description The card token, which is a string starting with 'card_'. If the client is PCI-certified, you can use the actual card number. */
            card: string;
        };
        inline_response_200_78: {
            data?: components["schemas"]["CardIssuing"];
            status?: components["schemas"]["Status_1"];
        };
        issuing_activate_card_body: {
            /** @description URL where the customer is redirected after pressing **Back to Website** to exit the hosted page. This URL overrides the `merchant_website` URL. Does not support localhost URLs. */
            cancel_url?: string;
            /** @description URL where the customer is redirected after pressing **Close** to exit the hosted page. This URL overrides the `merchant_website` URL. Does not support localhost URLs. */
            complete_url?: string;
            /** @description ID of the wallet contact that the card is assigned to. Must have a valid phone number. String starting with **cont_**. */
            ewallet_contact: string;
            /** @description Determines the default language of the hosted page. For a list of values, see 'List Supported Languages'.<BR>* When this parameter is null, the language of the user's browser is used.<BR> * If the language of the user's browser cannot be determined, the default language is English. */
            language?: string;
            /** @description End of the time when the customer can use the hosted page, in Unix time. If `page_expiration` is not set, the hosted page expires 14 days after creation.<BR>**Range**: 1 minute to 30 days. */
            page_expiration?: number;
            /** @description When **true**, connects an issued card to a wallet contact. Relevant to a card that was issued in bulk and is not assigned to a specific person. */
            personalize?: boolean;
            /**
             * @description When **true**, the customer cannot reset the PIN.
             * @default false
             */
            skip_pin: boolean;
        };
        inline_response_200_79: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["HostedPageActivateCardResponse"];
        };
        issuing_pin_body: {
            /** @description URL where the customer is redirected after pressing **Back to Website**. */
            cancel_url?: string;
            /** @description ID of the card. String starting with **card_**. */
            card?: string;
            /** @description ID of the wallet contact that the card is assigned to. Must have a valid phone number. String starting with **cont_**. */
            ewallet_contact: string;
            /** @description Determines the default language of the hosted page. For a list of values, see 'List Supported Languages'.<BR>* When this parameter is null, the language of the user's browser is used.<BR> * If the language of the user's browser cannot be determined, the default language is English. */
            language?: string;
            /** @description End of the time when the customer can use the hosted page, in Unix time. If `page_expiration` is not set, the hosted page expires 7 days after creation.<BR>**Range**: 1 minute to 30 days. */
            page_expiration?: unknown;
            /**
             * @description When **true**, the customer cannot reset the PIN.
             * @default false
             */
            skip_pin: boolean;
        };
        inline_response_200_80: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["HostedPageCardPINResponse"];
        };
        cards_personalize_body: {
            /** @description The card token, which is a string starting with **card_**. If the client is PCI-certified, you can use the actual card number. */
            card: string;
            /** @description ID of the wallet contact that the card is issued to. String starting with **cont_**. */
            ewallet_contact: string;
        };
        cards_status_body: {
            /** @description Reason for blocking the card. Relevant when the value of status is block. */
            blocked_reason?: string;
            /** @description The card token, which is a string starting with **card_**. If the client is PCI-certified, you can use the actual card number. */
            card: string;
            /** @description Status of the card. One of the following, block/unblock */
            status: string;
        };
        inline_response_200_81: {
            data?: components["schemas"]["CardTransaction"][];
            status?: components["schemas"]["Status_1"];
        };
        inline_response_200_82: {
            data?: components["schemas"]["CardTransaction"];
            status?: components["schemas"]["Status_1"];
        };
        cards_pin_body: {
            /** @description Card number or card ID. */
            card: string;
            /** @description PIN code. Numeric string. */
            new_pin: string;
        };
        inline_response_200_83: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["setPINResponse"];
        };
        card_tokens_google_pay_body: {
            /** @description Stable device identification set by the wallet provider. Could be a computer identifier or an ID tied to hardware such as TEE_ID or SE_ID. */
            client_device_id: string;
            /** @description The token requester’s Id (TRID). */
            client_wallet_provider: string;
            /** @description Client provided consumer ID that identifies the wallet account holder entity. */
            client_wallet_account_id: string;
        };
        inline_response_200_84: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["AddCardtoGooglePayResponse"];
        };
        /** @description Contains details about the card. */
        v1hostedcollectcard_card_fields: {
            /**
             * @description Specifies the primary intended purpose of the saved payment method. See Saving a European Card While Creating a Payment. One of the following values: <BR> * **installment** - Regular payments for a defined number of payment cycles. <BR> * **recurring** - Regular payments for an indefinite period. <BR> * **unscheduled** - Individual unrelated payments.
             * @default unscheduled
             */
            recurrence_type: string;
        };
        collect_card_body: {
            /** @description Indicates whether the hosted page displays address fields to fill in.<BR> * **true** - The address fields are displayed. <BR> * **false** - The address fields are displayed only for country codes **US**, **GB** and **CA**. */
            billing_address_collect?: boolean;
            /** @description URL where the customer is redirected after pressing **Back to Website** to exit the hosted page. This URL overrides the `merchant_website` URL. Does not support localhost URLs. */
            cancel_url?: string;
            card_fields?: components["schemas"]["v1hostedcollectcard_card_fields"];
            /** @description URL where the customer is redirected after pressing **Close** to exit the hosted page. This URL overrides the `merchant_website` URL. Does not support localhost URLs.The two-letter ISO 3166-1 ALPHA-2 code for the country. */
            complete_url?: string;
            /** @description URL where the customer is redirected when payment is successful, after returning from an external page such as a 3DS page. Does not support localhost URLs. */
            complete_payment_url?: string;
            /** @description The two-letter ISO 3166-1 ALPHA-2 code for the country. */
            country: string;
            /** @description In transactions without FX, defines the currency of the transaction. Three-letter ISO 4217 code. <BR> In FX transactions: <BR> * When `fixed_side` is **buy**, it is the currency received in the Rapyd wallet. <BR> * When `fixed_side` is **sell**, it is the currency charged to the buyer. <BR> See also `fixed_side` and `requested_currency` fields. */
            currency?: string;
            /** @description ID of a specific customer. String starting with **cus_**. Restricts the payment link to the customer. */
            customer: string;
            /** @description URL where the customer is redirected when payment is not successful, after returning from an external page, such as a 3DS page. Does not support localhost URLs. */
            error_payment_url?: string;
            /**
             * @description Determines the default language of the hosted page. For a list of values, see [List Supported Languages](https://docs.rapyd.net/en/list-supported-languages.html). <BR> * When this parameter is null, the language of the user's browser is used. <BR> * If the language of the user's browser cannot be determined, the default language is English.
             * @default en
             */
            language: string;
            /** @description End of the time when the customer can use the hosted page, in Unix time. If `page_expiration` is not set, the hosted page expires 14 days after creation. Range: 1 minute to 30 days. */
            page_expiration?: string;
            /** @description Limits the page to a specific type of payment method. For example, **dk_visa_card**. For a list of payment methods, use [List Payment Methods by Country](https://docs.rapyd.net/en/list-payment-methods-by-country.html). */
            payment_method_type?: string;
        };
        inline_response_200_85: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["CardTokenResponse"][];
        };
        /** @example {
         *       "status": {
         *         "error_code": "ERROR_TOKENIZE_CARD_NO_PAYMENT_METHODS",
         *         "message": "The request tried to create a token for future use of a card, but there are no relevant card payment methods available in the country for the merchant. The request was rejected. Corrective action: Contact Client Support.",
         *         "operation_id": "889e9472-922c-40a2-861d-19977c396db5",
         *         "response_code": "ERROR_TOKENIZE_CARD_NO_PAYMENT_METHODS",
         *         "status": "ERROR"
         *       }
         *     } */
        inline_response_400_38: {
            status?: components["schemas"]["Status_1"];
        };
        cards_simulate_block_body: {
            /** @description Reason for blocking the card. */
            blocked_reason?: string;
            /** @description ID of the card. String starting with **card_**. */
            card_id: string;
        };
        inline_response_200_86: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["simulateBlockCardResponse"];
        };
        cards_authorization_body: {
            /** @description The amount of the authorization, in units of the `currency` defined in currency. Decimal. */
            amount: number;
            /** @description ID of the card. String starting with **card_**. */
            card_id: string;
            /** @description The currency supported by the card. Three-letter ISO 4217 code. */
            currency: string;
            /**
             * @description Indicates the financial impact of the transaction.
             * @enum {string}
             */
            financial_impact: "credit" | "debit";
        };
        inline_response_200_87: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["SimulateCardTransactionAuthorizationRequestEEA"];
        };
        cards_reversal_body: {
            /** @description The amount of the authorization, in units of the `currency` defined in currency. Decimal. */
            amount?: number;
            /** @description ID of the authorization. String starting with **cardauth_**. Use the value of `id` in the response to Simulate a Card Transaction Authorization Request - EEA. */
            authorization_id: string;
            /** @description ID of the card. String starting with **card_**. */
            card_id: string;
            /** @description Defines the currency for the transaction. Three-letter ISO 4217 code. */
            currency: string;
        };
        inline_response_200_88: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["SimulateCardTransactionAuthorizationReversalEEA"];
        };
        cards_clearing_body: {
            /** @description The amount of the authorization, in units of the `currency` defined in currency. Decimal. */
            amount: number;
            /** @description ID of the authorization. String starting with **cardauth_**. Use the value of `id` in the response to Simulate a Card Transaction Authorization Request - EEA. */
            authorization_id: string;
            /** @description ID of the card. String starting with **card_**. */
            card_id: string;
            /** @description Type of charge: **ATM**. Required when `fee_amount` is set. */
            category?: string;
            /** @description Defines the currency for the transaction. Three-letter ISO 4217 code. */
            currency: string;
            /** @description The amount of the fee charged for the transaction, in units of the currency defined in `currency`. Decimal. Required when `category` is set. */
            fee_amount?: string;
        };
        inline_response_200_89: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["SimulateClearingCardTransactionEEA"];
        };
        cards_refund_body: {
            /** @description The amount of the refund, in units of the `currency` defined in currency. Decimal. */
            amount: number;
            /** @description ID of the authorization. String starting with **cardauth_**. Use the value of `id` in the response to 'Simulate a Card Transaction Authorization Request - EEA'. */
            authorization_id: string;
            /** @description ID of the card. String starting with **card_**. */
            card_id: string;
            /** @description The refund currency. Three-letter ISO 4217 code. */
            currency: string;
        };
        cards_adjustment_body: {
            /** @description The amount of the adjustment, in units of the `currency` defined in currency. Decimal. */
            amount: number;
            /** @description ID of the authorization. String starting with **cardauth_**. Use the value of `id` in the response to 'Simulate a Card Transaction Authorization Request - EEA'. */
            authorization_id: string;
            /** @description ID of the card. String starting with **card_**. */
            card_id: string;
            /** @description The adjustment currency. Three-letter ISO 4217 code. */
            currency: string;
        };
        v1_virtual_accounts_body: {
            /** @description The country that the account number will be associated with. Two-letter ISO 3166-1 ALPHA-2 code. Uppercase. */
            country: string;
            /** @description Currency of the account. Three-letter ISO 4217 code. */
            currency: string;
            /** @description Description of the account. */
            description?: string;
            /** @description ID of the wallet the bank account number is issued to. String starting with ewallet_. */
            ewallet: string;
            /** @description ID of this account, as provided by the merchant. Limited to 45 characters. */
            merchant_reference_id?: string;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /** @description *Currency received by the virtual account after conversion. Uppercase. One of the following: AUD - Australian Dollar EUR - Euro GBP - Pound Sterling HKD - Hong Kong Dollar SGD - Singapore Dollar USD - US Dollar When not specified, the funds appear in the walletâ€™s currency account for the currency of the transaction.* */
            requested_currency?: string;
        };
        inline_response_200_90: {
            data?: components["schemas"]["inline_response_200_90_data"];
            status?: components["schemas"]["Status_1"];
        };
        virtual_accounts_transactions_body: {
            /** @description The amount of the transaction, in units of the currency defined in currency. Decimal, including the correct number of decimal places for the currency exponent, as defined in ISO 2417:2015. If the amount is a whole number, use an integer and not a decimal. */
            amount: string;
            /** @description Currency of the transaction. Three-letter ISO 4217 code. Must be the same as the currency of the virtual account. */
            currency: string;
            /** @description ID of the Virtual Account Number object. String starting with issuing_ */
            issued_bank_account: string;
        };
        inline_response_200_91: {
            data?: components["schemas"]["inline_response_200_91_data"];
            status?: components["schemas"]["Status_1"];
        };
        inline_response_200_92: {
            data?: components["schemas"]["VirtualAccountIssuing"];
            status?: components["schemas"]["Status_1"];
        };
        virtual_accounts_virtualAccountId_body: {
            requesting_currency?: components["schemas"]["Currency"];
        };
        inline_response_200_93: {
            data?: components["schemas"]["inline_response_200_93_data"];
            status?: components["schemas"]["Status"];
        };
        inline_response_200_94: {
            data?: components["schemas"]["inline_response_200_94_data"];
            status?: components["schemas"]["Status_1"];
        };
        inline_response_200_95: {
            status?: components["schemas"]["Status"];
            data?: components["schemas"]["inline_response_200_95_data"];
        };
        inline_response_200_96: {
            data?: components["schemas"]["DailyRate"];
            status?: components["schemas"]["Status_1"];
        };
        inline_response_200_97: {
            status?: components["schemas"]["Status"];
            data?: components["schemas"]["Ewallet"][];
        };
        v1ewallets_contact: {
            data?: components["schemas"]["Contact"][];
            total_count?: number;
            has_more?: boolean;
            url?: string;
            /** @description Rapyd Wallet ID defined by the customer or end user. Must be unique. */
            ewallet_reference_id?: string;
            /** @description First name of the Rapyd Wallet owner. */
            first_name?: string;
            /** @description Last name of the Rapyd Wallet owner. */
            last_name?: string;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /** @description Type of wallet, company or person. Default is person. */
            type?: string;
            /** @description Phone number of the Rapyd Wallet owner. */
            phone_number?: string;
        };
        v1_ewallets_body: {
            contact: components["schemas"]["v1ewallets_contact"];
            /** @description Rapyd Wallet ID defined by the customer or end user. Must be unique. */
            ewallet_reference_id?: string;
            /** @description First name of the Rapyd Wallet owner. */
            first_name?: string;
            /** @description Last name of the Rapyd Wallet owner. */
            last_name?: string;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /** @description Type of wallet, company or person. Default is person. */
            type?: string;
        };
        inline_response_200_98: {
            data?: components["schemas"]["Ewallet"];
            status?: components["schemas"]["Status"];
        };
        ewallets_ewalletToken_body: {
            /** @description Rapyd Wallet ID defined by the customer or end user.  Must be unique. */
            ewallet_reference_id?: string;
            /** @description First name of the Rapyd Wallet owner. */
            first_name?: string;
            /** @description Last name of the Rapyd Wallet owner. */
            last_name?: string;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
        };
        account_limits_body: {
            /** @description The ID of the account within the wallet. */
            account_id?: string;
            /** @description The amount of the limit. */
            amount: string;
            /** @description Three-letter ISO 4217 code for the currency of an existing account. */
            currency: string;
            /** @description The limit type. */
            type: string;
        };
        inline_response_200_99: {
            data?: components["schemas"]["Account"][];
            status?: components["schemas"]["Status"];
        };
        inline_response_200_100: {
            status?: components["schemas"]["Status"];
            data?: components["schemas"]["Account"];
        };
        inline_response_200_101: {
            data?: components["schemas"]["EwalletTransaction"][];
            status?: components["schemas"]["Status"];
        };
        inline_response_200_102: {
            data?: components["schemas"]["EwalletTransactionDetails"];
            status?: components["schemas"]["Status"];
        };
        inline_response_200_103: {
            status?: components["schemas"]["Status"];
            data?: components["schemas"]["inline_response_200_103_data"];
        };
        inline_response_200_104: {
            status?: components["schemas"]["Status"];
            data?: components["schemas"]["DailyRate"];
        };
        inline_response_200_105: {
            status?: components["schemas"]["Status"];
            data?: components["schemas"]["ResendWebhookResponse"];
        };
        inline_response_200_106: {
            status?: components["schemas"]["Status"];
            data?: components["schemas"]["ListWebhooksResponse"];
        };
        issuing_bankaccounts_body: {
            /** @description The country that the account number will be associated with. Two-letter ISO 3166-1 ALPHA-2 code. Uppercase. */
            country: string;
            /** @description Currency of the account. Three-letter ISO 4217 code. */
            currency: string;
            /** @description Description of the account. */
            description?: string;
            /** @description ID of the wallet the bank account number is issued to. String starting with **ewallet_**. */
            ewallet: string;
            /** @description ID of this account, as provided by the merchant. Limited to 45 characters. */
            merchant_reference_id?: string;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /** @description Currency received by the virtual account after conversion. Uppercase. One of the following:<BR> * AUD - Australian Dollar<BR> * EUR - Euro<BR> * GBP - Pound Sterling<BR> * HKD - Hong Kong Dollar<BR> * SGD - Singapore Dollar<BR> * USD - US Dollar<BR> When not specified, the funds appear in the wallet’s currency account for the currency of the transaction. */
            requested_currency?: string;
        };
        inline_response_200_107: {
            data?: components["schemas"]["inline_response_200_107_data"];
            status?: components["schemas"]["Status"];
        };
        bankaccounts_bankaccounttransfertobankaccount_body: {
            /** @description The amount of the transaction, in units of the currency defined in currency. Decimal, including the correct number of decimal places for the currency exponent, as defined in ISO 2417:2015. If the amount is a whole number, use an integer and not a decimal. */
            amount: string;
            /** @description Currency of the transaction. Three-letter ISO 4217 code. Must be the same as the currency of the virtual account. */
            currency: string;
            /** @description ID of the Virtual Account Number object. String starting with **issuing_** */
            issued_bank_account: string;
        };
        inline_response_200_108: {
            data?: components["schemas"]["inline_response_200_108_data"];
            status?: components["schemas"]["Status"];
        };
        inline_response_200_109: {
            data?: components["schemas"]["inline_response_200_109_data"];
            status?: components["schemas"]["Status"];
        };
        bankaccounts_virtualAccountId_body: {
            requesting_currency?: components["schemas"]["Currency"];
        };
        inline_response_200_110: {
            data?: components["schemas"]["inline_response_200_110_data"];
            status?: components["schemas"]["Status"];
        };
        collect_payments_body: {
            /** @description The amount of the payment, in units of the currency defined in currency. Decimal, including the correct number of decimal places for the currency exponent, as defined in ISO 2417:2015.<BR> On the hosted payment page, the customer: <BR> * Cannot modify the amount when amount_is_editable is false or not used. <BR> * Can modify the amount when amount_is_editable is true and amount has a positive value. <BR> * Must enter an amount when amount_is_editable is true and amount is 0, null, or not used. */
            amount: string;
            /**
             * @description Determines whether the customer can edit the amount. <BR> * **true** - The customer can edit the amount. <BR> * **false** - The customer cannot edit the amount.
             * @default false
             */
            amount_is_editable: boolean;
            /** @description Optional parameters for the checkout page. */
            checkout?: Record<string, never>;
            /** @description The two-letter ISO 3166-1 ALPHA-2 code for the country. */
            country: string;
            /** @description In transactions without FX, defines the currency of the transaction. Three-letter ISO 4217 code. <BR> In FX transactions: <BR> * When `fixed_side` is **buy**, it is the currency received in the Rapyd wallet. <BR> * When `fixed_side` is **sell**, it is the currency charged to the buyer. <BR> See also `fixed_side` and `requested_currency` fields. */
            currency: string;
            /** @description ID of a specific customer. String starting with **cus_**. Restricts the payment link to the customer. */
            customer?: string;
            /**
             * @description Indicates whether the FX rate is fixed for the buy side (seller) or for the sell side (buyer).<BR>* **buy** - The currency that the Rapyd Wallet receives for goods or services. Fixed side buy relates to the seller (merchant) funds. For example, a US-based merchant wants to charge 100 USD. The buyer (customer) pays the amount in MXN that converts to 100 USD.<BR>* **sell** - The currency that the buyer is charged for purchasing goods or services. Fixed side sell relates to the buyer (customer) funds. For example, a US-based merchant wants to charge a buyer 2,000 MXN and will accept whatever amount in USD that is converted from 2,000 MXN.
             * @default buy
             */
            fixed_side: string;
            /**
             * @description Determines the default language of the hosted page. For a list of values, see 'List Supported Languages'. <BR> * When this parameter is null, the language of the user's browser is used. <BR> If the language of the user's browser cannot be determined, the default language is English.
             * @default en
             */
            language: string;
            /**
             * @description Indicates the maximum number of times that the payment link can be used for payments. When not indicated, there is no limit.
             * @example 7
             */
            max_payments?: number;
            /** @description Identifier defined by the client for reference purposes. Limit: 45 characters. */
            merchant_reference_id?: string;
            /** @description Currency for one side of an FX transaction. Three-letter ISO 4217 code. <BR><BR>* When `fixed_side` is **sell**, it is the currency received in the Rapyd Wallet. <BR><BR>* When `fixed_side` is **buy**, it is the currency charged to the buyer (customer). */
            requested_currency?: string;
        };
        v1_identities_body: {
            /** @description Base-64-encoded image of the back of the identity document. */
            back_side_image?: string;
            /** @description MIME type of the back side image of the identity document. Default is */
            back_side_image_mime_type?: string;
            /** @description ID of a personal contact for a 'person' wallet. */
            contact?: string;
            country: components["schemas"]["Country_1"];
            /** @description Type of the identification document. Two-letter code. */
            document_type: string;
            /** @description ID of the Rapyd Wallet. String starting with ewallet_. */
            ewallet: string;
            /** @description Base-64-encoded image of the face. */
            face_image: string;
            /** @description MIME type of the face image. Default is image/jpeg. */
            face_image_mime_type?: string;
            /** @description Base-64-encoded image of the front of the identity document. */
            front_side_image: string;
            /** @description MIME type of the front side image of the identity document. Default is image/jpeg. */
            front_side_image_mime_type?: string;
            /** @description ID of the identity verification request. Must be unique for each request. Defined by the client. Maximum length: 36 characters. In sandbox, to simulate success or failure, the string must contain one of the following values: success, failure For example: 12345678success */
            reference_id: string;
            /** @description Determines the action that is taken on the request. */
            request_type?: string;
            /** @description Determines whether a webhook is sent with the results of the verification request. */
            send_callback?: string;
        };
        inline_response_200_111: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["inline_response_200_111_data"];
        };
        /** @example {
         *       "status": {
         *         "error_code": "ERROR_ID_VERIFICATION",
         *         "message": "The request tried to validate identity, but the operation failed. The request was rejected. Corrective action: Check all parameters and provide a unique reference ID for each identity verification operation, whether successful or unsuccessful.",
         *         "response_code": "ERROR_ID_VERIFICATION",
         *         "status": "ERROR"
         *       }
         *     } */
        inline_response_400_39: {
            status?: components["schemas"]["Status_1"];
        };
        inline_response_200_112: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["inline_response_200_112_data"][];
        };
        inline_response_200_113: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["inline_response_200_113_data"][];
        };
        inline_response_200_114: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["inline_response_200_114_data"];
        };
        applications_hosted_body: {
            /** @description Code for the type of application. */
            application_type?: string;
            /** @description The country where the company is domiciled. Two-letter ISO 3166-1 ALPHA-2 code. The hosted application displays the country as the default setting. */
            country: string;
            /**
             * @description The ID of the Rapyd wallet of the company. String starting with ewallet_.
             * @example ewallet_ef84c580177dbfc4293b1cf73c73fc77
             */
            rapyd_entity_token: string;
            /** @description The phone number of the applicant. This is the phone number where an authentication code is sent. Must have a leading plus sign (+). */
            phone_number: string;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /** @description ID defined by the client. Limited to 255 characters. */
            client_reference_id?: string;
            /** @description URL where the customer is redirected after pressing Back to Website to exit the hosted page. This URL overrides the merchant_website URL. Does not support localhost URLs. */
            cancel_url?: string;
            /** @description URL where the customer is redirected after pressing Close to exit the hosted page. This URL overrides the merchant_website URL. Does not support localhost URLs. */
            complete_url?: string;
        };
        inline_response_200_115: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["VerifyHostedAppResponse"];
        };
        inline_response_200_116: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["inline_response_200_116_data"];
        };
        hosted_idv_body: {
            /** @description URL where the customer is redirected after pressing **Back to Website** to exit the hosted page. This URL overrides the `merchant_website` URL. Does not support localhost URLs. */
            cancel_url?: string;
            /** @description URL where the customer is redirected after pressing **Close** to exit the hosted page. This URL overrides the `merchant_website` URL. Does not support localhost URLs. */
            complete_url?: string;
            /** @description ID of the wallet contact. String starting with **cont_**. */
            contact: string;
            /** @description The two-letter ISO 3166-1 ALPHA-2 code for the country of the identification document. Must match the wallet contact country. */
            country: string;
            /** @description Type of the identification document. Two-letter code.<BR>See also 'List Official Identification Documents'. */
            document_type?: string;
            /** @description ID of the Rapyd Wallet. String starting with **ewallet_**. */
            ewallet: string;
            /** @description Requires the applicant to use the device's camera for a current face image, and prohibits uploading an existing image file. Default is **false**. */
            force_camera?: boolean;
            /** @description Determines the default language of the hosted page. For a list of values, see [List Supported Languages](https://docs.rapyd.net/en/list-supported-languages.html). <BR> * When this parameter is null, the language of the user's browser is used. <BR> * If the language of the user's browser cannot be determined, the default language is English. */
            language?: string;
            /** @description End of the time when the customer can use the hosted page, in Unix time. If `page_expiration` is not set, the hosted page expires 14 days after creation.<BR>**Range**: 1 minute to 30 days. */
            page_expiration?: number;
            /** @description ID of the identity verification request. Must be unique for each request. Defined by the client. */
            reference_id: string;
            /**
             * @description Determines the action that is taken on the request. One of the following:<BR>* **store** - Store the images on the Rapyd platform.<BR>* **verify** - Verify the identity of the person in the images.
             * @enum {string}
             */
            request_type?: "store" | "verify";
        };
        inline_response_200_117: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["inline_response_200_117_data"];
        };
        /** @example {
         *       "status": {
         *         "error_code": "ERROR_HOSTED_PAGE_INVALID_CONTACT",
         *         "message": "The request attempted a hosted page operation for identity verification process, but the contact was of type 'business' and the verification process is only for personal contacts. The request was rejected. Corrective action: Add a personal contact to the wallet and run the verification process on the personal contact.",
         *         "response_code": "ERROR_HOSTED_PAGE_INVALID_CONTACT",
         *         "status": "ERROR"
         *       }
         *     } */
        inline_response_400_40: {
            status?: components["schemas"]["Status_1"];
        };
        /** @description Specifies search criteria for the query. */
        v1cnltermination_query_search_criteria: {
            /**
             * @description The geographic range of the query. One of the following:<BR>* **global** - The query is geographically unlimited.<BR>* **local** - The query is limited to the merchant's country.<BR>* **regional** - The query is limited to the merchant's region, such as APAC.
             * @enum {string}
             */
            search_area?: "global" | "local" | "regional";
        };
        /** @description Details of the merchant's business address. */
        v1cnltermination_query_queried_merchant_address: {
            /** @description Line 1 of the address, such as a building number and street name.<BR>String with letters, numbers, numeric letters, and spaces. Applicable street details in this order: building number/name, street number and name, shop number, floor number.<BR>Length: 1-60 */
            address_line_1: string;
            /** @description Line 2 of the address, such as a building number and street name.<BR>String with letters, numbers, numeric letters, and spaces.<BR>Length: 1-60 */
            address_line_2: string;
            /** @description City portion of the address.<BR>String with letters, numbers, and spaces.<BR>Length: 1-20 */
            city: string;
            /** @description Code for the country.<BR>The two-letter ISO 3166-1 ALPHA-2 country code.<BR>Length: 2 */
            country: string;
            /** @description Postal code portion of the address.<BR>String with letters, numbers, and spaces.<BR>Length: 1-10 */
            postal_code?: string;
        };
        /** @description Details of the owner's business address. */
        v1cnltermination_query_queried_merchant_principals_address: {
            /** @description Line 1 of the address, such as a building number and street name.<BR>String with letters, numbers, numeric letters, and spaces. Applicable street details in this order: building number/name, street number and name, shop number, floor number.<BR>Length: 1-60 */
            address_line_1?: string;
            /** @description Line 2 of the address, such as a building number and street name.<BR>String with letters, numbers, numeric letters, and spaces.<BR>Length: 1-60 */
            address_line_2?: string;
            /** @description City portion of the address.<BR>String with letters, numbers, and spaces.<BR>Length: 1-20 */
            city?: string;
            /** @description Code for the country.<BR>The two-letter ISO 3166-1 ALPHA-2 country code.<BR>Length: 2 */
            country?: string;
            /** @description Postal code portion of the address.<BR>String with letters, numbers, and spaces.<BR>Length: 1-10 */
            postal_code?: string;
        };
        /** @description Details of the registered principal owners of the merchant.<BR> Maximum - 3. */
        v1cnltermination_query_queried_merchant_principals: {
            /** @description The first name of the owner.<BR>String that starts and ends with any combination of characters, whitespace, a specified range of Latin letters with diacritics, and a specific set of special characters.<BR>Length: 1-35 */
            first_name?: string;
            /** @description The initial letter of the owner's middle name.<BR>String that starts and ends with any combination of characters, whitespace, a specified range of Latin letters with diacritics, and a specific set of special characters.<BR>Length: Maximum - 1 */
            middle_initial?: string;
            /** @description The family name of the owner.<BR>String that starts and ends with any combination of characters, whitespace, a specified range of Latin letters with diacritics, and a specific set of special characters.<BR>Length: 1-40 */
            last_name?: string;
            /** @description The primary email address of the merchant.<BR>String that starts with a combination of letters, numbers, ., _, %, or - before an **@** sign. After the **@** sign, a domain name with letters, numbers, ., or -, ending with a dot and a 2 to 4 letter domain type, such as **.com**. For example: **billsmith@snapphoto.com**<BR>Length: Maximum - 90 */
            email?: string;
            /** @description The phone number of the owner.<BR> Phone number in the format +[country code]/[phone number], where the forward slash (/) represents a separator between the country code and the telephone number.<BR>The plus sign before the country code is optional. The country code may only contain digits.<BR>The slash is required and must follow the country code.<BR>The telephone number may include blank spaces and hyphens (-).<BR>For example, in **+1/555 555-5555**, the country code is 1 and the telephone number is 5555555555.<BR>Length: 8-15 */
            phone_number?: string;
            address?: components["schemas"]["v1cnltermination_query_queried_merchant_principals_address"];
        };
        /** @description Information about the merchant who is the subject of the query. */
        v1cnltermination_query_queried_merchant: {
            address?: components["schemas"]["v1cnltermination_query_queried_merchant_address"];
            /** @description Business phone numbers of the merchant.<BR<Array of strings. Maximum - 2. Each string is a phone number in the format +[country code]/[phone number], where the forward slash (/) represents a separator between the country code and the telephone number.<BR>The plus sign before the country code is optional. The country code may only contain digits.<BR>The slash is required and must follow the country code.<BR>The telephone number may include blank spaces and hyphens (-).<BR>For example, in **+1/555 555-5555**, the country code is 1 and the telephone number is 5555555555.<BR>Length of each phone number: 8-15. */
            phone_numbers?: Record<string, never>;
            /**
             * @description The category of the merchant's business.
             * @enum {string}
             */
            business_category?: "Merchant" | "Payment Facilitator" | "Independent Sales Organization" | "Marketplace" | "Staged Digital Wallet Operator" | "Sponsored Merchant";
            /** @description The "doing business as" name of the merchant.<BR>String that starts and ends with any combination of characters, whitespace, a specified range of Latin letters with diacritics, and a specific set of special characters.<BR>Length: 4-60 */
            dba_name?: string;
            /**
             * @description Merchant category codes of the merchant's business.<BR>Array of strings. Numbers or US letters. Maximum - 5 items. <BR>Length of each string: 4.
             * @example [
             *       "5411",
             *       "5812"
             *     ]
             */
            mcc?: Record<string, never>;
            principals?: components["schemas"]["v1cnltermination_query_queried_merchant_principals"];
            /** @description Indicates whether the merchant trades through the internet. */
            is_ecommerce?: boolean;
            /** @description The family name of the owner.<BR>String that starts and ends with any combination of characters, whitespace, a specified range of Latin letters with diacritics, and a specific set of special characters.<BR>Length: 1-40 */
            legal_name?: string;
            /** @description Web addresses associated with the merchant.<BR>Array of strings. Numbers or US letters. Maximum - 3 items. For example: ["https://fourstarmarket.com", "https://fourstarmarket.net"]<BR>Length: Maximum - 40 */
            url?: Record<string, never>;
            /** @description The primary email address of the owner.<BR>String that starts with a combination of letters, numbers, ., _, %, or - before an **@** sign. After the **@** sign, a domain name with letters, numbers, ., or -, ending with a dot and a 2 to 4 letter domain type, such as **.com**. For example: **davidsmith@snapphoto.com**<BR>Length: Maximum - 90 */
            email?: string;
        };
        cnl_termination_query_body: {
            /** @description ID of the merchant, defined by the partner.<BR>Length: 0-60 */
            partner_merchant_reference: string;
            /** @description Unique ID of the query request, defined by the partner.<BR>Length: 0-60 */
            partner_query_reference: string;
            search_criteria?: components["schemas"]["v1cnltermination_query_search_criteria"];
            queried_merchant: components["schemas"]["v1cnltermination_query_queried_merchant"];
        };
        inline_response_200_118: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["inline_response_200_118_data"];
        };
        /** @example {
         *       "status": {
         *         "error_code": "INVALID_FIELDS",
         *         "message": "The request attempted an operation, but one of the fields contained a value that is not valid. The request was rejected. Corrective action: The name of the field appears at the end of the response code. Use a valid value.",
         *         "response_code": "INVALID_FIELDS - [SEARCH_CRITERIA]",
         *         "status": "ERROR"
         *       }
         *     } */
        inline_response_400_41: {
            status?: components["schemas"]["Status_1"];
        };
        inline_response_200_119: {
            status?: components["schemas"]["Status_1"];
            data?: components["schemas"]["inline_response_200_119_data"];
        };
        /** @example {
         *       "status": {
         *         "error_code": "BAD REQUEST",
         *         "message": "",
         *         "response_code": "BAD REQUEST",
         *         "status": "ERROR"
         *       }
         *     } */
        inline_response_400_42: {
            status?: components["schemas"]["Status_1"];
        };
        inline_response_200_120: {
            status?: components["schemas"]["Status"];
            data?: components["schemas"]["ListSupportedLanguagesResponse"];
        };
        inline_response_200_121: {
            status?: components["schemas"]["Status"];
            data?: components["schemas"]["ListCountriesResponse"];
        };
        inline_response_200_122: {
            status?: components["schemas"]["Status"];
            data?: components["schemas"]["ListCurrenciesResponse"];
        };
        VerifyHostedAppResponse_merchant_details_merchant_customer_support: {
            email?: string;
            url?: string;
            phone_number?: string;
        };
        /** @description Object containing information about the merchant. */
        VerifyHostedAppResponse_merchant_details: {
            /** @description The name that appears on the hosted page when merchant_logo is not specified. To change this value, contact Client Support. Response only. */
            merchant_alias?: string;
            /** @description Determines the default language of the application page.  The values are documented in List Hosted Page Supported Languages.
             *      */
            merchant_language?: string;
            /** @description URL for the image of the client's logo. Response only. To configure this feature, use the Client Portal. */
            merchant_logo?: string;
            /** @description The URL where the customer is redirected after exiting the hosted page. */
            merchant_website?: string;
            merchant_color?: string;
            merchant_design?: string;
            merchant_customer_support?: components["schemas"]["VerifyHostedAppResponse_merchant_details_merchant_customer_support"];
            merchant_terms?: string;
            merchant_privacy_policy?: string;
        };
        /** @description The base64 encoded string that contains the encrypted object for Push Provisioning. Required for adding the card to the Google Pay wallet by using the Google Pay `pushTokenizeRequest` method. For more information refer to the Google Pay Provisioning developer documentation .Details of an account funding transaction (AFT), which transfers funds from a card to a cardholder's wallet. */
        AddCardtoGooglePayResponse_UserAddress: {
            /** @description First part address. */
            firstPartAddress?: string;
            /** @description Second part address. */
            secondPartAddress?: string;
            /** @description Two character Country code. */
            countryCode?: string;
            /** @description Locality such as city, town, etc. */
            locality?: string;
        };
        PayoutAmountRangePerCurrency_inner: {
            /** @description Maximum amount supported by this payout method for the indicated currency. Decimal number. */
            maximum_amount?: number;
            /** @description Minimum amount supported by this payout method for the indicated currency. Decimal number. */
            minimum_amount?: number;
            payout_currency?: components["schemas"]["Currency"];
        };
        /** @description Headers of the HTTP response from the configured webhook destination, with the value received. */
        ListWebhooksResponse_attempts_http_response_headers: {
            /** @description Control options for the connection. */
            connection?: string;
            /** @description Length of the content in bytes.ook destination. */
            "content-length"?: number;
            /** @description MIME type of the content. */
            "content-type"?: string;
            /** @description Timestamp of the response in HTTP-date format (RFC 9110). */
            date?: string;
            /** @description Name of the server. */
            server?: string;
        };
        /** @description List of attempts at sending the webhook. Array of objects that contain the following fields: */
        ListWebhooksResponse_attempts: {
            /** @description Error message received from the configured webhook destination. */
            error?: string;
            /** @description HTTP status code returned by the configured webhook destination. */
            http_status_code?: string;
            /** @description Body of the HTTP response from the configured webhook destination. */
            http_response_body?: string;
            http_response_headers?: components["schemas"]["ListWebhooksResponse_attempts_http_response_headers"];
        };
        /** @description List of the supported countries. */
        ListCountriesResponse_languages: {
            /** @description Three-letter ISO 4217 code for the currency. */
            currency_code?: string;
            /** @description Name of the currency in English. */
            currency_name?: string;
            /** @description Unicode symbol for the currency. */
            currency_sign?: string;
            /** @description ID of the country. */
            id?: string;
            /** @description 2-letter ISO 3166-1 alpha-2 code for the country. */
            iso_alpha2?: string;
            /** @description 3-letter ISO 3166-1 alpha-2 code for the country. Informational only - not relevant to Rapyd API. */
            iso_alpha3?: string;
            /** @description Name of the country in English. */
            name?: string;
            /** @description International telephone prefix for the country. */
            phone_code?: string;
        };
        /** @description List of the languages supported for hosted pages. */
        ListSupportedLanguagesResponse_languages: {
            /** @description Name of the language in English. */
            name?: string;
            /** @description ISO 639-1 code for the language. 2 letters, with suffix where relevant. */
            iso_alpha2?: string;
        };
        Ewallet_contacts: {
            data?: components["schemas"]["Contact"][];
            has_more?: boolean;
            total_count?: number;
            url?: string;
        };
        Field_conditions: {
            /** @description Description of the condition. */
            description?: string;
            /** @description The name of a field, including the path. The field is the first operand of the condition. */
            element_name?: string;
            /** @description A symbol representing the operator of the condition. String starting with $. The operator determines the relationship between the operands. */
            operator?: string;
            /** @description One or more possible values of the element_name field. The second operand of the condition. */
            threshold_value?: string | string[];
        };
        HostedBeneficiaryTokenResponse_beneficiary_optional_fields: {
            /** @description The name of the beneficiary's company. Relevant to beneficiaries that are not individuals. If the request does not contain this information, the hosted page prompts the customer for it. <BR> If `beneficiary_entity_type` is **individual**, this field must be omitted. */
            company_name?: string;
            /** @description The first name of the beneficiary. Relevant to individual beneficiaries. If the request does not contain this information, the redirect page prompts the customer for it. */
            first_name?: string;
            /** @description Type of identification document. When `entity_type` is **company**, this field must be **company_registered_number**. When `entity_type` is **individual**, one of the following values: <>BR> * **drivers_license**<BR> * **identification_id** <BR> * **international_passport** <BR> * **residence_permit**<BR> * **social_security**<BR> * **work_permit** type: string */
            identification_type?: unknown;
            /** @description The identification of the document mentioned in identification_type. */
            identification_value?: string;
            /** @description The last name of the beneficiary. Relevant to individual beneficiaries. If the request does not contain this information, the redirect page prompts the customer for it. */
            last_name?: string;
        };
        HostedBeneficiaryTokenResponse_merchant_customer_support: {
            /** @description Email address. */
            email?: string;
            /** @description URL for the client's customer support service. */
            url?: string;
            /** @description Phone number for contacting the client's customer support service. */
            phone_number?: string;
        };
        Payout_ewallets: {
            /** @description The amount of the payment to the wallet, in units of the currency defined in currency. Decimal. If the total amount of the payment is not fully accounted for, the balance appears in the client wallet. Relevant when percentage is not set. */
            amount?: number;
            /** @description ID of the wallet. String starting with **ewallet_**. Read-only. */
            ewallet_id?: string;
            /** @description The percentage that is paid to the wallet out of the total payment. Read-only. */
            percent?: number;
        };
        Payout_instructions: {
            name?: string;
            steps?: Record<string, never>[];
        };
        /** @description Response related to an authorization. Contains the following fields: */
        SimulateCardTransactionAuthorizationRequestEEA_auth_response: {
            /** @description Indicates success or reason for failure. */
            code?: string;
            /** @description Descriptive text. */
            message?: string;
        };
        /** @description Response to a successful remote authorization request. Contains the following fields: */
        SimulateClearingCardTransactionEEA_remote_auth_response: {
            /** @description ID of the authorization. String starting with **cardauth_**. */
            authorization_id?: string;
            /** @description Code returned by the client in the response to the remote authorization. */
            response_code?: string;
            /** @description Authorization code returned by the client in the response to the remote authorization. */
            auth_code?: string;
        };
        PaymentAmountRangePerCurrency_inner: {
            /** @description Maximum amount supported by this payout method for the indicated currency. Decimal number. */
            maximum_amount?: number;
            /** @description Minimum amount supported by this payout method for the indicated currency. Decimal number. */
            minimum_amount?: number;
            currency?: components["schemas"]["Currency_1"];
        };
        /** @description Contains details about the card. */
        CardTokenResponse_card_fields: {
            /** @description Specifies the primary intended purpose of the saved payment method. See Saving a European Card While Creating a Payment. One of the following values: <BR> * **installment - Regular payments for a defined number of payment cycles.** <BR> * **recurring** - Regular payments for an indefinite period. <BR> * **unscheduled** - Individual unrelated payments. */
            recurrence_type?: string;
        };
        /** @description Contains the following fields. When these fields do not include values, the user is redirected to the hosted page, and a related status message appears at the top of the page. */
        CardTokenResponse_payment_params: {
            /** @description URL where the customer is redirected when payment is successful, after returning from an external page such as a 3DS page. Does not support localhost URLs. */
            complete_payment_url?: string;
            /** @description URL where the customer is redirected when payment is not successful, after returning from an external page, such as a 3DS page. Does not support localhost URLs. */
            error_payment_url?: string;
        };
        /** @description An object containing the following fields - * data - A list of up to three payment methods. For more information, see Customer Payment Method Object. * has_more - Indicates whether there are more than three payment methods for this customer. * total_count - Total number of payment methods for this customer. * url - URL for requesting all of the payment methods for this customer.. */
        Customer_payment_methods: {
            data?: components["schemas"]["CustomerPaymentMethod"][];
            has_more?: boolean;
            total_count?: number;
            url?: string;
        };
        /** @description The payment method that is used when the transaction does not specify a payment method. String starting with **card_** or other_. */
        CustomerRequest_payment_method: {
            /** @description Payment Method Type required field */
            fields?: components["schemas"]["Field_1"][];
            /** @description Type of the payment method. For example, it_visa_card */
            type?: string;
        };
        /** @description Describes the wallets and the releases from escrow. */
        Escrow_ewallets: {
            /** @description ID of the wallet, a string starting with **ewallet_**. */
            ewallet?: string;
            /** @description The amount to release to this wallet. Relevant when `percentage` is not set. */
            amount?: number;
            /** @description The percentage of this escrow to release to this wallet. Relevant when `amount` is not set. On a partial release after the first, this refers to the percentage of the original amount of the escrow. */
            percentage?: number;
        };
        /** @description Array of objects that describe individual escrow releases. */
        EscrowResponse_escrow_releases_data: {
            /** @description The currency of the escrow balance. Three-letter ISO 4217 code. */
            amount?: number;
            /** @description Date and time the escrow release was created, in Unix time. */
            created_at?: number;
            /** @description The currency of the escrow balance. Three-letter ISO 4217 code. */
            currency?: string;
            ewallets?: components["schemas"]["Escrow_ewallets"];
            /** @description ID of the escrow release, a string starting with **er_**. */
            id?: number;
            /** @description Indicates that the wallets were released in the same proportion that was defined in the Create Payment request. */
            proportional_release?: boolean;
            /** @description Indicates what triggered the escrow release. One of the following: <BR> * **event** - Funds were released due to an API request. <BR> **time** - Funds were automatically released at 5:00 p.m. GMT (17:00 GMT) on the day indicated in theCreate Payment request. <BR> **cancel_escrow** - Escrow was canceled. */
            trigger?: string;
        };
        /** @description Array of objects that describe individual releases. */
        EscrowResponse_escrow_releases: {
            data?: components["schemas"]["EscrowResponse_escrow_releases_data"];
            /** @description Indicates that the number of escrow releases is greater than the number returned in the response. */
            has_more?: boolean;
            /** @description Number of escrow releases. */
            total_count?: number;
            /** @description URL for the record of all escrow releases for this payment. */
            url?: string;
        };
        /** @description Describes the cart items that the customer is purchasing. These items are displayed at the checkout page. */
        HostedPageAdditionalResponse_cart_items: {
            /** @description The price of the item in the currency defined in currency. */
            amount?: number;
            /** @description The name of the item. */
            name?: string;
            /** @description The quantity of the item. */
            quantity?: number;
            /** @description The image that appears in the checkout page for this item. */
            image?: string;
        };
        /** @description Description of the payment transaction. */
        HostedPageAdditionalResponse_custom_elements: {
            save_card_default: boolean;
            payment_fees_display: boolean;
            billing_address_collect: boolean;
            display_description: boolean;
            merchant_currency_only: boolean;
            cardholder_name: string;
            cardholder_preferred_currency?: string;
            dynamic_currency_conversion?: boolean;
        };
        /** @description Defines the start and end of the time period that this invoice item refers to. Relevant when the invoice item refers to more than one day. Contains the following fields: */
        InvoiceItemResponse_period: {
            /** @description First date in the period covered by the invoice, in Unix time. Response only. */
            start?: string;
            /** @description Last date in the period covered by the invoice, in Unix time. Response only. */
            end?: string;
        };
        InvoiceItem_period: {
            /** @description First date in the period covered by the invoice, in Unix time. Response only. */
            start?: string;
            /** @description Last date in the period covered by the invoice, in Unix time. Response only. */
            end?: string;
        };
        InvoiceLineResponse_period: {
            start?: number;
            end?: number;
        };
        /** @description Indicates the last time in Unix time that the order transitioned to one of the following statuses. A zero value for a status indicates that the order has never transitioned to it. */
        OrderResponse_status_transitions: {
            canceled?: number;
            fulfilled?: number;
            paid?: number;
            returned?: number;
            pending?: number;
            partial?: number;
        };
        Payment_ewallets: {
            ewallet_id?: string;
            amount?: number;
            percent?: number;
            refunded_amount?: number;
            released_amount?: number;
        };
        Payment_steps: {
            step?: string;
        };
        Payment_instructions: {
            name?: string;
            steps?: components["schemas"]["Payment_steps"][];
        };
        /** @description Refunds object */
        Payment_refunds: {
            data?: string[];
            has_more?: boolean;
            total_count?: number;
            url?: string;
        };
        Plan_tiers: {
            /**
             * @description The price for each item in this tier. Decimal number.
             * @example 15
             */
            amount?: number;
            /**
             * @description Additional price for the entire tier. Default is 0.
             * @example 0
             */
            flat_amount?: number;
            /**
             * @description The upper volume limit for this tier. Valid values: inf (infinite) or an integer.
             * @example inf
             */
            up_to?: string | number;
        };
        /** @description Defines the transformation that is applied to the reported usage before the billed price is computed. The transformation divides the quantity by the divisor specified in divide_by, then rounds up or down according to the setting in round. Relevant when billing_scheme is set to per_unit. */
        Plan_transform_usage: {
            /**
             * @description Indicates the divisor in the transformation calculation. Integer. Default is 1.
             * @example 1
             */
            divide_by?: number;
            /** @description Indicates whether the reported number of units should be rounded up or down to the next whole quantity specified in divide_by. String. Default is up. */
            round?: string;
        };
        PlanObject_tiers: {
            /**
             * @description The price for each item in this tier. Decimal number.
             * @example 15
             */
            amount?: number;
            /**
             * @description Additional price for the entire tier. Default is 0.
             * @example 0
             */
            flat_amount?: number;
            /**
             * @description The upper volume limit for this tier. Valid values: inf (infinite) or an integer.
             *
             * @example inf
             */
            up_to?: string | number;
        };
        /** @description Describes the physical size and weight of the product. Contains the following fields:
         *     * height
         *     * length
         *     * weight
         *     * width
         *     These fields are represented as numbers, but it is the responsibility of the merchant to define and interpret the relevant units of length and weight.
         *      */
        Product_package_dimensions: {
            /**
             * @description NA
             * @example 10
             */
            height?: number;
            /**
             * @description NA
             * @example 20
             */
            length?: number;
            /**
             * @description NA
             * @example 100
             */
            weight?: number;
            /**
             * @description NA
             * @example 40
             */
            width?: number;
        };
        Refund_ewallets: {
            /** @description The amount of the payment to the wallet, in units of the currency defined in currency. Decimal. If the total amount of the payment is not fully accounted for, the balance appears in the client wallet. Relevant when percentage is not set. */
            amount?: number;
            /** @description ID of the wallet. String starting with **ewallet_**. Read-only. */
            ewallet?: string;
        };
        /** @description Physical attributes of the SKU item. Contains the following fields, height length weight width These fields are represented as numbers, but it is the responsibility of the merchant to define and interpret the relevant units of length and weight. */
        Sku_package_dimensions: {
            /**
             * @description NA
             * @example 1
             */
            height?: number;
            /**
             * @description NA
             * @example 2
             */
            length?: number;
            /**
             * @description NA
             * @example 3
             */
            weight?: number;
            /**
             * @description NA
             * @example 4
             */
            width?: number;
        };
        /** @description Description of the payment transaction. */
        SubscriptionHostedPageReponse_custom_elements: {
            /** @description Determines whether the customer is asked to fill in the billing address. Relevant when a card payment method is selected. <BR> * **true** - The address fields appear on the checkout page.<BR> * **false** - The address fields appear only if the country is **US, **GB** or **CA**. */
            billing_address_collect?: boolean;
            /** @description The name of the card owner, printed on the front of the card. */
            cardholder_name?: string;
            /** @description Determines whether the checkout page displays the payment description.<BR>* **true** - The payment description appears.<BR> * **false** - The payment description does not appear.<BR> Relevant when description is passed in the Create Checkout Page request. */
            display_description?: boolean;
            /** @description Determines whether the checkout page displays multiple currency options for a payment.<BR> * **true** - Multiple currency options appear.<BR> * **false** - Currency options do not appear.<BR>When the customer selects the requested currency, the checkout page displays the following information:<BR>* The original amount and currency.<BR> * The converted amount in the requested currency.<BR> * The exchange rate.<BR> Relevant when: <BR> * The Create Checkout Page request passes requested_currency.<BR> * `fixed_side` is **buy**. <BR> * One or more payment methods support the values for `currency` and `requested_currency`. */
            dynamic_currency_conversion?: boolean;
            /** @description reserved */
            merchant_color?: string;
            /** @description In a payment with FX where fixed_side=**buy**, determines whether the buyer's currency and the exchange rate appear. One of the following:<BR> * **true** - The currency and the exchange rate are hidden.<BR> * **false** - The currency and the exchange rate appear. */
            merchant_currency_only?: boolean;
            /** @description Determines whether payment fees appear on the checkout page.<BR> * **true** - Payment fees appear when the `payment_fees` object is set in the 'Create Checkout Page' request.<BR> * **false** - Payment fees do not appear. */
            payment_fees_display?: boolean;
            /** @description Indicates the list of fields that the customer has to fill in on the payment page before completing the payment via hosted checkout. Valid values include:<BR>* **name** – The customer's full name (default).<BR> * **email** – The customer's email address.<BR> * **phone_number** – The customer's phone number.<BR> * **address** – The address of the customer. */
            required_customer_fields?: unknown;
            /** @description Determines whether the save card checkbox is checked by default.<BR> * **true** - The **save card** checkbox is checked.<BR> * **false** - The **save card** checkbox is cleared.<BR> Relevant when `customer_id` is passed in the 'Create Checkout Page' request. */
            save_card_default?: boolean;
        };
        SubscriptionHostedPageReponse_merchant_customer_support: {
            /** @description Email address. */
            email?: string;
            /** @description URL for the client's customer support service. */
            url?: string;
            /** @description Phone number for contacting the client's customer support service. */
            phone_number?: string;
        };
        Field_1_conditions: {
            /** @description Description of the condition. */
            description?: string;
            /** @description The name of a field, including the path. The field is the first operand of the condition. */
            element_name?: string;
            /** @description A symbol representing the operator of the condition. String starting with $. The operator determines the relationship between the operands. */
            operator?: string;
            /** @description des One or more possible values of the element_name field. The second operand of the condition. */
            threshold_value?: string | string[];
        };
        inline_response_200_7_data: {
            /** @description discount id */
            id?: string;
            deleted?: boolean;
        };
        inline_response_200_12_data: {
            deleted?: boolean;
            /** @description ID of the plan */
            id?: string;
        };
        inline_response_200_17_data: {
            /** @description true if the item deleted successfully, else false. */
            deleted?: boolean;
            /** @description ID of the subscription item. */
            id?: string;
        };
        inline_response_200_18_data: {
            id?: string;
            /** @description The usage quantity for the specified date and time (timestamp). */
            quantity?: number;
            /** @description ID of the subscription item. */
            subscription_item?: string;
            /** @description Timestamp for the usage record in Unix time. */
            timestamp?: string;
        };
        inline_response_200_23_data: {
            id?: string;
            deleted?: boolean;
        };
        inline_response_200_25_data: {
            /** @description ID of the invoice item. String starting with **ii_**. */
            id?: string;
            /** @description Indicates whether this invoice item was deleted. */
            deleted?: boolean;
        };
        inline_response_200_32_data: {
            /** @description Amount of the group payment, in units defined by currency. Decimal, including the correct number of decimal places for the currency exponent, as defined in ISO 2417:2015. If the amount is a whole number, use an integer and not a decimal. */
            amount?: number;
            /** @description Indicates the total amount of failed payments that have not been replaced. Response only. */
            amount_to_replace?: number;
            /** @description Reason for cancellation of the group payment. Response only. */
            cancel_reason?: string;
            /** @description Country where the payment methods are supported. Two-letter ISO 3166-1 ALPHA-2 code. Response only. */
            country?: string;
            /** @description Currency of the payments. Three-letter ISO 4217 code. */
            currency?: string;
            /** @description Description of the group payment. */
            description?: string;
            /** @description End of the time allowed for customers to make this payment, in Unix time. Response only. */
            expiration?: number;
            /** @description ID of the Group Payment object. String starting with **gp_**. */
            id?: string;
            /** @description Merchant-defined ID. Limited to 255 characters. */
            merchant_reference_id?: string;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            payments?: components["schemas"]["Payment"][];
            /** @description Indicates the status of the group payment operation */
            status?: string;
        };
        inline_response_200_43_data: {
            id?: string;
            deleted?: boolean;
        };
        inline_response_200_52_data: {
            deleted?: boolean;
            id?: string;
        };
        inline_response_200_58_data: {
            beneficiary?: components["schemas"]["Beneficiary"];
            /**
             * @description validation status
             * @example true
             */
            validated?: boolean;
        };
        inline_response_200_59_data: {
            /**
             * @description Flag to indicate whether beneficiary deleted or not
             * @example true
             */
            deleted?: boolean;
            /**
             * @description Beneficiary token
             * @example beneficiary_008d839a9d5726ba014c3ccb21c59920
             */
            id?: string;
        };
        inline_response_200_62_data: {
            /**
             * @description Flag to indicate whether sender deleted or not
             * @example true
             */
            deleted?: boolean;
            /**
             * @description Sender token
             * @example sender_b9342620e3eb13164286485bbff9eb7b
             */
            id?: string;
        };
        inline_response_200_65_data: {
            /** @description ID of the payout. String starting with **payout_**. */
            payout_token?: string;
            /** @description ID of the uploaded file. UUID. */
            file_id?: string;
            /** @description The name of the document file. */
            file_name?: string;
            /** @description The uploaded file's extension. */
            file_extension?: string;
            /** @description The date and time when the file was successfully uploaded. Format is **YYYY-MM-DD HH:MM:SS**. */
            created_at?: string;
        };
        inline_response_200_68_data: {
            /** @description ID of the Rapyd wallet account. UUID. */
            account_id?: string;
            /** @description Amount of the transfer, in units of the currency specified in `currency`. */
            amount?: number;
            /** @description Indicates the type of balance within the Rapyd wallet account. */
            balance_type?: string;
            /** @description The currency of the transfer. Three-letter ISO 4217 code. */
            currency?: string;
            /** @description ID of the funds transfer transaction. UUID. */
            id?: string;
            /** @description A JSON object defined by the client. */
            metadata?: string;
            /** @description Phone number of the Rapyd wallet. */
            phone_number?: string;
        };
        inline_response_200_72_data: {
            /**
             * @description Flag to indicate whether contact deleted or not
             * @example true
             */
            delete?: boolean;
            /**
             * @description Contact id
             * @example beneficiary_008d839a9d5726ba014c3ccb21c59920
             */
            id?: string;
        };
        inline_response_200_73_data_elements: {
            element_name?: string;
            verified?: boolean;
        };
        inline_response_200_73_data_compliance_levels: {
            level?: number;
            elements?: components["schemas"]["inline_response_200_73_data_elements"][];
        };
        inline_response_200_73_data: {
            compliance_levels?: components["schemas"]["inline_response_200_73_data_compliance_levels"][];
        };
        inline_response_200_90_data: {
            /** @description Issuied virtual account. */
            bank_account?: Record<string, never>;
            /** @description Currency of the account. Three-letter ISO 4217 code. */
            currency?: string;
            /** @description Description of the account. */
            description?: string;
            /** @description ID of the wallet the bank account number is issued to. String starting with ewallet_. */
            ewallet?: string;
            /** @description Issuied virtual account funding instructions. */
            funding_instructions?: Record<string, never>;
            /** @description The country that the account number will be associated with. Two-letter ISO 3166-1 ALPHA-2 code. Uppercase. */
            id?: string;
            /** @description ID of this account, as provided by the merchant. Limited to 45 characters. */
            merchant_reference_id?: string;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /** @description Issuied virtual account statuts. */
            status?: string;
            /** @description Issuied virtual account transactions. */
            transactions?: components["schemas"]["CardTransaction"][];
            /** @description *Currency received by the virtual account after conversion. Uppercase. One of the following: AUD - Australian Dollar EUR - Euro GBP - Pound Sterling HKD - Hong Kong Dollar SGD - Singapore Dollar USD - US Dollar When not specified, the funds appear in the walletâ€™s currency account for the currency of the transaction.* */
            requested_currency?: string;
        };
        inline_response_200_91_data_transactions: {
            /** @description ID of the issued card transaction object. String starting with cit_. */
            id?: string;
            /** @description ID of the wallet the bank account number is issued to. String starting with ewallet_. */
            ewallet?: string;
            /** @description ID of the virtual bank account. */
            account_id?: string;
            /** @description Type of the virtual account number. */
            account_id_type?: string;
            /** @description Amount of the transaction. */
            amount?: number;
            /** @description Currency of the transaction. Three-letter ISO 4217. */
            currency?: string;
            /** @description Time of creation of the transaction, in Unix time. Response only. */
            created_at?: number;
            /** @description This field will show the initial transaction amount before conversion. */
            original_amount?: number;
            original_currency?: components["schemas"]["Currency_1"];
            /** @description This field will indicate the exchange rate applied for the currency conversion */
            fx_rate?: number;
        };
        inline_response_200_91_data: {
            /** @description ID of the issued card transaction object. String starting with cit_. */
            id?: string;
            /** @description ID of this account, as provided by the merchant. Limited to 45 characters. */
            merchant_reference_id?: string;
            /** @description ID of the wallet the bank account number is issued to. String starting with ewallet_. */
            ewallet?: string;
            /** @description Issuied virtual account. */
            bank_account?: Record<string, never> | null;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /** @description Issuied virtual account statuts. */
            status?: string;
            /** @description Description of the account. */
            description?: string;
            /** @description Issued virtual account funding instructions. */
            funding_instructions?: Record<string, never>;
            /** @description Currency of the transaction. Three-letter ISO 4217. */
            currency?: string;
            /** @description Issued virtual account transactions. */
            transactions?: components["schemas"]["inline_response_200_91_data_transactions"][];
            /** @description *Currency received by the virtual account after conversion. Uppercase. One of the following: AUD - Australian Dollar EUR - Euro GBP - Pound Sterling HKD - Hong Kong Dollar SGD - Singapore Dollar USD - US Dollar When not specified, the funds appear in the walletâ€™s currency account for the currency of the transaction.* */
            requested_currency?: string;
        };
        inline_response_200_93_data_transactions: {
            /** @description ID of the issued card transaction object. String starting with **cit_**. */
            id?: string;
            /** @description ID of the wallet the bank account number is issued to. String starting with **ewallet_**. */
            ewallet?: string;
            /** @description ID of the virtual bank account. */
            account_id?: string;
            /** @description Type of the virtual account number. */
            account_id_type?: string;
            /** @description Amount of the transaction. */
            amount?: number;
            /** @description Currency of the transaction. Three-letter ISO 4217. */
            currency?: string;
            /** @description Time of creation of the transaction, in Unix time. Response only. */
            created_at?: number;
            receiving_currency?: boolean;
        };
        inline_response_200_93_data: {
            /** @description ID of the issued card transaction object. String starting with **cit_**. */
            id?: string;
            /** @description ID of this account, as provided by the merchant. Limited to 45 characters. */
            merchant_reference_id?: string;
            /** @description ID of the wallet the bank account number is issued to. String starting with **ewallet_**. */
            ewallet?: string;
            /** @description Issued virtual account. */
            bank_account?: Record<string, never> | null;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /** @description Issued virtual account statuts. */
            status?: string;
            /** @description Description of the account. */
            description?: string;
            /** @description Issued virtual account funding instructions. */
            funding_instructions?: Record<string, never>;
            /** @description Currency of the transaction. Three-letter ISO 4217. */
            currency?: string;
            /** @description Issued virtual account transactions. */
            transactions?: components["schemas"]["inline_response_200_93_data_transactions"][];
        };
        inline_response_200_94_data: {
            /** @description ID of the account. String starting with issuing_ */
            id?: string;
            /** @description Indicates whether the account has been successfully deleted */
            deleted?: boolean;
        };
        inline_response_200_95_data: {
            /**
             * @description Indicates whether the virtual account has a SWIFT code.
             * @enum {boolean}
             */
            accept_swift?: true | false;
            /**
             * @description Type of the virtual account number.
             * @enum {string}
             */
            account_id_type?: "iban - International bank account number (IBAN)." | "clabe - CLABE number." | "null - Regular bank account number.";
            /** @description Two-letter ISO 3166-1 ALPHA-2 code for the country. code. */
            country?: string;
            /**
             * @description Type of the local bank code.
             * @enum {string}
             */
            local_bank_code_type?: "bic" | "aba" | "sort_code" | "bsb" | "cnaps" | "ifsc";
            /**
             * @description Indicates whether the virtual account has a SWIFT code.
             * @enum {boolean}
             */
            refundable?: true | false;
            /**
             * @description Indicates whether remitter details are available.
             * @enum {boolean}
             */
            remitter_details?: true | false;
            /** @description Array of currencies supported for the virtual account. Array of strings. */
            supported_currencies?: string[];
        };
        /** @description Array of objects with details of the virtual accounts. Each object contains the following fields */
        inline_response_200_103_data_bank_accounts: {
            /** @description The actual account number that was assigned to the virtual account when it was created. */
            account_id?: string;
            /** @description Type of the virtual account number, such as IBAN or CLABE. */
            account_id_type?: string;
            /** @description Two-letter ISO 3166-1 ALPHA-2 code of the country of the virtual account. */
            country_iso?: string;
            /** @description Currency of the virtual account. Three-letter ISO 4217 code. */
            currency?: string;
            /** @description ID of the Rapyd Wallet that the virtual accounts were issued to. String starting with **ewallet_**. */
            ewallet?: string;
            /** @description ID of the virtual account number object. String starting with **issuing_**. */
            issuing_id?: string;
            /**
             * @description Currency received by the virtual account after conversion.<BR>When not specified, the funds appear in the wallet’s currency account for the currency of the transaction.
             * @enum {string}
             */
            requested_currency?: "AUD" | "EUR" | "GBP" | "HKD" | "SGD" | "USD";
            /**
             * @description Indicates the status of the virtual account.
             * @enum {string}
             */
            status?: "ACT" | "CLO" | "ERR" | "REJ";
        };
        inline_response_200_103_data: {
            bank_accounts?: components["schemas"]["inline_response_200_103_data_bank_accounts"];
        };
        inline_response_200_107_data: {
            /** @description Issued virtual account. */
            bank_account?: Record<string, never>;
            /** @description The country that the account number will be associated with. Two-letter ISO 3166-1 ALPHA-2 code. Uppercase. */
            country?: string;
            /** @description Currency of the account. Three-letter ISO 4217 code. */
            currency?: string;
            /** @description Description of the account. */
            description?: string;
            /** @description ID of the wallet the bank account number is issued to. String starting with **ewallet_**. */
            ewallet?: string;
            /** @description Issued virtual account funding instructions. */
            funding_instructions?: Record<string, never>;
            /** @description The country that the account number will be associated with. Two-letter ISO 3166-1 ALPHA-2 code. Uppercase. */
            id?: string;
            /** @description ID of this account, as provided by the merchant. Limited to 45 characters. */
            merchant_reference_id?: string;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /** @description Issued virtual account statuts. */
            status?: string;
            /** @description Issued virtual account transactions. */
            transactions?: components["schemas"]["CardTransaction"][];
            /** @description *Currency received by the virtual account after conversion. Uppercase. One of the following: AUD - Australian Dollar EUR - Euro GBP - Pound Sterling HKD - Hong Kong Dollar SGD - Singapore Dollar USD - US Dollar When not specified, the funds appear in the wallet’s currency account for the currency of the transaction.* */
            requested_currency?: string;
        };
        inline_response_200_108_data: {
            /** @description ID of the issued card transaction object. String starting with **cit_**. */
            id?: string;
            /** @description ID of this account, as provided by the merchant. Limited to 45 characters. */
            merchant_reference_id?: string;
            /** @description ID of the wallet the bank account number is issued to. String starting with **ewallet_**. */
            ewallet?: string;
            /** @description Issued virtual account. */
            bank_account?: Record<string, never> | null;
            /** @description A JSON object defined by the client. */
            metadata?: Record<string, never>;
            /** @description Issued virtual account statuts. */
            status?: string;
            /** @description Description of the account. */
            description?: string;
            /** @description Issued virtual account funding instructions. */
            funding_instructions?: Record<string, never>;
            /** @description Currency of the transaction. Three-letter ISO 4217. */
            currency?: string;
            /** @description Issued virtual account transactions. */
            transactions?: components["schemas"]["inline_response_200_93_data_transactions"][];
            /** @description *Currency received by the virtual account after conversion. Uppercase. One of the following: AUD - Australian Dollar EUR - Euro GBP - Pound Sterling HKD - Hong Kong Dollar SGD - Singapore Dollar USD - US Dollar When not specified, the funds appear in the wallet’s currency account for the currency of the transaction.* */
            requested_currency?: string;
            /** @description This field will display the currency in which the transaction was originally made. */
            original_currency?: string;
            /** @description This field will show the initial transaction amount before conversion. */
            original_amount?: string;
            /** @description This field will indicate the exchange rate applied for the currency conversion */
            fx_rate?: string;
        };
        inline_response_200_109_data: {
            /** @description Name of the bank account holder. */
            account_name?: string;
            /** @description Number of the bank account. */
            account_number?: string;
            /** @description The amount of the transaction, in units of the currency defined in currency. */
            amount?: string;
            /** @description Bank identifier code, such as SWIFT, BIC, ABA, or other local identifier. */
            bank_code?: string;
            /** @description Name of the bank. */
            bank_name?: string;
            /** @description The country that the account number will be associated with. Two-letter ISO 3166-1 ALPHA-2 code. Uppercase. */
            country?: string;
            /** @description Time of creation of the transaction, in Unix time. Response only. */
            created_at?: number;
            /** @description Currency of the account. Three-letter ISO 4217 code. */
            currency?: string;
            /** @description IBAN of the virtual bank account. */
            iban?: string;
            /** @description ID that is assigned by the remitter */
            id?: string;
            /** @description ID that is assigned by the client to the transaction. */
            partner_transaction_id?: string;
            /** @description IBAN that was assigned to the Rapyd Wallet. */
            receiving_iban?: string;
            /** @description Optional information that the remitter adds to the transaction, intended for the beneficiary. Supported by some payment methods. */
            remitter_reference?: string;
            sort_code?: string;
            /** @description Indicates the status of the transfer. */
            status?: string;
            /** @description Time of update of the virtual account, in Unix time. Response only. */
            updated_at?: number;
            /** @description Time of creation of the transaction, in Unix time. Response only. */
            created_at_gw?: string;
            /** @description This field will display the currency in which the transaction was originally made. */
            original_currency?: string;
            /** @description This field will show the initial transaction amount before conversion. */
            original_amount?: string;
            /** @description This field will indicate the exchange rate applied for the currency conversion */
            fx_rate?: string;
        };
        inline_response_200_110_data: {
            /** @description ID of the virtual bank account. */
            account_id?: string;
            /** @description Type of the virtual account number. */
            account_id_type?: string;
            /** @description Amount of the transaction, in units defined in currency. */
            amount?: number;
            /** @description Timestamp for the transaction, in Unix time */
            created_at?: number;
            /** @description Currency of the account. Three-letter ISO 4217 code. */
            currency?: string;
            /** @description ID of the Rapyd Wallet that is attached to the virtual account. String starting with **ewallet_**. */
            ewallet?: string;
            /** @description ID of the transaction. String starting with **isutran_**. */
            id?: string;
        };
        inline_response_200_111_data: {
            /** @description ID Verification. */
            id?: string;
            /** @description Organization Reference Token. */
            reference_id?: string;
        };
        inline_response_200_112_data: {
            /** @description The two-letter ISO 3166-1 ALPHA-2 code for the country of the identification document. */
            country?: string;
            /** @description Type of the identification document. Two-letter code */
            type?: string;
            /** @description Name of the identification document. Two-letter code */
            name?: string;
            /** @description Boolean if back image required */
            is_back_required?: boolean;
            /** @description Boolean if address extractable */
            is_address_extractable?: boolean;
        };
        inline_response_200_113_data: {
            /** @description Code for the type of application. String starting with typ_. */
            application_type?: string;
            country?: components["schemas"]["Country_1"];
            entity_type?: components["schemas"]["EntityTypeVerify"];
        };
        inline_response_200_114_data: {
            /** @enum {string} */
            status?: "NEW" | "DON" | "EXP";
        };
        inline_response_200_116_data_application_type: {
            application_type?: string;
            entity_type?: string;
            country?: string;
        };
        inline_response_200_116_data_organization_details_merchant_customer_support: {
            url?: string;
            email?: string;
            phone_number?: string;
        };
        inline_response_200_116_data_organization_details: {
            merchant_color?: string;
            merchant_website?: string;
            merchant_logo?: string;
            merchant_design?: string;
            merchant_language?: string;
            merchant_alias?: string;
            merchant_customer_support?: components["schemas"]["inline_response_200_116_data_organization_details_merchant_customer_support"];
        };
        inline_response_200_116_data_renew_result: {
            redirect_to_app_type_page?: boolean;
            need_to_renew?: boolean;
        };
        inline_response_200_116_data: {
            /** @example happ_327bc354-2b6f-41d9-90e3-74aa7fed3287 */
            token?: string;
            application_token?: string;
            country?: string;
            rapyd_entity_token?: string;
            client_reference_id?: string;
            cancel_url?: string;
            complete_url?: string;
            phone_number?: string;
            /** @enum {number} */
            application_level?: 1 | 2;
            sell_type?: string;
            business_industry?: string;
            application_type?: components["schemas"]["inline_response_200_116_data_application_type"];
            organization_details?: components["schemas"]["inline_response_200_116_data_organization_details"];
            renew_result?: components["schemas"]["inline_response_200_116_data_renew_result"];
        };
        /** @description Contains details of the client’s customer support. To configure these fields, use the Client Portal. */
        inline_response_200_117_data_merchant_customer_support: {
            /** @description Email address. */
            email?: string;
            /** @description URL for the client's customer support service. */
            url?: string;
            /** @description Phone number for contacting the client's customer support service. */
            phone_number?: string;
        };
        /** @description Retrieve the Rapyd ID and merchant reference ID. */
        inline_response_200_117_data: {
            /** @description URL where the customer is redirected after pressing **Back to Website** to exit the hosted page. This URL overrides the `merchant_website` URL. Does not support localhost URLs. */
            cancel_url?: string;
            /** @description URL where the customer is redirected after pressing **Close** to exit the hosted page. This URL overrides the `merchant_website` URL. Does not support localhost URLs. */
            complete_url?: string;
            /** @description ID of the wallet contact. String starting with **cont_**. */
            contact?: string;
            /** @description The two-letter ISO 3166-1 ALPHA-2 code for the country of the identification document. */
            country?: string;
            /** @description ID of the Hosted Page Identity Verification object, a string starting with **hp_idv_**. */
            id?: string;
            /** @description Determines the default language of the hosted page. For a list of values, see [List Supported Languages](https://docs.rapyd.net/en/list-supported-languages.html). <BR> * When this parameter is null, the language of the user's browser is used. <BR> * If the language of the user's browser cannot be determined, the default language is English. */
            language?: string;
            /**
             * @description Client's name.
             * @example Rapyd
             */
            merchant_alias?: string;
            /** @description Color of the call-to-action (CTA) button on the hosted page.<BR> To configure this field, use the Client Portal. */
            merchant_color?: string;
            merchant_customer_support?: components["schemas"]["inline_response_200_117_data_merchant_customer_support"];
            /** @description URL for the image of the client's logo.<BR> To configure this field, use the Client Portal. */
            merchant_logo?: string;
            /** @description URL for the terms and conditions of the agreement between the client and the client’s customers.<BR>To configure this field, use the Client Portal. */
            merchant_privacy_policy?: string;
            /** @description URL for the client's terms and conditions. To configure this field, use the Client Porta */
            merchant_terms?: string;
            /** @description The URL where the customer is redirected after exiting the hosted page. Relevant when `cancel_url`, `complete_url` or both fields are not set. To configure this field, use the Client Portal. */
            merchant_website?: string;
            /** @description End of the time when the customer can use the hosted page, in Unix time. If `page_expiration` is not set, the hosted page expires 14 days after creation.<BR>**Range**: 1 minute to 30 days. */
            page_expiration?: number;
            /** @description URL of the hosted page that is shown to the customer. */
            redirect_url?: string;
            /** @description ID of the identity verification request. Must be unique for each request. Defined by the client. */
            reference_id?: string;
            /**
             * @description Determines the action that is taken on the request. One of the following:<BR>* **store** - Store the images on the Rapyd platform.<BR>* **verify** - Verify the identity of the person in the images.
             * @enum {string}
             */
            request_type?: "store" | "verify";
            /**
             * @description Status of the hosted page. One of the following:<BR>* **NEW** - The hosted page was created.<BR>* **DON** - Done. The identity verification request was submitted.<BR>* **EXP** - Expired. The hosted page expired.
             * @enum {string}
             */
            status?: "NEW" | "DON" | "EXP";
        };
        inline_response_200_118_data: {
            /** @description ID of the query request operation. UUID. */
            operation_id?: string;
            /** @description ID of the merchant, defined by the partner.. */
            partner_merchant_reference?: string;
            /** @description Unique ID of the query request, defined by the partner. */
            partner_query_reference?: string;
            /**
             * @description Status of the Card Network Lookup Service query. One of the following:<BR>* **ERROR** - The query failed.<BR>* **IN_PROGRESS** - The query is being processed. Results are not available.<BR>* **PARTIAL** - The query process is partially complete. Some results are available.<BR>* **PROCESSED** - The query process is complete. All results are available.The two-letter ISO 3166-1 ALPHA-2 code for the country of the identification document.
             * @enum {string}
             */
            status?: "IN_PROGRESS" | "ERROR" | "IN_PROGRESS" | "PARTIAL" | "PROCESSED";
        };
        /** @description Statistics about the query. */
        inline_response_200_119_data_match_stats: {
            /** @description Number of previous queries to the card network termination database that match elements of this merchant query. Does not indicate a registered match. Mastercard only. */
            query_match_count?: number;
            /** @description Total number of registered matches in the card network termination databases with elements shared with this merchant query. */
            registered_match_count?: number;
        };
        /** @description Describes the results of the query. */
        inline_response_200_119_data_matches: {
            /**
             * @description Name of the card network termination database with a match.
             * @enum {string}
             */
            card_network?: "MASTERCARD" | "VISA";
            /**
             * @description List of the data points that match this query exactly. Array of strings.
             * @example [
             *       "string1",
             *       "string2"
             *     ]
             */
            exact_match?: Record<string, never>;
            /** @description Type of match. One of the following:<BR>* **query match** - This merchant query matches elements of a previous merchant query in the card network termination database.<BR>This means that the queried merchant shares data with a merchant that was previously searched for.<BR>* **registered match** - This merchant query matches elements of a merchant termination registration in the card network termination database. This means that an acquirer terminated the contract of a merchant that shares data with the queried merchant. */
            match_type?: string;
            /**
             * @description List of the data points that partly match the query. Array of strings.
             * @example [
             *       "string1",
             *       "string2"
             *     ]
             */
            partial_match?: Record<string, never>;
        };
        /** @description Details of the merchant who is the subject of the query. */
        inline_response_200_119_data_query_info_queried_merchant: {
            /**
             * @description The category of the merchant's business.
             * @enum {string}
             */
            business_category?: "Merchant" | "Payment Facilitator" | "Independent Sales Organization" | "Marketplace" | "Staged Digital Wallet Operator" | "Sponsored Merchant";
            /** @description The "doing business as" name of the merchant.<BR>String that starts and ends with any combination of characters, whitespace, a specified range of Latin letters with diacritics, and a specific set of special characters.<BR>Length: 4-60 */
            dba_name?: string;
            /** @description The registered legal name of the merchant. */
            legal_name?: string;
            address?: components["schemas"]["v1cnltermination_query_queried_merchant_principals_address"];
            /** @description Business phone numbers of the merchant.<BR<Array of strings. Maximum - 2. Each string is a phone number in the format +[country code]/[phone number], where the forward slash (/) represents a separator between the country code and the telephone number.<BR>The plus sign before the country code is optional. The country code may only contain digits.<BR>The slash is required and must follow the country code.<BR>The telephone number may include blank spaces and hyphens (-).<BR>For example, in **+1/555 555-5555**, the country code is 1 and the telephone number is 5555555555.<BR>Length of each phone number: 8-15. */
            phone_numbers?: Record<string, never>;
            /** @description Indicates whether the merchant trades through the internet. */
            is_ecommerce?: boolean;
        };
        /** @description asd */
        inline_response_200_119_data_query_info: {
            /** @description ID of the merchant, defined by the partner. */
            partner_merchant_reference?: string;
            /** @description Unique ID of the query request, defined by the partner. */
            partner_query_reference?: string;
            queried_merchant?: components["schemas"]["inline_response_200_119_data_query_info_queried_merchant"];
        };
        /** @description Details of the registered principal owners of the merchant.<BR> Maximum - 3. */
        inline_response_200_119_data_principals: {
            /** @description The first name of the owner.<BR>String that starts and ends with any combination of characters, whitespace, a specified range of Latin letters with diacritics, and a specific set of special characters.<BR>Length: 1-35 */
            first_name?: string;
            /** @description The initial letter of the owner's middle name.<BR>String that starts and ends with any combination of characters, whitespace, a specified range of Latin letters with diacritics, and a specific set of special characters.<BR>Length: Maximum - 1 */
            middle_initial?: string;
            /** @description The family name of the owner.<BR>String that starts and ends with any combination of characters, whitespace, a specified range of Latin letters with diacritics, and a specific set of special characters.<BR>Length: 1-40 */
            last_name?: string;
            /** @description The primary email address of the merchant.<BR>String that starts with a combination of letters, numbers, ., _, %, or - before an **@** sign. After the **@** sign, a domain name with letters, numbers, ., or -, ending with a dot and a 2 to 4 letter domain type, such as **.com**. For example: **billsmith@snapphoto.com**<BR>Length: Maximum - 90 */
            email?: string;
            /** @description The phone number of the owner.<BR> Phone number in the format +[country code]/[phone number], where the forward slash (/) represents a separator between the country code and the telephone number.<BR>The plus sign before the country code is optional. The country code may only contain digits.<BR>The slash is required and must follow the country code.<BR>The telephone number may include blank spaces and hyphens (-).<BR>For example, in **+1/555 555-5555**, the country code is 1 and the telephone number is 5555555555.<BR>Length: 8-15 */
            phone_number?: string;
            address?: components["schemas"]["v1cnltermination_query_queried_merchant_principals_address"];
        };
        /** @description Data about the merchant on file in the database. */
        inline_response_200_119_data_matched_merchant: {
            /**
             * @description The category of the merchant's business.
             * @enum {string}
             */
            business_category?: "Merchant" | "Payment Facilitator" | "Independent Sales Organization" | "Marketplace" | "Staged Digital Wallet Operator" | "Sponsored Merchant";
            /** @description The "doing business as" name of the merchant.<BR>String that starts and ends with any combination of characters, whitespace, a specified range of Latin letters with diacritics, and a specific set of special characters.<BR>Length: 4-60 */
            dba_name?: string;
            /** @description The registered legal name of the merchant. */
            legal_name?: string;
            address?: components["schemas"]["v1cnltermination_query_queried_merchant_principals_address"];
            /** @description Business phone numbers of the merchant.<BR<Array of strings. Maximum - 2. Each string is a phone number in the format +[country code]/[phone number], where the forward slash (/) represents a separator between the country code and the telephone number.<BR>The plus sign before the country code is optional. The country code may only contain digits.<BR>The slash is required and must follow the country code.<BR>The telephone number may include blank spaces and hyphens (-).<BR>For example, in **+1/555 555-5555**, the country code is 1 and the telephone number is 5555555555.<BR>Length of each phone number: 8-15. */
            phone_numbers?: Record<string, never>;
            /**
             * @description Merchant category codes of the merchant's business.<BR>Array of strings. Numbers or US letters. Maximum - 5 items. <BR>Length of each string: 4.
             * @example [
             *       "5411",
             *       "5812"
             *     ]
             */
            mcc?: Record<string, never>;
            /** @description Web addresses associated with the merchant.<BR>Array of strings. Numbers or US letters. Maximum - 3 items. For example: ["https://fourstarmarket.com", "https://fourstarmarket.net"]<BR>Length: Maximum - 40 */
            url?: Record<string, never>;
        };
        /** @description Registration information in the card network's termination database about the merchant and the acquirer that listed the merchant. */
        inline_response_200_119_data_registration_info: {
            /** @description End date of the merchant's contract with the acquirer. */
            contract_end_date?: number;
            /** @description start date of the merchant's contract with the acquirer. */
            contract_start_date?: number;
            /** @description Reason that the merchant's contract with the acquirer was terminated. */
            primary_registration_reason?: string;
            /** @description ID of the acquirer that listed the merchant. */
            registered_by_acquirer_id?: string;
            /** @description Name of the acquirer that listed the merchant. */
            registered_by_acquirer_name?: string;
            /** @description Region of the acquirer that listed the merchant. */
            registered_by_acquirer_region?: string;
        };
        inline_response_200_119_data: {
            match_stats?: components["schemas"]["inline_response_200_119_data_match_stats"];
            matches?: components["schemas"]["inline_response_200_119_data_matches"];
            query_info?: components["schemas"]["inline_response_200_119_data_query_info"];
            search_criteria?: components["schemas"]["v1cnltermination_query_search_criteria"];
            principals?: components["schemas"]["inline_response_200_119_data_principals"];
            /**
             * @description Status of the Card Network Lookup Service query. One of the following:<BR>* **ERROR** - The query failed.<BR>* **IN_PROGRESS** - The query is being processed. Results are not available.<BR>* **PARTIAL** - The query process is partially complete. Some results are available.<BR>* **PROCESSED** - The query process is complete. All results are available.The two-letter ISO 3166-1 ALPHA-2 code for the country of the identification document.
             * @enum {string}
             */
            status?: "IN_PROGRESS" | "ERROR" | "IN_PROGRESS" | "PARTIAL" | "PROCESSED";
            matched_merchant?: components["schemas"]["inline_response_200_119_data_matched_merchant"];
            registration_info?: components["schemas"]["inline_response_200_119_data_registration_info"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getPaymentMethodsTypesByCountry: {
        parameters: {
            query?: {
                /** @description currency */
                currency?: components["schemas"]["Currency_1"];
            };
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description Two-letter ISO 3166-1 ALPHA-2 code for the country. Uppercase. */
                countryId: components["schemas"]["Country_1"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description SUCCESS */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200"];
                };
            };
        };
    };
    getPaymentMethodTypeRequiredFields: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description Payment method type Id */
                pmtId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description SUCCESS */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_1"];
                };
            };
        };
    };
    listPayments: {
        parameters: {
            query?: {
                /** @description The ID of the payment created before the first payment you want to retrieve. String starting with **payment_**. */
                created_after?: string;
                /** @description The ID of the payment created after the last payment you want to retrieve. String starting with **payment_**. */
                created_before?: string;
                /**
                 * @description Filters the list for payments related to the specified customer.
                 * @example cus_753511a533a727cf28509812b4683edd
                 */
                customer?: components["schemas"]["Customer"];
                /** @description Filters the list for payments related to the specified destination card. */
                destination_card?: string;
                /** @description The ID of the payment created after the last payment you want to retrieve. String starting with payment_. Deprecated. */
                ending_before?: string;
                /**
                 * @description Filters the list for payments related to the specified wallet.
                 * @example ewallet_61be0e6ad9f57121cff47a63902282ac
                 */
                ewallet?: string;
                /** @description When true, includes only group payments in the response. When false, excludes group payments from the response. Default is false. */
                group?: boolean;
                /** @description Filters according to the invoice. String starting with invoice_. */
                invoice?: string;
                /**
                 * @description The maximum number of payments to return. Range, 1-100. Default is 10.
                 * @example 2
                 */
                limit?: string;
                /**
                 * @description Filters the list for payments related to the specified payment method.
                 * @example us_mastercard_card
                 */
                payment_method?: string;
                /** @description Filters the list for payments related to the specified order. */
                order?: string;
                /** @description The ID of a payment in the list. The list begins with the payment that was created next after the payment with this ID. Use this filter to get the next page of results. Relevant when ending_before is not used. String starting with payment_. */
                starting_after?: string;
                /** @description Filters the list for payments related to the specified subscription. */
                subscription?: string;
                /** @description Merchant-defined ID. */
                merchant_reference_id?: string;
            };
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Payments Fetched successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_2"];
                };
            };
        };
    };
    createPayment: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["v1_payments_body"];
            };
        };
        responses: {
            /** @description Payment was created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_3"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    retrievePayment: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the payment. String starting with **payment_**.
                 * @example payment_bebddc4b4139d5a0f13cdcd4046cf2c1
                 */
                paymentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Payment object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_3"];
                };
            };
            /** @description Bad Request. Payment not found for given ID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400"];
                };
            };
        };
    };
    updatePayment: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the payment. String starting with payment_.
                 * @example payment_36724a4ea01b438fd24ac3ab00b29150
                 */
                paymentId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["payments_paymentId_body"];
            };
        };
        responses: {
            /** @description payment updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_3"];
                };
            };
        };
    };
    cancelPayment: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the payment. String starting with payment_.
                 * @example payment_548969fc5a0bf89da3cec70a1529338c
                 */
                paymentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description payment canceled successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_3"];
                };
            };
        };
    };
    capturePayment: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the payment. String starting with **payment_**.
                 * @example payment_548969fc5a0bf89da3cec70a1529338c
                 */
                paymentId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["paymentId_capture_body"];
            };
        };
        responses: {
            /** @description payment captured successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_3"];
                };
            };
        };
    };
    completePayment: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["payments_completePayment_body"];
            };
        };
        responses: {
            /** @description payment completed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_3"];
                };
            };
        };
    };
    getHostedPagePayment: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description ID of the checkout page. String starting with **checkout_**. */
                checkout_token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieved a checkout page */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_4"];
                };
            };
        };
    };
    generateHostedPagePayment: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["v1_checkout_body"];
            };
        };
        responses: {
            /** @description Create a checkout page that makes a payment. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_4"];
                };
            };
        };
    };
    getSubscriptionList: {
        parameters: {
            query?: {
                /**
                 * @description Method of billing. One of the following, pay_automatically, send_invoice.
                 * @example pay_automatically
                 */
                billing?: string;
                /**
                 * @description ID of the customer. String starting with cus_
                 * @example cus_494eae8b99f697107d7384
                 */
                customer?: string;
                /**
                 * @description Status of the subscription. One of the following, active, canceled, trialing
                 * @example 10
                 */
                status?: string;
                /**
                 * @description ID of a 'product' object. The product must have type set to service. String starting with product_. Filter for one product at a time.
                 * @example product_494eae8b99f697107d738
                 */
                product?: string;
                /**
                 * @description The ID of a record in the list. The list begins with the record that was created next after the record with this ID. Use this filter to get the next page of results. Relevant when ending_before is not used.
                 * @example sub_8cc8c5a385732bb8bdd3e7b8e87985a0
                 */
                starting_after?: string;
                /**
                 * @description The ID of a record in the list. The list ends with the last record that was created before the record with this ID. Use this filter to get the previous page of results.
                 * @example sub_8cc8c5a385732bb8bdd3e7b8e87985a0
                 */
                ending_before?: string;
                /**
                 * @description The maximum number of subscriptions to return. Range, 1-100. Default is 10.
                 * @example 23
                 */
                limit?: string;
            };
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of subscriptions, */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_5"];
                };
            };
        };
    };
    createSubscription: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["payments_subscriptions_body"];
            };
        };
        responses: {
            /** @description Create a subscription */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_6"];
                };
            };
        };
    };
    getSubscription: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the subscription. String starting with sub_.
                 * @example sub_494eae8b99f697107d738
                 */
                subscriptionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get subscription details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_6"];
                };
            };
        };
    };
    updateSubscription: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the subscription. String starting with **sub_**.
                 * @example sub_494eae8b99f697107d738
                 */
                subscriptionId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["subscriptions_subscriptionId_body"];
            };
        };
        responses: {
            /** @description The subscription after updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_6"];
                };
            };
        };
    };
    cancelSubscription: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the subscription. String starting with **sub_**.
                 * @example sub_494eae8b99f697107d738
                 */
                subscriptionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The canceled subscription */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_6"];
                };
            };
        };
    };
    deleteSubscriptionDiscount: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the subscription. String starting with **sub_**.
                 * @example sub_494eae8b99f697107d738
                 */
                subscriptionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description discount was deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_7"];
                };
            };
        };
    };
    createSubscriptionByHostedPage: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["checkout_subscriptions_body"];
            };
        };
        responses: {
            /** @description Subscription hosted Page was created. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_8"];
                };
            };
        };
    };
    completeSubscriptionCycle: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description ID of the subscription. String starting with sub_.
                 * @example sub_494eae8b99f697107d738
                 */
                subscriptionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The subscription */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_9"];
                };
            };
        };
    };
    simulateStartNewCycle: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description ID of the subscription. String starting with sub_.
                 * @example sub_494eae8b99f697107d738
                 */
                subscriptionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Subscription details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_9"];
                };
            };
        };
    };
    listPlans: {
        parameters: {
            query?: {
                /** @description The ID of the plan created after the last plan you want to retrieve. */
                ending_before?: string;
                /**
                 * @description The maximum number of plans to return. Range 1-100. Default is 10.
                 * @example 15
                 */
                limit?: string;
                /**
                 * @description The ID of the plan created before the first plan you want to retrieve.
                 * @example 10
                 */
                starting_after?: string;
            };
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of plans */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_10"];
                };
            };
        };
    };
    createPlan: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["v1_plans_body"];
            };
        };
        responses: {
            /** @description The created plan */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_11"];
                };
            };
        };
    };
    retrievePlan: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the plan.
                 * @example plan_494eae8b99f697107d738
                 */
                planId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The Plan */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_11"];
                };
            };
        };
    };
    updatePlan: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the plan.
                 * @example plan_494eae8b99f697107d738
                 */
                planId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["plans_planId_body"];
            };
        };
        responses: {
            /** @description The Plan after updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_11"];
                };
            };
        };
    };
    deletePlan: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the plan.
                 * @example plan_494eae8b99f697107d738
                 */
                planId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Rapyd response with operation result, and plan id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_12"];
                };
            };
        };
    };
    getProductsList: {
        parameters: {
            query?: {
                /** @description The ID of the products created after the last product you want to retrieve. */
                ending_before?: string;
                /**
                 * @description The maximum number of products to return. Range 1-100. Default is 10.
                 * @example 15
                 */
                limit?: string;
                /**
                 * @description The ID of the product created before the first products you want to retrieve.
                 * @example 10
                 */
                starting_after?: string;
            };
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of products */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_13"];
                };
            };
        };
    };
    createProduct: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["v1_products_body"];
            };
        };
        responses: {
            /** @description The created Product */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_14"];
                };
            };
        };
    };
    getProduct: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the product.
                 * @example product_0d9dc6be69c769560fe913f3b086d8ca
                 */
                productsId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The Product */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_14"];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_1"];
                };
            };
        };
    };
    updateProduct: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the product.
                 * @example product_0d9dc6be69c769560fe913f3b086d8ca
                 */
                productsId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["products_productsId_body"];
            };
        };
        responses: {
            /** @description The created Product */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_14"];
                };
            };
        };
    };
    deleteProduct: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the product.
                 * @example product_0d9dc6be69c769560fe913f3b086d8ca
                 */
                productsId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Rapyd response with operation result, and product id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_12"];
                };
            };
        };
    };
    listSubscriptionItem: {
        parameters: {
            query?: {
                /** @description The ID of the subscription item created after the last subscription item you want to retrieve. */
                ending_before?: number;
                /**
                 * @description The maximum number of subscription items to return. Range 1-100. Default is 10.
                 * @example 15
                 */
                limit?: number;
                /**
                 * @description The ID of the subscription item created before the first subscription item you want to retrieve.
                 * @example 10
                 */
                starting_after?: string;
                /**
                 * @description ID of the subscription.
                 * @example sub_0de9c79c1e2beee09499dc8220493d59
                 */
                subscription?: string;
            };
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of subscriptions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_15"];
                };
            };
        };
    };
    createSubscriptionItem: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["v1_subscription_items_body"];
            };
        };
        responses: {
            /** @description The created subscription */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_16"];
                };
            };
        };
    };
    retrieveSubscriptionItem: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description ID of the subscription item. String starting with **subi_**. */
                subscriptionItemId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The created subscription */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_16"];
                };
            };
        };
    };
    updateSubscriptionItem: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description ID of the subscription item. String starting with **subi_**. */
                subscriptionItemId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["subscription_items_subscriptionItemId_body"];
            };
        };
        responses: {
            /** @description The created subscription */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_16"];
                };
            };
        };
    };
    deleteSubscriptionItem: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description ID of the subscription item. String starting with **subi_**. */
                subscriptionItemId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The created subscription */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_17"];
                };
            };
        };
    };
    usageRecordSummaries: {
        parameters: {
            query?: {
                /**
                 * @description The maximum number of usage records that are returned. Range is 1-100. Default is 10.
                 * @example 15
                 */
                limit?: number;
                /** @description The latest date and time of the returned usage records. Format is in Unix time. */
                ending_before?: number;
                /** @description The earliest date and time of the returned usage records. Format is in Unix time. */
                starting_after?: number;
            };
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the subscription item. String starting with **subi_**.
                 * @example subi_3682d7bce9339f7b7c9e4185c7d1486f
                 */
                subscriptionItemId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The subscription after updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_18"];
                };
            };
        };
    };
    createSubscriptionItemUsageRecord: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the subscription item. String starting with **subi_**.
                 * @example subi_3682d7bce9339f7b7c9e4185c7d1486f
                 */
                subscriptionItemId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["subscriptionItemId_usage_records_body"];
            };
        };
        responses: {
            /** @description The subscription after updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_19"];
                };
            };
        };
    };
    getSubscriptionDiscountById: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description discount Id */
                discountId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get discount details of a subscription by Discount Id. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_20"];
                };
            };
        };
    };
    listInvoices: {
        parameters: {
            query?: {
                /**
                 * @description ID of the customer. String starting with **cus_**.
                 * @example cus_753511a533a727cf28509812b4683edd
                 */
                customer?: components["schemas"]["Customer"];
                /** @description Date that the invoice was created. */
                date?: string;
                /** @description The date payment is due on this invoice. This value is calculated from the date the invoice is created, plus the number of days specified in the days_until_due field. Format is in Unix time. */
                due_date?: string;
                /** @description The ID of the invoice created after the last invoice you want to retrieve. card. */
                ending_before?: string;
                /** @description The maximum number of invoices to return. Range 1-100. Default is 10. */
                limit?: string;
                /** @description The ID of the invoice created before the first invoice you want to retrieve. */
                starting_after?: string;
                /** @description ID of the subscription. String starting with sub_. */
                subscription?: string;
            };
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invoices Fetched successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_21"];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_2"];
                };
            };
        };
    };
    createInvoice: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["v1_invoices_body"];
            };
        };
        responses: {
            /** @description Invoice created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_21"];
                };
            };
            /** @description Bad Request. Invalid subscription trial end. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_3"];
                };
            };
        };
    };
    retrieveInvoice: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description The ID of the invoice that you want to retrieve.
                 * @example invoice_8a7200327e12b98cf5b038a3fdb2f642
                 */
                invoiceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invoice Fetched successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_22"];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_2"];
                };
            };
        };
    };
    updateInvoice: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description The ID of the invoice that you want to updated.
                 * @example invoice_8a7200327e12b98cf5b038a3fdb2f642
                 */
                invoiceId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["invoices_invoiceId_body"];
            };
        };
        responses: {
            /** @description Invoice updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_22"];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_2"];
                };
            };
        };
    };
    deleteInvoice: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description The ID of the invoice that you want to delete.
                 * @example invoice_8a7200327e12b98cf5b038a3fdb2f642
                 */
                invoiceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invoice deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_23"];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_2"];
                };
            };
        };
    };
    voidInvoice: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description The ID of the invoice that you want to void.
                 * @example invoice_8a7200327e12b98cf5b038a3fdb2f642
                 */
                invoiceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invoice successfully set to void */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_22"];
                };
            };
            /** @description Bad Request. Invalid invoice ID. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_4"];
                };
            };
        };
    };
    finalizeInvoice: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the invoice you want to pay.
                 * @example invoice_8a7200327e12b98cf5b038a3fdb2f642
                 */
                invoiceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Finalized Invoice, */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_22"];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_2"];
                };
            };
        };
    };
    payInvoice: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the invoice you want to pay.
                 * @example invoice_8a7200327e12b98cf5b038a3fdb2f642
                 */
                invoiceId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["invoiceId_pay_body"];
            };
        };
        responses: {
            /** @description The Invoice was paid. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_22"];
                };
            };
        };
    };
    markInvoiceUncollectible: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the invoice you want to mark uncollectible. String starting with **invoice_**.
                 * @example invoice_8a7200327e12b98cf5b038a3fdb2f642
                 */
                invoiceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The Invoice was marked as uncollectible. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_22"];
                };
            };
            /** @description Bad Request. Invoice status was not 'open'. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_5"];
                };
            };
        };
    };
    getInvoiceLines: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the invoice. String starting with **invoice_**.
                 * @example invoice_8a7200327e12b98cf5b038a3fdb2f642
                 */
                invoiceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The invoice lines were retrieved. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_22"];
                };
            };
            /** @description Bad Request. Invalid invoice ID. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_4"];
                };
            };
        };
    };
    getUpcomingInvoice: {
        parameters: {
            query: {
                /**
                 * @description ID of the customer whose invoice you want to retrieve.
                 * @example cus_4ed89a9c556fb200997e974f75895dc9
                 */
                customer: string;
                /**
                 * @description Three-letter ISO 4217 code for the currency. Required when the invoice is not linked to a specific subscription.
                 * @example USD
                 */
                currency?: string;
            };
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The upcoming invoice was retrieved. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_22"];
                };
            };
            /** @description Bad Request. Invalid customer for invoice ID. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_6"];
                };
            };
        };
    };
    getInvoiceLinesUpcomingInvoice: {
        parameters: {
            query: {
                /**
                 * @description ID of the customer whose invoice you want to retrieve.
                 * @example cus_4ed89a9c556fb200997e974f75895dc9
                 */
                customer: string;
                /**
                 * @description Three-letter ISO 4217 code for the currency. Required when the invoice is not linked to a specific subscription.
                 * @example USD
                 */
                currency?: string;
            };
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The lines from the upcoming invoice were retrieved. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_22"];
                };
            };
            /** @description Bad Request. Invalid customer for invoice ID. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_6"];
                };
            };
        };
    };
    listInvoiceItems: {
        parameters: {
            query?: {
                /**
                 * @description Date of creation of the invoice items.
                 * @example 1731245103
                 */
                created?: string;
                /**
                 * @description ID of the customer.
                 * @example cus_325b5edb6a897e8bd4f90c734d4b4be9
                 */
                customer?: string;
                /**
                 * @description ID of the invoice.
                 * @example invoice_61f092e4d9b5f500fa909eec13e3eddc
                 */
                invoice?: string;
                /**
                 * @description The maximum number of invoice items to return. Range: 1-100. Default is 10.
                 * @example 10
                 */
                limit?: string;
                /**
                 * @description The ID of the invoice item created after the last invoice item you want to retrieve.
                 * @example ii_03bae0ba6b2f2d0d85b6078af82d9c04
                 */
                ending_before?: string;
                /**
                 * @description The ID of the invoice item created before the first invoice item you want to retrieve.
                 * @example ii_03bae0ba6b2f2d0d85b6078af82d9c03
                 */
                starting_after?: string;
            };
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invoice items listed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_24"];
                };
            };
            /** @description Bad Request. Invalid invoice item ID. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_7"];
                };
            };
        };
    };
    createInvoiceItem: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["v1_invoice_items_body"];
            };
        };
        responses: {
            /** @description Invoice item created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_24"];
                };
            };
            /** @description Bad Request. Invalid `amount` value. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_8"];
                };
            };
        };
    };
    getInvoiceItem: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                invoiceItem: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invoice item retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_24"];
                };
            };
            /** @description Bad Request. Invoice item ID not found. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_7"];
                };
            };
        };
    };
    updateInvoiceItem: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                invoiceItem: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["invoice_items_invoiceItem_body"];
            };
        };
        responses: {
            /** @description Invoice item updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_24"];
                };
            };
            /** @description Bad Request. Invalid invoice item ID. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_9"];
                };
            };
        };
    };
    deleteInvoiceItem: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                invoiceItem: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invoice item deleted successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_25"];
                };
            };
            /** @description Bad Request. Invoice item was previously deleted. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_10"];
                };
            };
        };
    };
    paymentLink: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description ID of the payment link. String starting with **hp_reuse_**. */
                paymentLink: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Payment Link Fetched successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_26"];
                };
            };
        };
    };
    createGroupPayment: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["payments_group_payments_body"];
            };
        };
        responses: {
            /** @description get group payment details after creating it. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_27"];
                };
            };
            /** @description Bad Request. Group payment not found for given ID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_11"];
                };
            };
        };
    };
    retrieveGroupPaymentId: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description ID of the group payment. String starting with **gp_** */
                groupPaymentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description get group payment details By group payment Id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_27"];
                };
            };
            /** @description Bad Request. Group payment not found for given ID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_12"];
                };
            };
        };
    };
    deletegroupPaymentId: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description ID of the group payment. String starting with **gp_** */
                groupPaymentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Cancel group payment by group_payment Id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_27"];
                };
            };
            /** @description Bad Request. Group payment ID not found. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_13"];
                };
            };
        };
    };
    listEscrowReleases: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description ID of the payment. String starting with **payment_**. */
                payment: string;
                /**
                 * @description ID of the escrow. String starting with **escrow_**.
                 * @example escrow_df0a95af70e696947706cb59bd53d46f
                 */
                escrow: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Escrow details after specifying it. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_28"];
                };
            };
            /** @description Error in card validation of payment with escrow. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_14"];
                };
            };
        };
    };
    releaseFundsFromEscrow: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description ID of the payment. String starting with **payment_**. */
                payment: string;
                /**
                 * @description ID of the escrow. String starting with **escrow_**.
                 * @example 15
                 */
                escrow: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["escrow_escrow_releases_body"];
            };
        };
        responses: {
            /** @description Escrow details after creating it. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_29"];
                };
            };
            /** @description Error in card validation of payment with escrow. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_15"];
                };
            };
        };
    };
    getEscrow: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description ID of the payment. String starting with **payment_**. */
                payment: string;
                /**
                 * @description ID of the escrow. String starting with **escrow_**.
                 * @example escrow_df0a95af70e696947706cb59bd53d46f
                 */
                escrow: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Escrow details after specifying it. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_28"];
                };
            };
            /** @description Error in card validation of payment with escrow. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_14"];
                };
            };
        };
    };
    allRefunds: {
        parameters: {
            query?: {
                /**
                 * @description The ID of the refund created after the last refund you want to retrieve. String starting with refund_.
                 * @example refund_dabd1608796554
                 */
                ending_before?: string;
                /**
                 * @description The maximum number of refunds to return. Range, 1-100. Default is 10.
                 * @example 12
                 */
                limit?: string;
                /**
                 * @description The ID of the refund created before the first refund you want to retrieve. String starting with **refund_**.
                 * @example refund_dabd1608796554
                 */
                starting_after?: string;
            };
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List Contacts for a Rapyd Wallet */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_30"];
                };
            };
        };
    };
    requestTotal_createRefund: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["v1_refunds_body"];
            };
        };
        responses: {
            /** @description List Contacts for a Rapyd Wallet */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_31"];
                };
            };
        };
    };
    simulateCompleteRefund: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["refunds_complete_body"];
            };
        };
        responses: {
            /** @description List Contacts for a Rapyd Wallet */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_31"];
                };
            };
        };
    };
    refundGroupPayment: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["refunds_group_payments_body"];
            };
        };
        responses: {
            /** @description List Contacts for a Rapyd Wallet */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_32"];
                };
            };
        };
    };
    refundByToken: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the 'refund' object you want to retrieve. String starting with **refund_**.
                 * @example refund_a09a2e16352f56a27f5937f87d0b8705
                 */
                refundId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List Contacts for a Rapyd Wallet */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_31"];
                };
            };
        };
    };
    updateRefund: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the 'refund' object you want to retrieve. String starting with **refund_**.
                 * @example refund_a09a2e16352f56a27f5937f87d0b8705
                 */
                refundId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["refunds_refundId_body"];
            };
        };
        responses: {
            /** @description List Contacts for a Rapyd Wallet */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_31"];
                };
            };
        };
    };
    getApplePaySession: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApplePayObject"];
            };
        };
        responses: {
            /** @description Apple Pay response fetched successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_33"];
                };
            };
        };
    };
    getDisputesListByOrgId: {
        parameters: {
            query?: {
                /**
                 * @description The ID of the dispute created before the first dispute you want to retrieve. String starting with dispute_.
                 * @example dispute_3e4862ba69665f04da530154f1019998
                 */
                starting_after?: string;
                /**
                 * @description The ID of the dispute created after the last dispute you want to retrieve. String starting with dispute_.
                 * @example dispute_3e4862ba69665f04da530154f1019998
                 */
                ending_before?: string;
                /** @description The maximum number of disputes to return. Range is 1-100. Default is 10. */
                limit?: string;
                /** @description Filters the list for disputes with the specified dispute status. */
                status?: "ACT" | "RVW" | "PRA" | "ARB" | "LOS" | "WIN" | "REV";
                /**
                 * @description The ID of the payment that is linked to the dispute. String starting with payment_.
                 * @example payment_ce936f36d93bc9307a3d
                 */
                payment?: string;
            };
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description disputes fetched successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_34"];
                };
            };
        };
    };
    getDispute: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the dispute you want to retrieve. String starting with dispute_.
                 * @example dispute_3e4862ba69665f04da530154f1019998
                 */
                disputeId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get dispute details by dispute ID. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_35"];
                };
            };
        };
    };
    listCustomer: {
        parameters: {
            query?: {
                /** @description The ID of the customer created before the first customer you want to retrieve */
                starting_after?: string;
                /** @description The ID of the customer created after the last customer you want to retrieve */
                ending_before?: string;
                /** @description The maximum number of customers to return. Range is 1-100. Default is 10 */
                limit?: string;
            };
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description get customers details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_36"];
                };
            };
        };
    };
    createCustomer: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["v1_customers_body"];
            };
        };
        responses: {
            /** @description Customer was created successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_37"];
                };
            };
            /** @description Bad Request. Wallet ID is already used by another customer. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_16"];
                };
            };
        };
    };
    retrieveCustomer: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description customer Id */
                customerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Customer details by customer ID. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_37"];
                };
            };
            /** @description Bad Request. Customer not found for given ID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_17"];
                };
            };
        };
    };
    updateCustomer: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description customer Id */
                customerId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomerRequest"];
            };
        };
        responses: {
            /** @description customer was updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_37"];
                };
            };
            /** @description Bad Request. Customer was not found for given ID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_18"];
                };
            };
        };
    };
    deleteCustomer: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description customer Id */
                customerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description customer was deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_23"];
                };
            };
            /** @description The request tried to delete a customer, but the operation failed. Corrective action is to Determine whether the customer was alread deleted, and why there were multiple requests to delete it. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_19"];
                };
            };
        };
    };
    getCustomerDiscountById: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description discount Id
                 * @example dis_d41d8cd98f00b204e9800998ecf8427e
                 */
                discountId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get discount details of a customer by Discount Id. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_38"];
                };
            };
        };
    };
    deleteCustomerDiscount: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description customer Id */
                customerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description discount was deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_39"];
                };
            };
        };
    };
    createAddress: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["v1_addresses_body"];
            };
        };
        responses: {
            /** @description Creates an address. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_40"];
                };
            };
            /** @description Invalid phone number format. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_20"];
                };
            };
        };
    };
    GetAddress: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the address object. String starting with **address_**.
                 * @example address_71f1048a5837feb31b594f9d3d9b6623
                 */
                addressId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieves an address. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_40"];
                };
            };
            /** @description Invalid phone number format. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_21"];
                };
            };
        };
    };
    UpdateAddress: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the address object. String starting with **address_**.
                 * @example address_71f1048a5837feb31b594f9d3d9b6623
                 */
                addressId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Address"];
            };
        };
        responses: {
            /** @description Update an address. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_40"];
                };
            };
            /** @description Invalid phone number format. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_20"];
                };
            };
        };
    };
    DeleteAddress: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the address object. String starting with **address_**.
                 * @example address_71f1048a5837feb31b594f9d3d9b6623
                 */
                addressId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Removes an address. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_40"];
                };
            };
            /** @description Address that is linked to an object cannot be removed. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_22"];
                };
            };
        };
    };
    getCustomerPaymentMethods: {
        parameters: {
            query?: {
                category?: components["schemas"]["Category"];
                /** @description The ID of the coupon created before the first coupon you want to retrieve */
                starting_after?: string;
                /** @description The ID of the coupon created after the last coupon you want to retrieve */
                ending_before?: string;
                /** @description The maximum number of coupons to return. Range is 1-100. Default is 10 */
                limit?: string;
                /** @description The type of payment method to find. */
                type?: string;
            };
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description customer Id */
                customerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description get customer details By customer Id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_41"];
                };
            };
        };
    };
    createCustomerPaymentMethod: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description customer Id */
                customerId: string;
            };
            cookie?: never;
        };
        /** @description customer to add */
        requestBody: {
            content: {
                "application/json": components["schemas"]["customerId_payment_methods_body"];
            };
        };
        responses: {
            /** @description Payment method was created for this customer successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_42"];
                };
            };
            /** @description Bad Request. Customer was not found for given ID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_23"];
                };
            };
        };
    };
    getCustomerPaymentMethod: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description customer Id */
                customerId: string;
                /** @description Pmt Id */
                pmtId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description get customer details By customer Id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_42"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_24"];
                };
            };
        };
    };
    updateCustomerPaymentMethod: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description customer Id */
                customerId: string;
                /** @description Pmt Id */
                pmtId: string;
            };
            cookie?: never;
        };
        /** @description customer to add */
        requestBody: {
            content: {
                "application/json": components["schemas"]["CustomerPaymentMethod"];
            };
        };
        responses: {
            /** @description customer was updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_42"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_24"];
                };
            };
        };
    };
    deleteCustomerPaymentMethod: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description customer Id */
                customerId: string;
                /** @description Pmt Id */
                pmtId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description payment method was deleted for this customer */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_43"];
                };
            };
            /** @description Bad Request. Customer was not found for given ID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_25"];
                };
            };
        };
    };
    retrieveSKU: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the 'sku' object. String starting with **sku_**.
                 * @example sku_a6d86bdc6f3a7ef6cb51de5a5678493f
                 */
                skuId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The requested SKU object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_44"];
                };
            };
        };
    };
    updateSKU: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the 'sku' object. String starting with sku_.
                 * @example sku_a6d86bdc6f3a7ef6cb51de5a5678493f
                 */
                skuId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["skus_skuId_body"];
            };
        };
        responses: {
            /** @description The requested SKU object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_44"];
                };
            };
        };
    };
    deleteSKU: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the 'sku' object. String starting with **sku_**.
                 * @example sku_a6d86bdc6f3a7ef6cb51de5a5678493f
                 */
                skuId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The SKU deletion result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_23"];
                };
            };
        };
    };
    listSKU: {
        parameters: {
            query?: {
                /**
                 * @description Determines whether the query returns active SKUs or inactive SKUs. Default is true.
                 * @example true
                 */
                active?: boolean;
                /** @description The ID of the SKU created before the first SKU you want to retrieve. */
                starting_after?: number;
                /** @description The ID of the SKU created after the last SKU you want to retrieve. */
                ending_before?: number;
                /**
                 * @description The maximum number of SKUs to return. Range 1-100. Default is 10.
                 * @example 50
                 */
                limit?: number;
            };
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of SKUs, */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_45"];
                };
            };
        };
    };
    createSKU: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["v1_skus_body"];
            };
        };
        responses: {
            /** @description SKU created. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_44"];
                };
            };
        };
    };
    listOrder: {
        parameters: {
            query?: {
                /**
                 * @description The maximum number of orders to return. Range - 1-100. Default is 10.
                 * @example 10
                 */
                limit?: string;
                /**
                 * @description The ID of the order created after the last order you want to retrieve.
                 * @example order_d1ce10b16cd4350d12c75232628e49bd
                 */
                ending_before?: string;
                /**
                 * @description The ID of the order created before the first order you want to retrieve.
                 * @example order_d1ce10b16cd4350d12c75232628e49bd
                 */
                starting_after?: string;
            };
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of orders. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_46"];
                };
            };
        };
    };
    createOrder: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["v1_orders_body"];
            };
        };
        responses: {
            /** @description The created order. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_47"];
                };
            };
        };
    };
    retrieveOrder: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description ID of the order. String starting with **order_**. */
                orderId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description SUCCESS */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_47"];
                };
            };
        };
    };
    updateOrder: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description ID of the order. String starting with **order_**. */
                orderId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["orders_orderId_body"];
            };
        };
        responses: {
            /** @description SUCCESS */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_47"];
                };
            };
        };
    };
    returnsOrder: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description ID of the order. String starting with order_. */
                orderId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["orderId_returns_body"];
            };
        };
        responses: {
            /** @description SUCCESS */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_48"];
                };
            };
        };
    };
    payOrder: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description ID of the order. String starting with **order_**. */
                orderId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["orderId_pay_body"];
            };
        };
        responses: {
            /** @description SUCCESS */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_47"];
                };
            };
        };
    };
    listOrderReturn: {
        parameters: {
            query?: {
                /**
                 * @description The maximum number of returns to list. Range - 1-100. Default is 10.
                 * @example 10
                 */
                limit?: string;
                /**
                 * @description The ID of the order created after the last order you want to retrieve a return from.
                 * @example orre_d1ce10b16cd4350d12c75232628e49bd
                 */
                ending_before?: string;
                /**
                 * @description The ID of the order created before the first order you want to retrieve a return from.
                 * @example orre_d1ce10b16cd4350d12c75232628e49bd
                 */
                starting_after?: string;
                /** @description Filters the list for orders related to the specified order. */
                tokens?: string[];
            };
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of orders. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_49"];
                };
            };
        };
    };
    retrieveOrderReturn: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description ID of the return. String starting with **orre_**. */
                orderReturnsId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description SUCCESS */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_48"];
                };
            };
        };
    };
    listCoupon: {
        parameters: {
            query?: {
                /** @description The ID of the coupon created before the first coupon you want to retrieve. */
                starting_after?: string;
                /** @description The ID of the coupon created after the last coupon you want to       retrieve. */
                ending_before?: string;
                /** @description The maximum number of coupons to return. Range is 1-100. Default is 10 */
                limit?: string;
            };
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of coupons */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_50"];
                };
            };
        };
    };
    createCoupon: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        /** @description Coupon to add */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Coupon"];
            };
        };
        responses: {
            /** @description Coupon was created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_51"];
                };
            };
        };
    };
    retrieveCoupon: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description coupon ID. String starting with **coupon_**. */
                couponId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get Coupon details By coupon Id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_51"];
                };
            };
        };
    };
    updateCoupon: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description coupon ID. String starting with **coupon_**. */
                couponId: string;
            };
            cookie?: never;
        };
        /** @description Coupon to add. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Coupon"];
            };
        };
        responses: {
            /** @description Coupon was updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_51"];
                };
            };
        };
    };
    deleteCoupon: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description Coupon ID. String starting with **coupon_**. */
                couponId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Coupon was deleted. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_52"];
                };
            };
        };
    };
    getPayoutMethodTypesDetails: {
        parameters: {
            query: {
                /**
                 * @description Country of the beneficiary. Two-letter ISO 3166-1 ALPHA-2 code. Uppercase.
                 * @example US
                 */
                beneficiary_country: string;
                /**
                 * @description Type of entity for the beneficiary. One of the following, **individual** | **company**
                 * @example company
                 */
                beneficiary_entity_type: string;
                /** @description Amount of the payout, in units of the currency that the beneficiary is receiving. Decimal. */
                payout_amount: number;
                /**
                 * @description Currency received by the beneficiary. Three-letter ISO 4217 code. Uppercase.
                 * @example USD
                 */
                payout_currency: string;
                /**
                 * @description Country of the sender. Two-letter ISO 3166-1 ALPHA-2 code. Uppercase.
                 * @example US
                 */
                sender_country: string;
                /**
                 * @description Currency that the sender is paying with. Three-letter ISO 4217 code. Uppercase.
                 * @example USD
                 */
                sender_currency: string;
                /**
                 * @description Type of entity for the sender. One of the following: **individual** | **company**
                 * @example company
                 */
                sender_entity_type: string;
            };
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description The type of the payout method. Set to the name of a payout method listed in the response to List Payout Method Types. The two-letter prefix must match the beneficiary country code.
                 * @example us_visa_card
                 */
                pomt: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description payout method types details fetched successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_53"];
                };
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listPayouts: {
        parameters: {
            query?: {
                /**
                 * @description Filters according to the beneficiary ID. String starting with **beneficiary_**.
                 * @example beneficiary_504f2e8d5618dfaa4a6e73c632f3029b
                 */
                beneficiary?: string;
                /**
                 * @description The ID of the payout created before the first payout you want to retrieve. String starting with **payout_**.
                 * @example
                 */
                created_after?: string;
                /**
                 * @description The ID of the payout created after the last payout you want to retrieve. String starting with **payout_**.
                 * @example
                 */
                created_before?: string;
                /**
                 * @description The ID of a payout in the list. The list ends with the payout that was created before the payout with this ID. Use this filter to get the previous page of results. String starting with **payout_**. Deprecated.
                 * @example
                 */
                ending_before?: string;
                /**
                 * @description Filters according to the wallet ID. String starting with **ewallet_**.
                 * @example ewallet_61be0e6ad9f57121cff47a63902282ac
                 */
                ewallet?: string;
                /**
                 * @description The maximum number of payouts to return. Range: 1-100. Default is 10.
                 * @example 2
                 */
                limit?: string;
                /**
                 * @description Filters according to the merchant reference ID.
                 * @example
                 */
                merchant_reference_id?: string;
                /**
                 * @description Filters according to the type of payout method. The two-letter prefix must match the beneficiary country code.
                 * @example ph_cebuana_lhuillier_cash
                 */
                payout_method_type?: string;
                /**
                 * @description Filters according to the sender ID. String starting with **sender_**.
                 * @example sender_ba47352b13411b7fc9d6654b953de832
                 */
                sender?: string;
                /**
                 * @description Filters according to the country of the sender. Two-letter ISO 3166-1 ALPHA-2 code.
                 * @example PH
                 */
                sender_country?: components["schemas"]["Country"];
                /**
                 * @description Filters according to the currency that the sender is paying with. Three-letter ISO 4217 code.
                 * @example PHP
                 */
                sender_currency?: components["schemas"]["Currency"];
                /**
                 * @description The ID of a payout in the list. The list begins with the payout that was created next after the payout with this ID. Use this filter to get the next page of results. Relevant when ending_before is not used. String starting **payout_**. Deprecated
                 * @example
                 */
                starting_after?: string;
            };
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Payouts Fetched Successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_54"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createPayout: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["v1_payouts_body"];
            };
        };
        responses: {
            /** @description payout created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_55"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createMassPayout: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Mass payout created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_56"];
                };
            };
        };
    };
    createBeneficiary: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["payouts_beneficiary_body"];
            };
        };
        responses: {
            /** @description Beneficiary Created Successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_57"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createExtendedBeneficiary: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["payouts_extended_beneficiary_body"];
            };
        };
        responses: {
            /** @description Beneficiary Created Successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_57"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    validateBeneficiary: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["beneficiary_validate_body"];
            };
        };
        responses: {
            /** @description Beneficiary validated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_58"];
                };
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getBeneficiary: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the 'beneficiary' object. String starting with **beneficiary_**.
                 * @example beneficiary_008d839a9d5726ba014c3ccb21c59920
                 */
                beneficiaryId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Beneficiary retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_57"];
                };
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateBeneficiary: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the 'beneficiary' object. String starting with **beneficiary_**.
                 * @example beneficiary_008d839a9d5726ba014c3ccb21c59920
                 */
                beneficiaryId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["beneficiary_beneficiaryId_body"];
            };
        };
        responses: {
            /** @description Beneficiary updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_57"];
                };
            };
            /** @description Bad Request. Beneficary ID not found. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_26"];
                };
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteBeneficiary: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the 'beneficiary' object. String starting with **beneficiary_**.
                 * @example beneficiary_008d839a9d5726ba014c3ccb21c59920
                 */
                beneficiaryId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Beneficiary deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_59"];
                };
            };
            /** @description Bad Request. Beneficary ID not found. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_26"];
                };
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    simulateCompletePayout: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the payout. String starting with **payout_**.
                 * @example payout_548969fc5a0bf89da3cec70a1529338c
                 */
                payoutToken: string;
                /**
                 * @description The payout amount. Decimal, including the correct number of decimal places for the currency exponent, as defined in ISO 2417:2015.
                 * @example 10
                 */
                amount: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `Retrieve Sender - individual` response includes additional fields for the `ca_general_bank` payout method. The `Retrieve Sender - company` response includes an additional field for the `us_ach_bank` payout method. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_55"];
                };
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    beneficiaryTokenizationPage: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["disburse_beneficiary_body"];
            };
        };
        responses: {
            /** @description Beneficiary tokenization page created. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_60"];
                };
            };
            /** @description Bad Request. Payout category was not valid. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_27"];
                };
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    confirmPayout: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the payout. String starting with **payout_**.
                 * @example payout_548969fc5a0bf89da3cec70a1529338c
                 */
                payoutToken: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `Retrieve Sender - individual` response includes additional fields for the `ca_general_bank` payout method. The `Retrieve Sender - company` response includes an additional field for the `us_ach_bank` payout method. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_55"];
                };
            };
            /** @description Bad Request. Payout not found for given ID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_28"];
                };
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createSender: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["payouts_sender_body"];
            };
        };
        responses: {
            /** @description Sender Created Successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_61"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPayer: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the Sender object. String starting with **sender_**.
                 * @example sender_548969fc5a0bf89da3cec70a1529338c
                 */
                senderId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The 'Retrieve Sender - individual' response includes additional fields for the 'ca_general_bank' payout method. The 'Retrieve Sender - company' response includes an additional field for the **us_ach_bank** payout method. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_61"];
                };
            };
            /** @description Bad Request. Sender not found for given ID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_29"];
                };
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deletePayer: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the `sender` object. String starting with **sender_**.
                 * @example sender_b9342620e3eb13164286485bbff9eb7b
                 */
                senderId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Sender deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_62"];
                };
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPayoutMethodTypes: {
        parameters: {
            query?: {
                /**
                 * @description Filters the type of entity for the payer. One of the following: **individual** | **company**
                 * @example company
                 */
                sender_entity_type?: string;
                /**
                 * @description Country of the beneficiary. Two-letter ISO 3166-1 ALPHA-2 code.
                 * @example US
                 */
                beneficiary_country?: string;
                /**
                 * @description Currency received by the beneficiary. Three-letter ISO 4217 code.
                 * @example USD
                 */
                payout_currency?: string;
                /**
                 * @description Currency that the sender is paying with. Three-letter ISO 4217 code.
                 * @example USD
                 */
                sender_currency?: string;
                /**
                 * @description Country of the sender. Two-letter ISO 3166-1 ALPHA-2 code. Note: This field does not appear in the response.
                 * @example US
                 */
                sender_country?: string;
                /**
                 * @description Filters the type of entity for the beneficiary. One of the following: **individual** | **company**
                 * @example individual
                 */
                beneficiary_entity_type?: string;
                /**
                 * @description The category of payout method. One of the following: bank, card, cash, rapyd_ewallet, ewallet
                 * @example bank
                 */
                category?: string;
                /** @description Indicates whether the payout can be canceled. Relevant when category is cash. */
                is_cancelable?: boolean;
                /** @description Indicates whether the payout must be made at a specific physical location. Relevant when category is cash. */
                is_location_specific?: boolean;
                /** @description Indicates whether the payout expires if not completed. Relevant when category is cash. */
                is_expirable?: boolean;
                /** @description The name of a payout method in the list. The list begins with the record that was created next after the record with this payout method. Use this filter to get the next page of results. Relevant when ending_before is not used. */
                starting_after?: string;
                /** @description The name of a payout method in the list. The list ends with the last record that was created before the record with this payout method. Use this filter to get the previous page of results. */
                ending_before?: string;
                /**
                 * @description The maximum number of payout methods to return. Range: 1-100. Default is 10.
                 * @example 5
                 */
                limit?: string;
            };
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description payout method types fetched successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_63"];
                };
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPayout: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the payout. String starting with **payout_**.
                 * @example payout_548969fc5a0bf89da3cec70a1529338c
                 */
                payoutId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Payout object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_55"];
                };
            };
            /** @description Bad Request. Payout not found for given ID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_30"];
                };
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updatePayout: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the payout. String starting with **payout_**.
                 * @example payout_548969fc5a0bf89da3cec70a1529338c
                 */
                payoutId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["payouts_payoutId_body"];
            };
        };
        responses: {
            /** @description payout updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_55"];
                };
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    cancelPayout: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the payout. String starting with **payout_**.
                 * @example payout_548969fc5a0bf89da3cec70a1529338c
                 */
                payoutId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description payout canceled successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_55"];
                };
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    simulatePayoutReturnedStatus: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description ID of the payout. String starting with **payout_**. */
                payout: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Displays the payout's details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_64"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    uploadDocumentsToPayout: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **multipart/form-data**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
                /** @description Use the `-F` or `--form` parameter to define the path to the document file on your local machine. Supported file types include '*.pdf', '*.doc', '*.docx', '.*csv', '*.jpeg', '*.jpg', '*.gif', '*.png'. Format of input must follow the `multipart/form-data` protocol. Use the `files` parameter to upload multiple files.<BR>**Note**<BR> * Maximum number of files that can be uploaded in one request is 10.<BR>* Maximum size of files that can be uploaded in one request is 20 MB.<BR>* Document file name should be up to 200 characters long. */
                file: string;
            };
            path: {
                /** @description ID of the payout. String starting with **payout_**. */
                payout: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The following parameters are returned for each file that was uploaded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_65"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listDocumentsOfPayout: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description ID of the payout. String starting with **payout_**. */
                payout: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The following parameters are returned for each file that was uploaded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_65"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteDocumentsOfPayout: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description ID of the payout. String starting with **payout_**. */
                payout: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a **SUCCESS** status. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_66"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getDocumentOfPayout: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description ID of the payout. String starting with **payout_**. */
                payout: string;
                /** @description ID of the specific document file. UUID. */
                file_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The following parameters are returned for the file that was uploaded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_65"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteDocumentOfPayout: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description ID of the payout. String starting with **payout_**. */
                payout: string;
                /** @description ID of the specific document file. UUID. */
                file_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a **SUCCESS** status. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_66"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    fundsTransfer: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["account_transfer_body"];
            };
        };
        responses: {
            /** @description Transacton properties */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_67"];
                };
            };
        };
    };
    setFundsTransferResponse: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["transfer_response_body"];
            };
        };
        responses: {
            /** @description Transaction properties */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_67"];
                };
            };
        };
    };
    addFundsToWalletAccount: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["account_deposit_body"];
            };
        };
        responses: {
            /** @description Returns details on the funds that were added to the account. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_68"];
                };
            };
        };
    };
    detailsOfAddFundstoWalletAccount: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description ID of the 'Add Funds to Wallet Account' request, from the `id` field in the data object of the response. UUID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns details of an 'Add Funds' Request. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_68"];
                };
            };
        };
    };
    withdrawFundsFromWalletAccount: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["account_withdraw_body"];
            };
        };
        responses: {
            /** @description Returns details on the funds that were removed from the account. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_68"];
                };
            };
        };
    };
    getDetailsOfRemoveFundsRequest: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description ID of the 'Remove Funds From Wallet Account' request, from the `id` field in the `data` object of the response. UUID. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns details on the funds that were removed from the account via a specific request. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_68"];
                };
            };
        };
    };
    putFundsOnHold: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["balance_hold_body"];
            };
        };
        responses: {
            /** @description Funds put on hold. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_69"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_31"];
                };
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEwalletContacts: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the Rapyd Wallet that this contact is associated with. String starting with **ewallet_**.
                 * @example ewallet_16feaaa27c852f30214dd7b3b359e88c
                 */
                ewalletId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List Contacts for a Rapyd Wallet, */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_70"];
                };
            };
            /** @description Bad Request. Customer was not found for given ID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_32"];
                };
            };
        };
    };
    createEwalletContact: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the Rapyd Wallet that this contact is associated with. String starting with **ewallet_**.
                 * @example ewallet_16feaaa27c852f30214dd7b3b359e88c
                 */
                ewalletId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ewalletId_contacts_body"];
            };
        };
        responses: {
            /** @description List Contacts for a Rapyd Wallet, */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_71"];
                };
            };
            /** @description Bad Request. Customer was not found for given ID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_33"];
                };
            };
        };
    };
    getEwalletContact: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the Rapyd Wallet that this contact is associated with. String starting with **ewallet_**.
                 * @example ewallet_16feaaa27c852f30214dd7b3b359e88c
                 */
                ewalletId: string;
                /** @description One of two values. either ID of the contact - String starting with the prefix **cont_** or Contact reference ID. */
                contactId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a contact for an existing Rapyd Wallet. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_71"];
                };
            };
            /** @description Bad Request. Customer was not found for given ID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_34"];
                };
            };
        };
    };
    updateEwalletContact: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the Rapyd Wallet that this contact is associated with. String starting with **ewallet_**.
                 * @example ewallet_16feaaa27c852f30214dd7b3b359e88c
                 */
                ewalletId: string;
                /** @description ID of the contact. String starting with the prefix **cont_**. */
                contactId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Contact"];
            };
        };
        responses: {
            /** @description Retrieve a contact for an existing Rapyd Wallet. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_71"];
                };
            };
            /** @description Bad Request. Customer was not found for given ID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_35"];
                };
            };
        };
    };
    deleteEwalletContact: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the Rapyd Wallet that this contact is associated with. String starting with **ewallet_**.
                 * @example ewallet_16feaaa27c852f30214dd7b3b359e88c
                 */
                ewalletId: string;
                /** @description ID of the contact. String starting with the prefix **cont_**. */
                contactId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a contact for an existing Rapyd Wallet. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_72"];
                };
            };
            /** @description Bad Request. Contact was not found for given ID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_36"];
                };
            };
        };
    };
    getEwalletContactComplianceLevels: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the Rapyd Wallet that this contact is associated with. String starting with **ewallet_**.
                 * @example ewallet_16feaaa27c852f30214dd7b3b359e88c
                 */
                ewalletId: string;
                /** @description ID of the contact. String starting with **cont_**. */
                contactId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Verify the compliance status of a personal contact. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_73"];
                };
            };
            /** @description Bad Request. Customer was not found for given ID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_37"];
                };
            };
        };
    };
    getCardIssuingList: {
        parameters: {
            query?: {
                /**
                 * @description ID of a wallet contact. String starting with **cont_**.
                 * @example cont_c34bd6bfd9575f6f7b06647999a93126
                 */
                contact?: string;
                /** @description Page number to retrieve. */
                page_number?: number;
                /** @description Number of results per page. */
                page_size?: number;
                /** @description Start date of card creation. */
                creation_start_date?: number;
                /** @description End date of card creation. */
                creation_end_date?: number;
                /** @description Start date of card activation. */
                activation_start_date?: number;
                /** @description End date of card activation. */
                activation_end_date?: number;
                /** @description Card program token. */
                card_program?: string;
                /** @description Card status. */
                status?: string;
                /** @description Is card allow delete. */
                allow_deleted?: boolean;
            };
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of cards. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_75"];
                };
            };
        };
    };
    issueCard: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["issuing_cards_body"];
            };
        };
        responses: {
            /** @description Returns card details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_76"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCardIssuingDetails: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of a cardId. String starting with **ci_**.
                 * @example card_c34bd6bfd9575f6f7b06647999a93126
                 */
                cardId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description get Card details By card Id. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_77"];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_2"];
                };
            };
        };
    };
    activateCard: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["cards_activate_body"];
            };
        };
        responses: {
            /** @description List Contacts for a Rapyd Wallet. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_78"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    hostedActivateCard: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["issuing_activate_card_body"];
            };
        };
        responses: {
            /** @description Lists the details of the hosted page. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_79"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    hostedCardPIN: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["issuing_pin_body"];
            };
        };
        responses: {
            /** @description Lists the details of the PIN management hosted page. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_80"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    modifyCard: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["cards_personalize_body"];
            };
        };
        responses: {
            /** @description List Contacts of a Rapyd Wallet. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_78"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateCardStatus: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["cards_status_body"];
            };
        };
        responses: {
            /** @description List Contacts for a Rapyd Wallet, */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_78"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCardIssuingTransactions: {
        parameters: {
            query: {
                /**
                 * @description Timestamp of the last transaction or later, in Unix time.
                 * @example 1608796554
                 */
                end_date?: string;
                /**
                 * @description Transactions greater than a specific amount.
                 * @example 200
                 */
                min_amount?: string;
                /**
                 * @description Transactions smaller than a specific amount.
                 * @example 1000
                 */
                max_amount?: string;
                /**
                 * @description Filters the results to return only transactions that have this string as part of the name or location.
                 * @example Don Joe
                 */
                merchant_name_search?: string;
                /**
                 * @description ID of the transaction, as appears in the array of transactions in the response to 'Retrieve Virtual Account History'.
                 * @example 20
                 */
                page_size: string;
                /** @description Page number to retrieve. */
                page_number: string;
                /**
                 * @description ID of the transaction, as appears in the array of transactions in the response to 'Retrieve Virtual Account History'.
                 * @example 1608796554
                 */
                start_date?: string;
            };
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the issued card. String starting with **card_**.
                 * @example card_5004bc56594a31fb9a48b9b88c2d6f48
                 */
                cardId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a list of transactions for a specific issued card. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_81"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCardIssuingTransaction: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description Card id
                 * @example card_5004bc56594a31fb9a48b9b88c2d6f48
                 */
                cardId: string;
                /**
                 * @description Card transaction id
                 * @example cit_8d8a34d280ff02b0bd218ac6ede21931
                 */
                transactionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns issued card transaction details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_82"];
                };
            };
        };
    };
    setPINCode: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["cards_pin_body"];
            };
        };
        responses: {
            /** @description Returns card details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_83"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addCardtoGooglePay: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description ID of the card. String starting with **card_**. */
                card_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["card_tokens_google_pay_body"];
            };
        };
        responses: {
            /** @description Returns `PaymentInstrumentData` and `UserAddress`. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_84"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createCardToken: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["collect_card_body"];
            };
        };
        responses: {
            /** @description Card Token created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_85"];
                };
            };
            /** @description No card payment methods available in the country for the merchant. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_38"];
                };
            };
        };
    };
    simulateBlockCard: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["cards_simulate_block_body"];
            };
        };
        responses: {
            /** @description Returns card details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_86"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    simulateCardTransactionAuthorizationRequestEEA: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["cards_authorization_body"];
            };
        };
        responses: {
            /** @description Returns card and transaction details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_87"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    simulateCardTransactionAuthorizationReversalEEA: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["cards_reversal_body"];
            };
        };
        responses: {
            /** @description Returns card and transaction details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_88"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    simulateClearingCardTransactionEEA: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["cards_clearing_body"];
            };
        };
        responses: {
            /** @description Returns card clearing and transaction details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_89"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    simulateCardRefundEEA: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["cards_refund_body"];
            };
        };
        responses: {
            /** @description Returns card refund and transaction details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_89"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    SimulateCardTransactionAdjustmentEEA: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["cards_adjustment_body"];
            };
        };
        responses: {
            /** @description Returns card adjustment and transaction details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_89"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createVirtualAccount: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["v1_virtual_accounts_body"];
            };
        };
        responses: {
            /** @description Virtual Accounts */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_90"];
                };
            };
        };
    };
    simulateBankTransferToVirtualAccount: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["virtual_accounts_transactions_body"];
            };
        };
        responses: {
            /** @description Bank transfer details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_91"];
                };
            };
        };
    };
    retrieveVirtualAccount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description ID of the Virtual Account Number object. String starting with issuing_.
                 * @example issuing_16feaaa27c852f30214dd7b3b359e88c
                 */
                virtualAccountId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Virtual Accounts */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_92"];
                };
            };
        };
    };
    updateRequestedCurrency: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the Virtual Account Number object. String starting with **issuing_**.
                 * @example issuing_16feaaa27c852f30214dd7b3b359e88c
                 */
                virtualAccountId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["virtual_accounts_virtualAccountId_body"];
            };
        };
        responses: {
            /** @description Returns the requested currency and bank account data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_93"];
                };
            };
        };
    };
    closeIssuing: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the virtual account. String starting with issuing_.
                 * @example issuing_16feaaa27c852f30214dd7b3b359e88c
                 */
                virtualAccountId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Virtual Account */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_94"];
                };
            };
        };
    };
    capabilitiesOfVirtualAccounts: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description Two-letter ISO 3166-1 ALPHA-2 code of the country. */
                country: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns capabilities of virtual accounts. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_95"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getDailyRate: {
        parameters: {
            query: {
                /** @description Determines the type of transaction that the currency exchange applies to. One of the following - payment, payout */
                action_type: string;
                /** @description Amount of the currency exchange transaction, in units of the fixed-side currency in Decimal. */
                amount?: number;
                /** @description Defines the currency purchased in the currency exchange transaction. Three-letter ISO 4217 code in Uppercase. */
                buy_currency: string;
                /** @description The date when the rate is applicable. Today or earlier. Format YYYY-MM-DD */
                date?: string;
                /** @description Indicates whether the rate is fixed for the currency defined by buy_currency or sell_currency. One of the following - buy, sell. */
                fixed_side?: string;
                /** @description Defines the currency sold in the currency exchange transaction. Three-letter ISO 4217 code in Uppercase. */
                sell_currency: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve fixed daily rate */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_96"];
                };
            };
        };
    };
    getUsers: {
        parameters: {
            query?: {
                /** @description Phone number of the Rapyd Wallet in E.164 format. */
                phone_number?: string;
                /** @description Email address of the wallet owner. */
                email?: string;
                /** @description Wallet ID defined by the customer or end user. */
                ewallet_reference_id?: string;
                /** @description Page number to retrieve. If `page_number` is not specified, page 1 is retrieved. */
                page_number?: number;
                /** @description Number of results per page. */
                page_size?: number;
                /** @description Type of wallet - company, person, client. */
                type?: string;
                min_balance?: number;
                currency?: string;
            };
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of eWallets, */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_97"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createUser: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["v1_ewallets_body"];
            };
        };
        responses: {
            /** @description Rapyd wallet created. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_98"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUser: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the wallet. String starting with **ewallet_**.
                 * @example ewallet_95feaa629caa5ef64c49e5c24b29171d
                 */
                ewalletToken: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve the details of a Rapyd Wallet. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_98"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updatedUser: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description ID of the wallet. String starting with **ewallet_**. */
                ewalletToken: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ewallets_ewalletToken_body"];
            };
        };
        responses: {
            /** @description Created Rapyd Wallet, */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_98"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteUser: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description ID of the wallet. String starting with **ewallet_**. */
                ewalletToken: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Wallet was deleted. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_66"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateEwalletStatus: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description ID of the Rapyd Wallet. String starting with **ewallet_**. Required when phone number is not used. */
                ewalletToken: string;
                /** @description Status of the wallet. One of the following: ACT - Active, DIS - Disabled, CLO - Close. */
                status: "ACT" | "DIS" | "CLO";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Operations status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_66"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    setAccountLimit: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the Rapyd Wallet that this contact is associated with. String starting with **ewallet_**.
                 * @example ewallet_16feaaa27c852f30214dd7b3b359e88c
                 */
                walletId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["account_limits_body"];
            };
        };
        responses: {
            /** @description List Contacts for Rapyd Wallet Accounts. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_99"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    removeAccountLimit: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the Rapyd Wallet that this contact is associated with. String starting with **ewallet_**.
                 * @example ewallet_16feaaa27c852f30214dd7b3b359e88c
                 */
                walletId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Coupon was deleted. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_100"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUserAccounts: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the Rapyd Wallet that this contact is associated with. String starting with **ewallet_**.
                 * @example ewallet_16feaaa27c852f30214dd7b3b359e88c
                 */
                walletId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List accounts related to the Rapyd Wallet, */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_99"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUserTransactions: {
        parameters: {
            query: {
                /**
                 * @description The updated wallet balance after successful completion of the transaction.
                 * @example 3422
                 */
                balance: number;
                /**
                 * @description Three-letter ISO 4217 code for the currency of the transactions. Uppercase.
                 * @example 1608796554
                 */
                currency?: string;
                /**
                 * @description Timestamp of the last transaction or later, in Unix time.
                 * @example 1000
                 */
                end_date?: string;
                /**
                 * @description The ID of the wallet transaction created after the last wallet transaction you want to retrieve. String starting with **wt_**.
                 * @example wt_dc03d2d4d73bbdfb30cc0def279d9ed9
                 */
                ending_before?: string;
                /**
                 * @description Page number to retrieve.
                 * @example 23
                 */
                page_number?: string;
                /**
                 * @description Number of results per page.
                 * @example 20
                 */
                page_size: string;
                /**
                 * @description Timestamp of the first transaction or earlier, in Unix time.
                 * @example 1608796554
                 */
                start_date?: string;
                /**
                 * @description The ID of the wallet transaction created before the first wallet transaction you want to retrieve. String starting with **wt_**.
                 * @example wt_dc03d2d4d73bbdfb30cc0def279d9ed9
                 */
                starting_after?: string;
                /**
                 * @description Type of transaction.
                 * @example payout_funds_in
                 */
                type?: string;
            };
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the wallet. String starting with **ewallet_**.
                 * @example ewallet_95feaa629caa5ef64c49e5c24b29171d
                 */
                walletId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of all transactions related to a wallet. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_101"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUserTransactionDetails: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the wallet. String starting with **ewallet_**.
                 * @example ewallet_95feaa629caa5ef64c49e5c24b29171d
                 */
                walletId: string;
                /**
                 * @description ID of the transaction, from the response to List Wallet Transactions. String starting with wt_.
                 * @example wt_8029af385b9614ac6e70f44aea3383b8
                 */
                transactionId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve the details of a wallet transaction. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_102"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    virtualAccountsByRapydWallet: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description ID of the Rapyd Wallet that the virtual accounts were issued to. String starting with **ewallet_**. */
                ewallet: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns capabilities of virtual accounts. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_103"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getFXRate: {
        parameters: {
            query: {
                /** @description Determines the type of transaction that the currency exchange applies to. One of the following - **payment**, **payout**. */
                action_type: string;
                /** @description Amount of the currency exchange transaction, in units of the fixed-side currency in Decimal. */
                amount?: number;
                /** @description Defines the currency purchased in the currency exchange transaction. Three-letter ISO 4217 code in Uppercase. */
                buy_currency: string;
                /** @description The date when the rate is applicable. Today or earlier. Format **YYYY-MM-DD** */
                date?: string;
                /** @description Indicates whether the rate is fixed for the currency defined by buy_currency or sell_currency. One of the following - **buy**, **sell**. */
                fixed_side?: string;
                /** @description Defines the currency sold in the currency exchange transaction. Three-letter ISO 4217 code in Uppercase. */
                sell_currency: string;
            };
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieves fixed daily rate */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_104"];
                };
            };
        };
    };
    getWebhook: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description The webhook ID. String starting with **wh_**.
                 * @example wh_6fcbb2a25aba03de3545f7d36e06cce8
                 */
                webhook: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieves webhook */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_105"];
                };
            };
        };
    };
    resendWebhook: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description The webhook ID. String starting with **wh_**.
                 * @example wh_6fcbb2a25aba03de3545f7d36e06cce8
                 */
                webhook: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Resends webhook */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_105"];
                };
            };
        };
    };
    listWebhooks: {
        parameters: {
            query?: {
                /** @description The earliest date and time when the object was created, in Unix time (seconds). */
                from_created_at?: string;
                /** @description The maximum number of objects to return. Range: 1-1000. */
                limit?: number;
                /** @description Page number for pagination. */
                page?: string;
                /** @description Status of the webhook. One of the following: <BR> * **NEW** (new) - The webhook was created and has not yet been sent successfully. <BR> * **CLO** (closed) - The webhook was sent successfully.<BR> * **ERR** (error) - Attempts were made to send the webhook, but the maximum number of retries was  reached. The automatic retry process failed. The webhook was not sent. <BR> * **RET** (retried) - The webhook was resent. */
                status?: string;
                /** @description The type of webhook. */
                type?: string;
                /** @description The latest date and time when the object was created, in Unix time (seconds). */
                to_created_at?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Resends webhook */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_106"];
                };
            };
        };
    };
    createIssuing: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["issuing_bankaccounts_body"];
            };
        };
        responses: {
            /** @description Virtual Account, */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_107"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    simulateCompleteBankAccountIssuingTransaction: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["bankaccounts_bankaccounttransfertobankaccount_body"];
            };
        };
        responses: {
            /** @description List Contacts for a Rapyd Wallet, */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_108"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getRemitterDetails: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the Virtual Account Number object. String starting with **issuing_**.
                 * @example issuing_16feaaa27c852f30214dd7b3b359e88c
                 */
                virtualAccountId: string;
                /**
                 * @description ID of the transaction, as appears in the array of transactions in the response to 'Retrieve Virtual Account History'.
                 * @example isutran_59599bcba9ab9c79113f88cade1ed655
                 */
                transaction_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List Contacts for a Rapyd Wallet, */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_109"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    retrieveIssuingByRapydToken: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the Virtual Account Number object. String starting with **issuing_**.
                 * @example issuing_16feaaa27c852f30214dd7b3b359e88c
                 */
                virtualAccountId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Virtual Account, */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_108"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateReceivingCurrency: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the Virtual Account Number object. String starting with **issuing_**.
                 * @example issuing_16feaaa27c852f30214dd7b3b359e88c
                 */
                virtualAccountId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["bankaccounts_virtualAccountId_body"];
            };
        };
        responses: {
            /** @description Returns the requested currency and bank account data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_93"];
                };
            };
        };
    };
    retrieveIssuingTransaction: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /**
                 * @description ID of the Virtual Account Number object. String starting with **issuing_**.
                 * @example issuing_16feaaa27c852f30214dd7b3b359e88c
                 */
                virtualAccountId: string;
                /**
                 * @description ID of the transaction, as appears in the array of transactions in the response to 'Retrieve Virtual Account History'.
                 * @example isutran_59599bcba9ab9c79113f88cade1ed655
                 */
                transactionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List Contacts for a Rapyd Wallet, */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_110"];
                };
            };
            /** @description bad input parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createPaymentLink: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["collect_payments_body"];
            };
        };
        responses: {
            /** @description Payment Link Fetched successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_26"];
                };
            };
        };
    };
    verifyIdentity: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["v1_identities_body"];
            };
        };
        responses: {
            /** @description Retrieve the Rapyd ID and merchant reference ID. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_111"];
                };
            };
            /** @description Bad Request. Customer was not found for given ID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_39"];
                };
            };
        };
    };
    getKycIdVerificationSupportedDocTypes: {
        parameters: {
            query: {
                /**
                 * @description Two-letter ISO 3166-1 ALPHA-2 code for the country. Uppercase.
                 * @example US
                 */
                country: components["schemas"]["Country_1"];
            };
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List Contacts for a Rapyd Wallet */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_112"];
                };
            };
        };
    };
    getApplicationTypesByCountry: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description Two-letter ISO 3166-1 ALPHA-2 code for the country. Uppercase. */
                country: components["schemas"]["Country_1"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List types of identity verification applications by country. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_113"];
                };
            };
        };
    };
    getApplicationStatus: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description ID of the application. String starting with app_. */
                application: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List types of identity verification applications by country. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_114"];
                };
            };
        };
    };
    createHostedApplicationToken: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["applications_hosted_body"];
            };
        };
        responses: {
            /** @description Hosted application details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_115"];
                };
            };
        };
    };
    getHostedApplicationByToken: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description ID of the Rapyd Verify application. String starting with happ_. */
                verifyAppId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Hosted application details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_116"];
                };
            };
        };
    };
    identityVerificationPage: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["hosted_idv_body"];
            };
        };
        responses: {
            /** @description Returns details on the Identity Verification Page. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_117"];
                };
            };
            /** @description Bad Request. Invalid contact type. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_40"];
                };
            };
        };
    };
    initiateMerchantQuery: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["cnl_termination_query_body"];
            };
        };
        responses: {
            /** @description Validates the data of the request. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_118"];
                };
            };
            /** @description Bad Request. Invalid fields. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_41"];
                };
            };
        };
    };
    retrieveQueryResults: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path: {
                /** @description Timestamp for the request, in Unix time (seconds). */
                partner_query_reference: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Displays the query results. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_119"];
                };
            };
            /** @description Bad Request. Invalid fields. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_400_42"];
                };
            };
        };
    };
    listSupportedLanguages: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieves fixed daily rate */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_120"];
                };
            };
        };
    };
    listCountries: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of supported countries. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_121"];
                };
            };
        };
    };
    listCurrencies: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique access key provided by Rapyd for each authorized user. */
                access_key: string;
                /** @description Indicates that the data appears in JSON format. Set to **application/json**. */
                "Content-Type": string;
                /** @description A unique key that prevents the platform from creating the same object twice. */
                idempotency?: string;
                /** @description Random string. Recommended length: 8-16 characters. */
                salt: string;
                /** @description Signature calculated for each request individually. See [Request Signatures](https://docs.rapyd.net/en/request-signatures.html). */
                signature: string;
                /** @description Timestamp for the request, in Unix time (seconds). */
                timestamp: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of currencies. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["inline_response_200_122"];
                };
            };
        };
    };
}

export type Account = components["schemas"]["Account"];
export type AccountDepositBody = components["schemas"]["account_deposit_body"];
export type AccountLimitsBody = components["schemas"]["account_limits_body"];
export type AccountTransferBody = components["schemas"]["account_transfer_body"];
export type AccountWithdrawBody = components["schemas"]["account_withdraw_body"];
export type ActivateCard = NonNullable<operations["activateCard"]["parameters"]["header"]>;
export type ActivateCardResponse = components["schemas"]["inline_response_200_78"];
export type AddCardtoGooglePay = NonNullable<operations["addCardtoGooglePay"]["parameters"]["header"]>;
export type AddCardtoGooglePayResponse = components["schemas"]["inline_response_200_84"];
export type AddCardtoGooglePayResponseUserAddress = components["schemas"]["AddCardtoGooglePayResponse_UserAddress"];
export type AddFundsToWalletAccount = NonNullable<operations["addFundsToWalletAccount"]["parameters"]["header"]>;
export type AddFundsToWalletAccountResponse = components["schemas"]["inline_response_200_68"];
export type Address = components["schemas"]["Address"];
export type Address1 = components["schemas"]["Address_1"];
export type AddressResponse = components["schemas"]["AddressResponse"];
export type AllRefunds = NonNullable<operations["allRefunds"]["parameters"]["header"]>;
export type AllRefundsResponse = components["schemas"]["inline_response_200_30"];
export type ApplePayObject = components["schemas"]["ApplePayObject"];
export type ApplePayObjectResponse = components["schemas"]["ApplePayObjectResponse"];
export type ApplicationsHostedBody = components["schemas"]["applications_hosted_body"];
export type BalanceHoldBody = components["schemas"]["balance_hold_body"];
export type BankaccountsBankaccounttransfertobankaccountBody = components["schemas"]["bankaccounts_bankaccounttransfertobankaccount_body"];
export type BankaccountsVirtualAccountIdBody = components["schemas"]["bankaccounts_virtualAccountId_body"];
export type Beneficiary = components["schemas"]["Beneficiary"];
export type BeneficiaryBeneficiaryIdBody = components["schemas"]["beneficiary_beneficiaryId_body"];
export type BeneficiaryTokenizationPage = NonNullable<operations["beneficiaryTokenizationPage"]["parameters"]["header"]>;
export type BeneficiaryTokenizationPageResponse = components["schemas"]["inline_response_200_60"];
export type BeneficiaryValidateBody = components["schemas"]["beneficiary_validate_body"];
export type BinDetails = components["schemas"]["BinDetails"];
export type CancelPayment = NonNullable<operations["cancelPayment"]["parameters"]["header"]>;
export type CancelPaymentResponse = components["schemas"]["inline_response_200_3"];
export type CancelPayout = NonNullable<operations["cancelPayout"]["parameters"]["header"]>;
export type CancelPayoutResponse = components["schemas"]["inline_response_200_55"];
export type CancelSubscription = NonNullable<operations["cancelSubscription"]["parameters"]["header"]>;
export type CancelSubscriptionResponse = components["schemas"]["inline_response_200_6"];
export type CapabilitiesOfVirtualAccounts = NonNullable<operations["capabilitiesOfVirtualAccounts"]["parameters"]["header"]>;
export type CapabilitiesOfVirtualAccountsResponse = components["schemas"]["inline_response_200_95"];
export type CapturePayment = NonNullable<operations["capturePayment"]["parameters"]["header"]>;
export type CapturePaymentResponse = components["schemas"]["inline_response_200_3"];
export type CardDetailsCardTokenBody = components["schemas"]["card_details_cardToken_body"];
export type CardDetailsResponse = components["schemas"]["CardDetailsResponse"];
export type CardIssuing = components["schemas"]["CardIssuing"];
export type CardIssuingMasked = components["schemas"]["CardIssuingMasked"];
export type CardTokenResponse = components["schemas"]["CardTokenResponse"];
export type CardTokenResponseCardFields = components["schemas"]["CardTokenResponse_card_fields"];
export type CardTokenResponsePaymentParams = components["schemas"]["CardTokenResponse_payment_params"];
export type CardTokensGooglePayBody = components["schemas"]["card_tokens_google_pay_body"];
export type CardTransaction = components["schemas"]["CardTransaction"];
export type CardsActivateBody = components["schemas"]["cards_activate_body"];
export type CardsAdjustmentBody = components["schemas"]["cards_adjustment_body"];
export type CardsAuthorizationBody = components["schemas"]["cards_authorization_body"];
export type CardsClearingBody = components["schemas"]["cards_clearing_body"];
export type CardsPersonalizeBody = components["schemas"]["cards_personalize_body"];
export type CardsPinBody = components["schemas"]["cards_pin_body"];
export type CardsRefundBody = components["schemas"]["cards_refund_body"];
export type CardsReversalBody = components["schemas"]["cards_reversal_body"];
export type CardsSimulateBlockBody = components["schemas"]["cards_simulate_block_body"];
export type CardsStatusBody = components["schemas"]["cards_status_body"];
export type Category = components["schemas"]["Category"];
export type CheckoutPageResponse = components["schemas"]["CheckoutPageResponse"];
export type CheckoutSubscriptionsBody = components["schemas"]["checkout_subscriptions_body"];
export type CheckoutUrlResponse = components["schemas"]["CheckoutUrlResponse"];
export type ClientDetailsObject = components["schemas"]["ClientDetailsObject"];
export type CloseIssuing = NonNullable<operations["closeIssuing"]["parameters"]["header"]>;
export type CloseIssuingResponse = components["schemas"]["inline_response_200_94"];
export type CnlTerminationQueryBody = components["schemas"]["cnl_termination_query_body"];
export type CollectCardBody = components["schemas"]["collect_card_body"];
export type CollectPaymentsBody = components["schemas"]["collect_payments_body"];
export type CompletePayment = NonNullable<operations["completePayment"]["parameters"]["header"]>;
export type CompletePaymentResponse = components["schemas"]["inline_response_200_3"];
export type CompleteSubscriptionCycleResponse = components["schemas"]["inline_response_200_9"];
export type Condition = components["schemas"]["Condition"];
export type ConfirmPayout = NonNullable<operations["confirmPayout"]["parameters"]["header"]>;
export type ConfirmPayoutResponse = components["schemas"]["inline_response_200_55"];
export type Contact = components["schemas"]["Contact"];
export type ContactBusiness = components["schemas"]["ContactBusiness"];
export type Country = components["schemas"]["Country"];
export type Country1 = components["schemas"]["Country_1"];
export type Coupon = components["schemas"]["Coupon"];
export type CreateAddress = NonNullable<operations["createAddress"]["parameters"]["header"]>;
export type CreateAddressResponse = components["schemas"]["inline_response_200_40"];
export type CreateBeneficiary = NonNullable<operations["createBeneficiary"]["parameters"]["header"]>;
export type CreateBeneficiaryResponse = components["schemas"]["inline_response_200_57"];
export type CreateCardToken = NonNullable<operations["createCardToken"]["parameters"]["header"]>;
export type CreateCardTokenResponse = components["schemas"]["inline_response_200_85"];
export type CreateCoupon = NonNullable<operations["createCoupon"]["parameters"]["header"]>;
export type CreateCouponResponse = components["schemas"]["inline_response_200_51"];
export type CreateCustomer = NonNullable<operations["createCustomer"]["parameters"]["header"]>;
export type CreateCustomerPaymentMethod = NonNullable<operations["createCustomerPaymentMethod"]["parameters"]["header"]>;
export type CreateCustomerPaymentMethodResponse = components["schemas"]["inline_response_200_42"];
export type CreateCustomerResponse = components["schemas"]["inline_response_200_37"];
export type CreateEwalletContact = NonNullable<operations["createEwalletContact"]["parameters"]["header"]>;
export type CreateEwalletContactResponse = components["schemas"]["inline_response_200_71"];
export type CreateExtendedBeneficiary = NonNullable<operations["createExtendedBeneficiary"]["parameters"]["header"]>;
export type CreateExtendedBeneficiaryResponse = components["schemas"]["inline_response_200_57"];
export type CreateGroupPayment = NonNullable<operations["createGroupPayment"]["parameters"]["header"]>;
export type CreateGroupPaymentResponse = components["schemas"]["inline_response_200_27"];
export type CreateHostedApplicationToken = NonNullable<operations["createHostedApplicationToken"]["parameters"]["header"]>;
export type CreateHostedApplicationTokenResponse = components["schemas"]["inline_response_200_115"];
export type CreateInvoice = NonNullable<operations["createInvoice"]["parameters"]["header"]>;
export type CreateInvoiceItem = NonNullable<operations["createInvoiceItem"]["parameters"]["header"]>;
export type CreateInvoiceItemResponse = components["schemas"]["inline_response_200_24"];
export type CreateInvoiceResponse = components["schemas"]["inline_response_200_21"];
export type CreateIssuing = NonNullable<operations["createIssuing"]["parameters"]["header"]>;
export type CreateIssuingResponse = components["schemas"]["inline_response_200_107"];
export type CreateMassPayout = NonNullable<operations["createMassPayout"]["parameters"]["header"]>;
export type CreateMassPayoutResponse = components["schemas"]["inline_response_200_56"];
export type CreateOrder = NonNullable<operations["createOrder"]["parameters"]["header"]>;
export type CreateOrderResponse = components["schemas"]["inline_response_200_47"];
export type CreatePayment = NonNullable<operations["createPayment"]["parameters"]["header"]>;
export type CreatePaymentLink = NonNullable<operations["createPaymentLink"]["parameters"]["header"]>;
export type CreatePaymentLinkResponse = components["schemas"]["inline_response_200_26"];
export type CreatePaymentResponse = components["schemas"]["inline_response_200_3"];
export type CreatePayout = NonNullable<operations["createPayout"]["parameters"]["header"]>;
export type CreatePayoutResponse = components["schemas"]["inline_response_200_55"];
export type CreatePlan = NonNullable<operations["createPlan"]["parameters"]["header"]>;
export type CreatePlanResponse = components["schemas"]["inline_response_200_11"];
export type CreateProduct = NonNullable<operations["createProduct"]["parameters"]["header"]>;
export type CreateProductResponse = components["schemas"]["inline_response_200_14"];
export type CreateSKU = NonNullable<operations["createSKU"]["parameters"]["header"]>;
export type CreateSKUResponse = components["schemas"]["inline_response_200_44"];
export type CreateSender = NonNullable<operations["createSender"]["parameters"]["header"]>;
export type CreateSenderResponse = components["schemas"]["inline_response_200_61"];
export type CreateSubscription = NonNullable<operations["createSubscription"]["parameters"]["header"]>;
export type CreateSubscriptionByHostedPage = NonNullable<operations["createSubscriptionByHostedPage"]["parameters"]["header"]>;
export type CreateSubscriptionByHostedPageResponse = components["schemas"]["inline_response_200_8"];
export type CreateSubscriptionItem = NonNullable<operations["createSubscriptionItem"]["parameters"]["header"]>;
export type CreateSubscriptionItemResponse = components["schemas"]["inline_response_200_16"];
export type CreateSubscriptionItemUsageRecord = NonNullable<operations["createSubscriptionItemUsageRecord"]["parameters"]["header"]>;
export type CreateSubscriptionItemUsageRecordResponse = components["schemas"]["inline_response_200_19"];
export type CreateSubscriptionResponse = components["schemas"]["inline_response_200_6"];
export type CreateUser = NonNullable<operations["createUser"]["parameters"]["header"]>;
export type CreateUserResponse = components["schemas"]["inline_response_200_98"];
export type CreateVirtualAccount = NonNullable<operations["createVirtualAccount"]["parameters"]["header"]>;
export type CreateVirtualAccountResponse = components["schemas"]["inline_response_200_90"];
export type Currency = components["schemas"]["Currency"];
export type Currency1 = components["schemas"]["Currency_1"];
export type Customer = components["schemas"]["Customer"];
export type CustomerDiscount = components["schemas"]["CustomerDiscount"];
export type CustomerIdPaymentMethodsBody = components["schemas"]["customerId_payment_methods_body"];
export type CustomerPaymentMethod = components["schemas"]["CustomerPaymentMethod"];
export type CustomerPaymentMethods = components["schemas"]["Customer_payment_methods"];
export type CustomerRequest = components["schemas"]["CustomerRequest"];
export type CustomerRequestPaymentMethod = components["schemas"]["CustomerRequest_payment_method"];
export type DailyRate = components["schemas"]["DailyRate"];
export type DeleteAddress = NonNullable<operations["DeleteAddress"]["parameters"]["header"]>;
export type DeleteAddressResponse = components["schemas"]["inline_response_200_40"];
export type DeleteBeneficiary = NonNullable<operations["deleteBeneficiary"]["parameters"]["header"]>;
export type DeleteBeneficiaryResponse = components["schemas"]["inline_response_200_59"];
export type DeleteCoupon = NonNullable<operations["deleteCoupon"]["parameters"]["header"]>;
export type DeleteCouponResponse = components["schemas"]["inline_response_200_52"];
export type DeleteCustomer = NonNullable<operations["deleteCustomer"]["parameters"]["header"]>;
export type DeleteCustomerDiscount = NonNullable<operations["deleteCustomerDiscount"]["parameters"]["header"]>;
export type DeleteCustomerDiscountResponse = components["schemas"]["inline_response_200_39"];
export type DeleteCustomerPaymentMethod = NonNullable<operations["deleteCustomerPaymentMethod"]["parameters"]["header"]>;
export type DeleteCustomerPaymentMethodResponse = components["schemas"]["inline_response_200_43"];
export type DeleteCustomerResponse = components["schemas"]["inline_response_200_23"];
export type DeleteDocumentOfPayout = NonNullable<operations["deleteDocumentOfPayout"]["parameters"]["header"]>;
export type DeleteDocumentOfPayoutResponse = components["schemas"]["inline_response_200_66"];
export type DeleteDocumentsOfPayout = NonNullable<operations["deleteDocumentsOfPayout"]["parameters"]["header"]>;
export type DeleteDocumentsOfPayoutResponse = components["schemas"]["inline_response_200_66"];
export type DeleteEwalletContact = NonNullable<operations["deleteEwalletContact"]["parameters"]["header"]>;
export type DeleteEwalletContactResponse = components["schemas"]["inline_response_200_72"];
export type DeleteInvoice = NonNullable<operations["deleteInvoice"]["parameters"]["header"]>;
export type DeleteInvoiceItem = NonNullable<operations["deleteInvoiceItem"]["parameters"]["header"]>;
export type DeleteInvoiceItemResponse = components["schemas"]["inline_response_200_25"];
export type DeleteInvoiceResponse = components["schemas"]["inline_response_200_23"];
export type DeletePayer = NonNullable<operations["deletePayer"]["parameters"]["header"]>;
export type DeletePayerResponse = components["schemas"]["inline_response_200_62"];
export type DeletePlan = NonNullable<operations["deletePlan"]["parameters"]["header"]>;
export type DeletePlanResponse = components["schemas"]["inline_response_200_12"];
export type DeleteProduct = NonNullable<operations["deleteProduct"]["parameters"]["header"]>;
export type DeleteProductResponse = components["schemas"]["inline_response_200_12"];
export type DeleteSKU = NonNullable<operations["deleteSKU"]["parameters"]["header"]>;
export type DeleteSKUResponse = components["schemas"]["inline_response_200_23"];
export type DeleteSubscriptionDiscount = NonNullable<operations["deleteSubscriptionDiscount"]["parameters"]["header"]>;
export type DeleteSubscriptionDiscountResponse = components["schemas"]["inline_response_200_7"];
export type DeleteSubscriptionItem = NonNullable<operations["deleteSubscriptionItem"]["parameters"]["header"]>;
export type DeleteSubscriptionItemResponse = components["schemas"]["inline_response_200_17"];
export type DeleteUser = NonNullable<operations["deleteUser"]["parameters"]["header"]>;
export type DeleteUserResponse = components["schemas"]["inline_response_200_66"];
export type DeletegroupPaymentId = NonNullable<operations["deletegroupPaymentId"]["parameters"]["header"]>;
export type DeletegroupPaymentIdResponse = components["schemas"]["inline_response_200_27"];
export type DetailsOfAddFundstoWalletAccount = NonNullable<operations["detailsOfAddFundstoWalletAccount"]["parameters"]["header"]>;
export type DetailsOfAddFundstoWalletAccountResponse = components["schemas"]["inline_response_200_68"];
export type DisburseBeneficiaryBody = components["schemas"]["disburse_beneficiary_body"];
export type Discount = components["schemas"]["Discount"];
export type DiscountCustomerResponse = components["schemas"]["DiscountCustomerResponse"];
export type Dispute = components["schemas"]["Dispute"];
export type EntityType = components["schemas"]["EntityType"];
export type EntityTypeVerify = components["schemas"]["EntityTypeVerify"];
export type Escrow = components["schemas"]["Escrow"];
export type EscrowEscrowReleasesBody = components["schemas"]["escrow_escrow_releases_body"];
export type EscrowEwallets = components["schemas"]["Escrow_ewallets"];
export type EscrowResponse = components["schemas"]["EscrowResponse"];
export type EscrowResponseEscrowReleases = components["schemas"]["EscrowResponse_escrow_releases"];
export type EscrowResponseEscrowReleasesData = components["schemas"]["EscrowResponse_escrow_releases_data"];
export type Ewallet = components["schemas"]["Ewallet"];
export type EwalletContacts = components["schemas"]["Ewallet_contacts"];
export type EwalletIdContactsBody = components["schemas"]["ewalletId_contacts_body"];
export type EwalletTransaction = components["schemas"]["EwalletTransaction"];
export type EwalletTransactionDetails = components["schemas"]["EwalletTransactionDetails"];
export type EwalletTransactionP2PAdditionlData = components["schemas"]["EwalletTransactionP2PAdditionlData"];
export type EwalletTransactionP2PDetails = components["schemas"]["EwalletTransactionP2PDetails"];
export type EwalletsEwalletTokenBody = components["schemas"]["ewallets_ewalletToken_body"];
export type Fee = components["schemas"]["Fee"];
export type Field = components["schemas"]["Field"];
export type Field1 = components["schemas"]["Field_1"];
export type Field1Conditions = components["schemas"]["Field_1_conditions"];
export type FieldConditions = components["schemas"]["Field_conditions"];
export type FinalizeInvoice = NonNullable<operations["finalizeInvoice"]["parameters"]["header"]>;
export type FinalizeInvoiceResponse = components["schemas"]["inline_response_200_22"];
export type FundsTransfer = NonNullable<operations["fundsTransfer"]["parameters"]["header"]>;
export type FundsTransferResponse = components["schemas"]["inline_response_200_67"];
export type FxFee = components["schemas"]["FxFee"];
export type Gender = components["schemas"]["gender"];
export type GenerateHostedPagePayment = NonNullable<operations["generateHostedPagePayment"]["parameters"]["header"]>;
export type GenerateHostedPagePaymentResponse = components["schemas"]["inline_response_200_4"];
export type GetAddress = NonNullable<operations["GetAddress"]["parameters"]["header"]>;
export type GetAddressResponse = components["schemas"]["inline_response_200_40"];
export type GetApplePaySession = NonNullable<operations["getApplePaySession"]["parameters"]["header"]>;
export type GetApplePaySessionResponse = components["schemas"]["inline_response_200_33"];
export type GetApplicationStatus = NonNullable<operations["getApplicationStatus"]["parameters"]["header"]>;
export type GetApplicationStatusResponse = components["schemas"]["inline_response_200_114"];
export type GetApplicationTypesByCountry = NonNullable<operations["getApplicationTypesByCountry"]["parameters"]["header"]>;
export type GetApplicationTypesByCountryResponse = components["schemas"]["inline_response_200_113"];
export type GetBeneficiary = NonNullable<operations["getBeneficiary"]["parameters"]["header"]>;
export type GetBeneficiaryResponse = components["schemas"]["inline_response_200_57"];
export type GetCardIssuingDetails = NonNullable<operations["getCardIssuingDetails"]["parameters"]["header"]>;
export type GetCardIssuingDetailsResponse = components["schemas"]["inline_response_200_77"];
export type GetCardIssuingList = NonNullable<operations["getCardIssuingList"]["parameters"]["header"]>;
export type GetCardIssuingListResponse = components["schemas"]["inline_response_200_75"];
export type GetCardIssuingTransaction = NonNullable<operations["getCardIssuingTransaction"]["parameters"]["header"]>;
export type GetCardIssuingTransactionResponse = components["schemas"]["inline_response_200_82"];
export type GetCardIssuingTransactions = NonNullable<operations["getCardIssuingTransactions"]["parameters"]["header"]>;
export type GetCardIssuingTransactionsResponse = components["schemas"]["inline_response_200_81"];
export type GetCustomerDiscountById = NonNullable<operations["getCustomerDiscountById"]["parameters"]["header"]>;
export type GetCustomerDiscountByIdResponse = components["schemas"]["inline_response_200_38"];
export type GetCustomerPaymentMethod = NonNullable<operations["getCustomerPaymentMethod"]["parameters"]["header"]>;
export type GetCustomerPaymentMethodResponse = components["schemas"]["inline_response_200_42"];
export type GetCustomerPaymentMethods = NonNullable<operations["getCustomerPaymentMethods"]["parameters"]["header"]>;
export type GetCustomerPaymentMethodsResponse = components["schemas"]["inline_response_200_41"];
export type GetDailyRate = operations["getDailyRate"]["parameters"]["query"];
export type GetDailyRateResponse = components["schemas"]["inline_response_200_96"];
export type GetDetailsOfRemoveFundsRequest = NonNullable<operations["getDetailsOfRemoveFundsRequest"]["parameters"]["header"]>;
export type GetDetailsOfRemoveFundsRequestResponse = components["schemas"]["inline_response_200_68"];
export type GetDispute = NonNullable<operations["getDispute"]["parameters"]["header"]>;
export type GetDisputeResponse = components["schemas"]["inline_response_200_35"];
export type GetDisputesListByOrgId = NonNullable<operations["getDisputesListByOrgId"]["parameters"]["header"]>;
export type GetDisputesListByOrgIdResponse = components["schemas"]["inline_response_200_34"];
export type GetDocumentOfPayout = NonNullable<operations["getDocumentOfPayout"]["parameters"]["header"]>;
export type GetDocumentOfPayoutResponse = components["schemas"]["inline_response_200_65"];
export type GetEscrow = NonNullable<operations["getEscrow"]["parameters"]["header"]>;
export type GetEscrowResponse = components["schemas"]["inline_response_200_28"];
export type GetEwalletContact = NonNullable<operations["getEwalletContact"]["parameters"]["header"]>;
export type GetEwalletContactComplianceLevels = NonNullable<operations["getEwalletContactComplianceLevels"]["parameters"]["header"]>;
export type GetEwalletContactComplianceLevelsResponse = components["schemas"]["inline_response_200_73"];
export type GetEwalletContactResponse = components["schemas"]["inline_response_200_71"];
export type GetEwalletContacts = NonNullable<operations["getEwalletContacts"]["parameters"]["header"]>;
export type GetEwalletContactsResponse = components["schemas"]["inline_response_200_70"];
export type GetFXRate = NonNullable<operations["getFXRate"]["parameters"]["header"]>;
export type GetFXRateResponse = components["schemas"]["inline_response_200_104"];
export type GetHostedApplicationByToken = NonNullable<operations["getHostedApplicationByToken"]["parameters"]["header"]>;
export type GetHostedApplicationByTokenResponse = components["schemas"]["inline_response_200_116"];
export type GetHostedPagePayment = NonNullable<operations["getHostedPagePayment"]["parameters"]["header"]>;
export type GetHostedPagePaymentResponse = components["schemas"]["inline_response_200_4"];
export type GetInvoiceItem = NonNullable<operations["getInvoiceItem"]["parameters"]["header"]>;
export type GetInvoiceItemResponse = components["schemas"]["inline_response_200_24"];
export type GetInvoiceLines = NonNullable<operations["getInvoiceLines"]["parameters"]["header"]>;
export type GetInvoiceLinesResponse = components["schemas"]["inline_response_200_22"];
export type GetInvoiceLinesUpcomingInvoice = NonNullable<operations["getInvoiceLinesUpcomingInvoice"]["parameters"]["header"]>;
export type GetInvoiceLinesUpcomingInvoiceResponse = components["schemas"]["inline_response_200_22"];
export type GetKycIdVerificationSupportedDocTypes = NonNullable<operations["getKycIdVerificationSupportedDocTypes"]["parameters"]["header"]>;
export type GetKycIdVerificationSupportedDocTypesResponse = components["schemas"]["inline_response_200_112"];
export type GetPayer = NonNullable<operations["getPayer"]["parameters"]["header"]>;
export type GetPayerResponse = components["schemas"]["inline_response_200_61"];
export type GetPaymentMethodTypeRequiredFields = NonNullable<operations["getPaymentMethodTypeRequiredFields"]["parameters"]["header"]>;
export type GetPaymentMethodTypeRequiredFieldsResponse = components["schemas"]["inline_response_200_1"];
export type GetPaymentMethodsTypesByCountry = NonNullable<operations["getPaymentMethodsTypesByCountry"]["parameters"]["header"]>;
export type GetPaymentMethodsTypesByCountryResponse = components["schemas"]["inline_response_200"];
export type GetPayout = NonNullable<operations["getPayout"]["parameters"]["header"]>;
export type GetPayoutMethodTypes = NonNullable<operations["getPayoutMethodTypes"]["parameters"]["header"]>;
export type GetPayoutMethodTypesDetails = NonNullable<operations["getPayoutMethodTypesDetails"]["parameters"]["header"]>;
export type GetPayoutMethodTypesDetailsResponse = components["schemas"]["inline_response_200_53"];
export type GetPayoutMethodTypesResponse = components["schemas"]["inline_response_200_63"];
export type GetPayoutResponse = components["schemas"]["inline_response_200_55"];
export type GetProduct = NonNullable<operations["getProduct"]["parameters"]["header"]>;
export type GetProductResponse = components["schemas"]["inline_response_200_14"];
export type GetProductsList = NonNullable<operations["getProductsList"]["parameters"]["header"]>;
export type GetProductsListResponse = components["schemas"]["inline_response_200_13"];
export type GetRemitterDetails = NonNullable<operations["getRemitterDetails"]["parameters"]["header"]>;
export type GetRemitterDetailsResponse = components["schemas"]["inline_response_200_109"];
export type GetSubscription = NonNullable<operations["getSubscription"]["parameters"]["header"]>;
export type GetSubscriptionDiscountById = NonNullable<operations["getSubscriptionDiscountById"]["parameters"]["header"]>;
export type GetSubscriptionDiscountByIdResponse = components["schemas"]["inline_response_200_20"];
export type GetSubscriptionList = NonNullable<operations["getSubscriptionList"]["parameters"]["header"]>;
export type GetSubscriptionListResponse = components["schemas"]["inline_response_200_5"];
export type GetSubscriptionResponse = components["schemas"]["inline_response_200_6"];
export type GetUpcomingInvoice = NonNullable<operations["getUpcomingInvoice"]["parameters"]["header"]>;
export type GetUpcomingInvoiceResponse = components["schemas"]["inline_response_200_22"];
export type GetUser = NonNullable<operations["getUser"]["parameters"]["header"]>;
export type GetUserAccounts = NonNullable<operations["getUserAccounts"]["parameters"]["header"]>;
export type GetUserAccountsResponse = components["schemas"]["inline_response_200_99"];
export type GetUserResponse = components["schemas"]["inline_response_200_98"];
export type GetUserTransactionDetails = NonNullable<operations["getUserTransactionDetails"]["parameters"]["header"]>;
export type GetUserTransactionDetailsResponse = components["schemas"]["inline_response_200_102"];
export type GetUserTransactions = NonNullable<operations["getUserTransactions"]["parameters"]["header"]>;
export type GetUserTransactionsResponse = components["schemas"]["inline_response_200_101"];
export type GetUsers = NonNullable<operations["getUsers"]["parameters"]["header"]>;
export type GetUsersResponse = components["schemas"]["inline_response_200_97"];
export type GetWebhook = NonNullable<operations["getWebhook"]["parameters"]["header"]>;
export type GetWebhookResponse = components["schemas"]["inline_response_200_105"];
export type GroupPayment = components["schemas"]["GroupPayment"];
export type HostedActivateCard = NonNullable<operations["hostedActivateCard"]["parameters"]["header"]>;
export type HostedActivateCardResponse = components["schemas"]["inline_response_200_79"];
export type HostedBeneficiaryTokenResponse = components["schemas"]["HostedBeneficiaryTokenResponse"];
export type HostedBeneficiaryTokenResponseBeneficiaryOptionalFields = components["schemas"]["HostedBeneficiaryTokenResponse_beneficiary_optional_fields"];
export type HostedBeneficiaryTokenResponseMerchantCustomerSupport = components["schemas"]["HostedBeneficiaryTokenResponse_merchant_customer_support"];
export type HostedCardPIN = NonNullable<operations["hostedCardPIN"]["parameters"]["header"]>;
export type HostedCardPINResponse = components["schemas"]["inline_response_200_80"];
export type HostedIdvBody = components["schemas"]["hosted_idv_body"];
export type HostedPageActivateCardResponse = components["schemas"]["HostedPageActivateCardResponse"];
export type HostedPageAdditionalResponse = components["schemas"]["HostedPageAdditionalResponse"];
export type HostedPageAdditionalResponseCartItems = components["schemas"]["HostedPageAdditionalResponse_cart_items"];
export type HostedPageAdditionalResponseCustomElements = components["schemas"]["HostedPageAdditionalResponse_custom_elements"];
export type HostedPageCardPINResponse = components["schemas"]["HostedPageCardPINResponse"];
export type HostedPageStatus = components["schemas"]["HostedPageStatus"];
export type HostedPageStatusBaseResponse = components["schemas"]["HostedPageStatusBaseResponse"];
export type IdentityVerificationPage = NonNullable<operations["identityVerificationPage"]["parameters"]["header"]>;
export type IdentityVerificationPageResponse = components["schemas"]["inline_response_200_117"];
export type InitiateMerchantQuery = NonNullable<operations["initiateMerchantQuery"]["parameters"]["header"]>;
export type InitiateMerchantQueryResponse = components["schemas"]["inline_response_200_118"];
export type InvoiceIdPayBody = components["schemas"]["invoiceId_pay_body"];
export type InvoiceItem = components["schemas"]["InvoiceItem"];
export type InvoiceItemPeriod = components["schemas"]["InvoiceItem_period"];
export type InvoiceItemResponse = components["schemas"]["InvoiceItemResponse"];
export type InvoiceItemResponsePeriod = components["schemas"]["InvoiceItemResponse_period"];
export type InvoiceItemsInvoiceItemBody = components["schemas"]["invoice_items_invoiceItem_body"];
export type InvoiceLineResponse = components["schemas"]["InvoiceLineResponse"];
export type InvoiceLineResponsePeriod = components["schemas"]["InvoiceLineResponse_period"];
export type InvoiceResponse = components["schemas"]["InvoiceResponse"];
export type InvoicesInvoiceIdBody = components["schemas"]["invoices_invoiceId_body"];
export type IssueCard = NonNullable<operations["issueCard"]["parameters"]["header"]>;
export type IssueCardResponse = components["schemas"]["inline_response_200_76"];
export type IssuingActivateCardBody = components["schemas"]["issuing_activate_card_body"];
export type IssuingBankaccountsBody = components["schemas"]["issuing_bankaccounts_body"];
export type IssuingCardsBody = components["schemas"]["issuing_cards_body"];
export type IssuingPinBody = components["schemas"]["issuing_pin_body"];
export type IssuingTransactionFxData = components["schemas"]["IssuingTransactionFxData"];
export type Last4 = components["schemas"]["Last4"];
export type Limit = components["schemas"]["Limit"];
export type ListCountries = NonNullable<operations["listCountries"]["parameters"]["header"]>;
export type ListCountriesResponse = components["schemas"]["inline_response_200_121"];
export type ListCountriesResponseLanguages = components["schemas"]["ListCountriesResponse_languages"];
export type ListCoupon = NonNullable<operations["listCoupon"]["parameters"]["header"]>;
export type ListCouponResponse = components["schemas"]["inline_response_200_50"];
export type ListCurrencies = NonNullable<operations["listCurrencies"]["parameters"]["header"]>;
export type ListCurrenciesResponse = components["schemas"]["inline_response_200_122"];
export type ListCustomer = NonNullable<operations["listCustomer"]["parameters"]["header"]>;
export type ListCustomerResponse = components["schemas"]["inline_response_200_36"];
export type ListDocumentsOfPayout = NonNullable<operations["listDocumentsOfPayout"]["parameters"]["header"]>;
export type ListDocumentsOfPayoutResponse = components["schemas"]["inline_response_200_65"];
export type ListEscrowReleases = NonNullable<operations["listEscrowReleases"]["parameters"]["header"]>;
export type ListEscrowReleasesResponse = components["schemas"]["inline_response_200_28"];
export type ListInvoiceItems = NonNullable<operations["listInvoiceItems"]["parameters"]["header"]>;
export type ListInvoiceItemsResponse = components["schemas"]["inline_response_200_24"];
export type ListInvoices = NonNullable<operations["listInvoices"]["parameters"]["header"]>;
export type ListInvoicesResponse = components["schemas"]["inline_response_200_21"];
export type ListOrder = NonNullable<operations["listOrder"]["parameters"]["header"]>;
export type ListOrderResponse = components["schemas"]["inline_response_200_46"];
export type ListOrderReturn = NonNullable<operations["listOrderReturn"]["parameters"]["header"]>;
export type ListOrderReturnResponse = components["schemas"]["inline_response_200_49"];
export type ListPayments = NonNullable<operations["listPayments"]["parameters"]["header"]>;
export type ListPaymentsResponse = components["schemas"]["inline_response_200_2"];
export type ListPayouts = NonNullable<operations["listPayouts"]["parameters"]["header"]>;
export type ListPayoutsResponse = components["schemas"]["inline_response_200_54"];
export type ListPlans = NonNullable<operations["listPlans"]["parameters"]["header"]>;
export type ListPlansResponse = components["schemas"]["inline_response_200_10"];
export type ListSKU = NonNullable<operations["listSKU"]["parameters"]["header"]>;
export type ListSKUResponse = components["schemas"]["inline_response_200_45"];
export type ListSubscriptionItem = NonNullable<operations["listSubscriptionItem"]["parameters"]["header"]>;
export type ListSubscriptionItemResponse = components["schemas"]["inline_response_200_15"];
export type ListSupportedLanguages = NonNullable<operations["listSupportedLanguages"]["parameters"]["header"]>;
export type ListSupportedLanguagesResponse = components["schemas"]["inline_response_200_120"];
export type ListSupportedLanguagesResponseLanguages = components["schemas"]["ListSupportedLanguagesResponse_languages"];
export type ListWebhooks = operations["listWebhooks"]["parameters"]["query"];
export type ListWebhooksResponse = components["schemas"]["inline_response_200_106"];
export type ListWebhooksResponseAttempts = components["schemas"]["ListWebhooksResponse_attempts"];
export type ListWebhooksResponseAttemptsHttpResponseHeaders = components["schemas"]["ListWebhooksResponse_attempts_http_response_headers"];
export type MarkInvoiceUncollectible = NonNullable<operations["markInvoiceUncollectible"]["parameters"]["header"]>;
export type MarkInvoiceUncollectibleResponse = components["schemas"]["inline_response_200_22"];
export type MassPayoutResponse = components["schemas"]["MassPayoutResponse"];
export type MerchantCustomerSupport = components["schemas"]["MerchantCustomerSupport"];
export type ModifyCard = NonNullable<operations["modifyCard"]["parameters"]["header"]>;
export type ModifyCardResponse = components["schemas"]["inline_response_200_78"];
export type NextAction = components["schemas"]["NextAction"];
export type OrderIdPayBody = components["schemas"]["orderId_pay_body"];
export type OrderIdReturnsBody = components["schemas"]["orderId_returns_body"];
export type OrderItem = components["schemas"]["OrderItem"];
export type OrderItemResponse = components["schemas"]["OrderItemResponse"];
export type OrderResponse = components["schemas"]["OrderResponse"];
export type OrderResponseStatusTransitions = components["schemas"]["OrderResponse_status_transitions"];
export type OrderReturnedItemResponse = components["schemas"]["OrderReturnedItemResponse"];
export type OrderReturnedResponse = components["schemas"]["OrderReturnedResponse"];
export type OrdersOrderIdBody = components["schemas"]["orders_orderId_body"];
export type Outcome = components["schemas"]["Outcome"];
export type PayInvoice = NonNullable<operations["payInvoice"]["parameters"]["header"]>;
export type PayInvoiceResponse = components["schemas"]["inline_response_200_22"];
export type PayOrder = NonNullable<operations["payOrder"]["parameters"]["header"]>;
export type PayOrderResponse = components["schemas"]["inline_response_200_47"];
export type Payment = components["schemas"]["Payment"];
export type PaymentAmountRangePerCurrency = components["schemas"]["PaymentAmountRangePerCurrency"];
export type PaymentAmountRangePerCurrencyInner = components["schemas"]["PaymentAmountRangePerCurrency_inner"];
export type PaymentEwallets = components["schemas"]["Payment_ewallets"];
export type PaymentFee = components["schemas"]["PaymentFee"];
export type PaymentIdCaptureBody = components["schemas"]["paymentId_capture_body"];
export type PaymentInstructions = components["schemas"]["Payment_instructions"];
export type PaymentLink = NonNullable<operations["paymentLink"]["parameters"]["header"]>;
export type PaymentLinkResponse = components["schemas"]["inline_response_200_26"];
export type PaymentMethodType = components["schemas"]["PaymentMethodType"];
export type PaymentMethodTypeRequiredFields = components["schemas"]["PaymentMethodTypeRequiredFields"];
export type PaymentOptions = components["schemas"]["PaymentOptions"];
export type PaymentParams = components["schemas"]["PaymentParams"];
export type PaymentRefunds = components["schemas"]["Payment_refunds"];
export type PaymentStatus = components["schemas"]["PaymentStatus"];
export type PaymentSteps = components["schemas"]["Payment_steps"];
export type PaymentsCompletePaymentBody = components["schemas"]["payments_completePayment_body"];
export type PaymentsGroupPaymentsBody = components["schemas"]["payments_group_payments_body"];
export type PaymentsPaymentIdBody = components["schemas"]["payments_paymentId_body"];
export type PaymentsSubscriptionsBody = components["schemas"]["payments_subscriptions_body"];
export type Payout = components["schemas"]["Payout"];
export type PayoutAmountRangePerCurrency = components["schemas"]["PayoutAmountRangePerCurrency"];
export type PayoutAmountRangePerCurrencyInner = components["schemas"]["PayoutAmountRangePerCurrency_inner"];
export type PayoutEwallets = components["schemas"]["Payout_ewallets"];
export type PayoutFees = components["schemas"]["PayoutFees"];
export type PayoutInstructions = components["schemas"]["Payout_instructions"];
export type PayoutMethodType = components["schemas"]["PayoutMethodType"];
export type PayoutMethodTypeDetails = components["schemas"]["PayoutMethodTypeDetails"];
export type PayoutRequest = components["schemas"]["PayoutRequest"];
export type PayoutRequiredFields = components["schemas"]["PayoutRequiredFields"];
export type PayoutReturned = components["schemas"]["PayoutReturned"];
export type PayoutReturnedStatus = components["schemas"]["PayoutReturnedStatus"];
export type PayoutStatus = components["schemas"]["PayoutStatus"];
export type PayoutsBeneficiaryBody = components["schemas"]["payouts_beneficiary_body"];
export type PayoutsExtendedBeneficiaryBody = components["schemas"]["payouts_extended_beneficiary_body"];
export type PayoutsPayoutIdBody = components["schemas"]["payouts_payoutId_body"];
export type PayoutsSenderBody = components["schemas"]["payouts_sender_body"];
export type Plan = components["schemas"]["Plan"];
export type PlanObject = components["schemas"]["PlanObject"];
export type PlanObjectTiers = components["schemas"]["PlanObject_tiers"];
export type PlanTiers = components["schemas"]["Plan_tiers"];
export type PlanTransformUsage = components["schemas"]["Plan_transform_usage"];
export type PlansPlanIdBody = components["schemas"]["plans_planId_body"];
export type Product = components["schemas"]["Product"];
export type ProductPackageDimensions = components["schemas"]["Product_package_dimensions"];
export type ProductsProductsIdBody = components["schemas"]["products_productsId_body"];
export type PutFundsOnHold = NonNullable<operations["putFundsOnHold"]["parameters"]["header"]>;
export type PutFundsOnHoldResponse = components["schemas"]["inline_response_200_69"];
export type Refund = components["schemas"]["Refund"];
export type RefundByToken = NonNullable<operations["refundByToken"]["parameters"]["header"]>;
export type RefundByTokenResponse = components["schemas"]["inline_response_200_31"];
export type RefundEwallets = components["schemas"]["Refund_ewallets"];
export type RefundGroupPaymentResponse = components["schemas"]["inline_response_200_32"];
export type RefundsCompleteBody = components["schemas"]["refunds_complete_body"];
export type RefundsGroupPaymentsBody = components["schemas"]["refunds_group_payments_body"];
export type RefundsRefundIdBody = components["schemas"]["refunds_refundId_body"];
export type ReleaseFundsFromEscrow = NonNullable<operations["releaseFundsFromEscrow"]["parameters"]["header"]>;
export type ReleaseFundsFromEscrowResponse = components["schemas"]["inline_response_200_29"];
export type RemoveAccountLimit = NonNullable<operations["removeAccountLimit"]["parameters"]["header"]>;
export type RemoveAccountLimitResponse = components["schemas"]["inline_response_200_100"];
export type RequestTotalCreateRefund = NonNullable<operations["requestTotal_createRefund"]["parameters"]["header"]>;
export type RequestTotalCreateRefundResponse = components["schemas"]["inline_response_200_31"];
export type ResendWebhook = NonNullable<operations["resendWebhook"]["parameters"]["header"]>;
export type ResendWebhookResponse = components["schemas"]["inline_response_200_105"];
export type RetrieveCoupon = NonNullable<operations["retrieveCoupon"]["parameters"]["header"]>;
export type RetrieveCouponResponse = components["schemas"]["inline_response_200_51"];
export type RetrieveCustomer = NonNullable<operations["retrieveCustomer"]["parameters"]["header"]>;
export type RetrieveCustomerResponse = components["schemas"]["inline_response_200_37"];
export type RetrieveGroupPaymentId = NonNullable<operations["retrieveGroupPaymentId"]["parameters"]["header"]>;
export type RetrieveGroupPaymentIdResponse = components["schemas"]["inline_response_200_27"];
export type RetrieveInvoice = NonNullable<operations["retrieveInvoice"]["parameters"]["header"]>;
export type RetrieveInvoiceResponse = components["schemas"]["inline_response_200_22"];
export type RetrieveIssuingByRapydToken = NonNullable<operations["retrieveIssuingByRapydToken"]["parameters"]["header"]>;
export type RetrieveIssuingByRapydTokenResponse = components["schemas"]["inline_response_200_108"];
export type RetrieveIssuingTransaction = NonNullable<operations["retrieveIssuingTransaction"]["parameters"]["header"]>;
export type RetrieveIssuingTransactionResponse = components["schemas"]["inline_response_200_110"];
export type RetrieveOrder = NonNullable<operations["retrieveOrder"]["parameters"]["header"]>;
export type RetrieveOrderResponse = components["schemas"]["inline_response_200_47"];
export type RetrieveOrderReturn = NonNullable<operations["retrieveOrderReturn"]["parameters"]["header"]>;
export type RetrieveOrderReturnResponse = components["schemas"]["inline_response_200_48"];
export type RetrievePayment = NonNullable<operations["retrievePayment"]["parameters"]["header"]>;
export type RetrievePaymentResponse = components["schemas"]["inline_response_200_3"];
export type RetrievePlan = NonNullable<operations["retrievePlan"]["parameters"]["header"]>;
export type RetrievePlanResponse = components["schemas"]["inline_response_200_11"];
export type RetrieveQueryResults = NonNullable<operations["retrieveQueryResults"]["parameters"]["header"]>;
export type RetrieveQueryResultsResponse = components["schemas"]["inline_response_200_119"];
export type RetrieveSKU = NonNullable<operations["retrieveSKU"]["parameters"]["header"]>;
export type RetrieveSKUResponse = components["schemas"]["inline_response_200_44"];
export type RetrieveSubscriptionItem = NonNullable<operations["retrieveSubscriptionItem"]["parameters"]["header"]>;
export type RetrieveSubscriptionItemResponse = components["schemas"]["inline_response_200_16"];
export type RetrieveVirtualAccountResponse = components["schemas"]["inline_response_200_92"];
export type ReturnsOrder = NonNullable<operations["returnsOrder"]["parameters"]["header"]>;
export type ReturnsOrderResponse = components["schemas"]["inline_response_200_48"];
export type Sender = components["schemas"]["Sender"];
export type SetAccountLimit = NonNullable<operations["setAccountLimit"]["parameters"]["header"]>;
export type SetAccountLimitResponse = components["schemas"]["inline_response_200_99"];
export type SetFundsTransferResponse = NonNullable<operations["setFundsTransferResponse"]["parameters"]["header"]>;
export type SetFundsTransferResponseResponse = components["schemas"]["inline_response_200_67"];
export type SetPINCode = NonNullable<operations["setPINCode"]["parameters"]["header"]>;
export type SetPINCodeResponse = components["schemas"]["inline_response_200_83"];
export type SetPINResponse = components["schemas"]["setPINResponse"];
export type SimulateBankTransferToVirtualAccount = NonNullable<operations["simulateBankTransferToVirtualAccount"]["parameters"]["header"]>;
export type SimulateBankTransferToVirtualAccountResponse = components["schemas"]["inline_response_200_91"];
export type SimulateBlockCard = NonNullable<operations["simulateBlockCard"]["parameters"]["header"]>;
export type SimulateBlockCardResponse = components["schemas"]["inline_response_200_86"];
export type SimulateCardRefundEEA = NonNullable<operations["simulateCardRefundEEA"]["parameters"]["header"]>;
export type SimulateCardRefundEEAResponse = components["schemas"]["inline_response_200_89"];
export type SimulateCardTransactionAdjustmentEEA = NonNullable<operations["SimulateCardTransactionAdjustmentEEA"]["parameters"]["header"]>;
export type SimulateCardTransactionAdjustmentEEAResponse = components["schemas"]["inline_response_200_89"];
export type SimulateCardTransactionAuthorizationRequestEEA = NonNullable<operations["simulateCardTransactionAuthorizationRequestEEA"]["parameters"]["header"]>;
export type SimulateCardTransactionAuthorizationRequestEEAAuthResponse = components["schemas"]["SimulateCardTransactionAuthorizationRequestEEA_auth_response"];
export type SimulateCardTransactionAuthorizationRequestEEAResponse = components["schemas"]["inline_response_200_87"];
export type SimulateCardTransactionAuthorizationReversalEEA = NonNullable<operations["simulateCardTransactionAuthorizationReversalEEA"]["parameters"]["header"]>;
export type SimulateCardTransactionAuthorizationReversalEEAResponse = components["schemas"]["inline_response_200_88"];
export type SimulateClearingCardTransactionEEA = NonNullable<operations["simulateClearingCardTransactionEEA"]["parameters"]["header"]>;
export type SimulateClearingCardTransactionEEARemoteAuthResponse = components["schemas"]["SimulateClearingCardTransactionEEA_remote_auth_response"];
export type SimulateClearingCardTransactionEEAResponse = components["schemas"]["inline_response_200_89"];
export type SimulateCompleteBankAccountIssuingTransaction = NonNullable<operations["simulateCompleteBankAccountIssuingTransaction"]["parameters"]["header"]>;
export type SimulateCompleteBankAccountIssuingTransactionResponse = components["schemas"]["inline_response_200_108"];
export type SimulateCompletePayout = NonNullable<operations["simulateCompletePayout"]["parameters"]["header"]>;
export type SimulateCompletePayoutResponse = components["schemas"]["inline_response_200_55"];
export type SimulateCompleteRefund = NonNullable<operations["simulateCompleteRefund"]["parameters"]["header"]>;
export type SimulateCompleteRefundResponse = components["schemas"]["inline_response_200_31"];
export type SimulatePayoutReturnedStatus = NonNullable<operations["simulatePayoutReturnedStatus"]["parameters"]["header"]>;
export type SimulatePayoutReturnedStatusResponse = components["schemas"]["inline_response_200_64"];
export type SimulateStartNewCycleResponse = components["schemas"]["inline_response_200_9"];
export type Sku = components["schemas"]["Sku"];
export type SkuPackageDimensions = components["schemas"]["Sku_package_dimensions"];
export type SkusSkuIdBody = components["schemas"]["skus_skuId_body"];
export type Status = components["schemas"]["Status"];
export type Status1 = components["schemas"]["Status_1"];
export type Subscription = components["schemas"]["Subscription"];
export type SubscriptionDiscount = components["schemas"]["SubscriptionDiscount"];
export type SubscriptionHostedPageReponse = components["schemas"]["SubscriptionHostedPageReponse"];
export type SubscriptionHostedPageReponseCustomElements = components["schemas"]["SubscriptionHostedPageReponse_custom_elements"];
export type SubscriptionHostedPageReponseMerchantCustomerSupport = components["schemas"]["SubscriptionHostedPageReponse_merchant_customer_support"];
export type SubscriptionItem = components["schemas"]["SubscriptionItem"];
export type SubscriptionItemIdUsageRecordsBody = components["schemas"]["subscriptionItemId_usage_records_body"];
export type SubscriptionItems = components["schemas"]["SubscriptionItems"];
export type SubscriptionItemsSubscriptionItemIdBody = components["schemas"]["subscription_items_subscriptionItemId_body"];
export type SubscriptionsSubscriptionIdBody = components["schemas"]["subscriptions_subscriptionId_body"];
export type TransactionFee = components["schemas"]["TransactionFee"];
export type Transfer = components["schemas"]["Transfer"];
export type TransferResponseBody = components["schemas"]["transfer_response_body"];
export type UpdateAddress = NonNullable<operations["UpdateAddress"]["parameters"]["header"]>;
export type UpdateAddressResponse = components["schemas"]["inline_response_200_40"];
export type UpdateBeneficiary = NonNullable<operations["updateBeneficiary"]["parameters"]["header"]>;
export type UpdateBeneficiaryResponse = components["schemas"]["inline_response_200_57"];
export type UpdateCardStatus = NonNullable<operations["updateCardStatus"]["parameters"]["header"]>;
export type UpdateCardStatusResponse = components["schemas"]["inline_response_200_78"];
export type UpdateCoupon = NonNullable<operations["updateCoupon"]["parameters"]["header"]>;
export type UpdateCouponResponse = components["schemas"]["inline_response_200_51"];
export type UpdateCustomer = NonNullable<operations["updateCustomer"]["parameters"]["header"]>;
export type UpdateCustomerPaymentMethod = NonNullable<operations["updateCustomerPaymentMethod"]["parameters"]["header"]>;
export type UpdateCustomerPaymentMethodResponse = components["schemas"]["inline_response_200_42"];
export type UpdateCustomerResponse = components["schemas"]["inline_response_200_37"];
export type UpdateEwalletContact = NonNullable<operations["updateEwalletContact"]["parameters"]["header"]>;
export type UpdateEwalletContactResponse = components["schemas"]["inline_response_200_71"];
export type UpdateEwalletStatus = NonNullable<operations["updateEwalletStatus"]["parameters"]["header"]>;
export type UpdateEwalletStatusResponse = components["schemas"]["inline_response_200_66"];
export type UpdateInvoice = NonNullable<operations["updateInvoice"]["parameters"]["header"]>;
export type UpdateInvoiceItem = NonNullable<operations["updateInvoiceItem"]["parameters"]["header"]>;
export type UpdateInvoiceItemResponse = components["schemas"]["inline_response_200_24"];
export type UpdateInvoiceResponse = components["schemas"]["inline_response_200_22"];
export type UpdateOrder = NonNullable<operations["updateOrder"]["parameters"]["header"]>;
export type UpdateOrderResponse = components["schemas"]["inline_response_200_47"];
export type UpdatePayment = NonNullable<operations["updatePayment"]["parameters"]["header"]>;
export type UpdatePaymentResponse = components["schemas"]["inline_response_200_3"];
export type UpdatePayout = NonNullable<operations["updatePayout"]["parameters"]["header"]>;
export type UpdatePayoutResponse = components["schemas"]["inline_response_200_55"];
export type UpdatePlan = NonNullable<operations["updatePlan"]["parameters"]["header"]>;
export type UpdatePlanResponse = components["schemas"]["inline_response_200_11"];
export type UpdateProduct = NonNullable<operations["updateProduct"]["parameters"]["header"]>;
export type UpdateProductResponse = components["schemas"]["inline_response_200_14"];
export type UpdateReceivingCurrency = NonNullable<operations["updateReceivingCurrency"]["parameters"]["header"]>;
export type UpdateReceivingCurrencyResponse = components["schemas"]["inline_response_200_93"];
export type UpdateRefund = NonNullable<operations["updateRefund"]["parameters"]["header"]>;
export type UpdateRefundResponse = components["schemas"]["inline_response_200_31"];
export type UpdateRequestedCurrency = NonNullable<operations["updateRequestedCurrency"]["parameters"]["header"]>;
export type UpdateRequestedCurrencyResponse = components["schemas"]["inline_response_200_93"];
export type UpdateSKU = NonNullable<operations["updateSKU"]["parameters"]["header"]>;
export type UpdateSKUResponse = components["schemas"]["inline_response_200_44"];
export type UpdateSubscription = NonNullable<operations["updateSubscription"]["parameters"]["header"]>;
export type UpdateSubscriptionItem = NonNullable<operations["updateSubscriptionItem"]["parameters"]["header"]>;
export type UpdateSubscriptionItemResponse = components["schemas"]["inline_response_200_16"];
export type UpdateSubscriptionResponse = components["schemas"]["inline_response_200_6"];
export type UpdatedUser = NonNullable<operations["updatedUser"]["parameters"]["header"]>;
export type UpdatedUserResponse = components["schemas"]["inline_response_200_98"];
export type UploadDocumentsToPayout = NonNullable<operations["uploadDocumentsToPayout"]["parameters"]["header"]>;
export type UploadDocumentsToPayoutResponse = components["schemas"]["inline_response_200_65"];
export type UsageRecordSummaries = NonNullable<operations["usageRecordSummaries"]["parameters"]["header"]>;
export type UsageRecordSummariesResponse = components["schemas"]["inline_response_200_18"];
export type V1AddressesBody = components["schemas"]["v1_addresses_body"];
export type V1CheckoutBody = components["schemas"]["v1_checkout_body"];
export type V1CnlterminationQueryQueriedMerchant = components["schemas"]["v1cnltermination_query_queried_merchant"];
export type V1CnlterminationQueryQueriedMerchantAddress = components["schemas"]["v1cnltermination_query_queried_merchant_address"];
export type V1CnlterminationQueryQueriedMerchantPrincipals = components["schemas"]["v1cnltermination_query_queried_merchant_principals"];
export type V1CnlterminationQueryQueriedMerchantPrincipalsAddress = components["schemas"]["v1cnltermination_query_queried_merchant_principals_address"];
export type V1CnlterminationQuerySearchCriteria = components["schemas"]["v1cnltermination_query_search_criteria"];
export type V1CustomersBody = components["schemas"]["v1_customers_body"];
export type V1EwalletsBody = components["schemas"]["v1_ewallets_body"];
export type V1EwalletsContact = components["schemas"]["v1ewallets_contact"];
export type V1HostedcollectcardCardFields = components["schemas"]["v1hostedcollectcard_card_fields"];
export type V1HosteddisbursebeneficiaryBeneficiaryOptionalFields = components["schemas"]["v1hosteddisbursebeneficiary_beneficiary_optional_fields"];
export type V1IdentitiesBody = components["schemas"]["v1_identities_body"];
export type V1InvoiceItemsBody = components["schemas"]["v1_invoice_items_body"];
export type V1InvoicesBody = components["schemas"]["v1_invoices_body"];
export type V1OrdersBody = components["schemas"]["v1_orders_body"];
export type V1OrdersItems = components["schemas"]["v1orders_items"];
export type V1OrdersorderIdreturnsItems = components["schemas"]["v1ordersorderIdreturns_items"];
export type V1PaymentsBody = components["schemas"]["v1_payments_body"];
export type V1PaymentssubscriptionsSubscriptionItems = components["schemas"]["v1paymentssubscriptions_subscription_items"];
export type V1PayoutsBody = components["schemas"]["v1_payouts_body"];
export type V1PlansBody = components["schemas"]["v1_plans_body"];
export type V1ProductsBody = components["schemas"]["v1_products_body"];
export type V1ProductsPackageDimensions = components["schemas"]["v1products_package_dimensions"];
export type V1RefundsBody = components["schemas"]["v1_refunds_body"];
export type V1SkusBody = components["schemas"]["v1_skus_body"];
export type V1SkusskuIdInventory = components["schemas"]["v1skusskuId_inventory"];
export type V1SkusskuIdPackageDimensions = components["schemas"]["v1skusskuId_package_dimensions"];
export type V1SubscriptionItemsBody = components["schemas"]["v1_subscription_items_body"];
export type V1VirtualAccountsBody = components["schemas"]["v1_virtual_accounts_body"];
export type ValidateBeneficiary = NonNullable<operations["validateBeneficiary"]["parameters"]["header"]>;
export type ValidateBeneficiaryResponse = components["schemas"]["inline_response_200_58"];
export type VerifyHostedAppResponse = components["schemas"]["VerifyHostedAppResponse"];
export type VerifyHostedAppResponseMerchantDetails = components["schemas"]["VerifyHostedAppResponse_merchant_details"];
export type VerifyHostedAppResponseMerchantDetailsMerchantCustomerSupport = components["schemas"]["VerifyHostedAppResponse_merchant_details_merchant_customer_support"];
export type VerifyIdentity = NonNullable<operations["verifyIdentity"]["parameters"]["header"]>;
export type VerifyIdentityResponse = components["schemas"]["inline_response_200_111"];
export type VirtualAccountIssuing = components["schemas"]["VirtualAccountIssuing"];
export type VirtualAccountTransactionResponse = components["schemas"]["VirtualAccountTransactionResponse"];
export type VirtualAccountsByRapydWallet = NonNullable<operations["virtualAccountsByRapydWallet"]["parameters"]["header"]>;
export type VirtualAccountsByRapydWalletResponse = components["schemas"]["inline_response_200_103"];
export type VirtualAccountsTransactionsBody = components["schemas"]["virtual_accounts_transactions_body"];
export type VirtualAccountsVirtualAccountIdBody = components["schemas"]["virtual_accounts_virtualAccountId_body"];
export type VoidInvoice = NonNullable<operations["voidInvoice"]["parameters"]["header"]>;
export type VoidInvoiceResponse = components["schemas"]["inline_response_200_22"];
export type WithdrawFundsFromWalletAccount = NonNullable<operations["withdrawFundsFromWalletAccount"]["parameters"]["header"]>;
export type WithdrawFundsFromWalletAccountResponse = components["schemas"]["inline_response_200_68"];

// API Def

import { Api } from "api-def";



const API = new Api({
  name: "Rapyd API",
  baseUrl: "https://sandboxapi.rapyd.net/",
});

export const getPaymentMethodsTypesByCountry = API.endpoint()
  .paramsOf<"countryId">()
  .responseOf<GetPaymentMethodsTypesByCountryResponse>()
  .queryOf<GetPaymentMethodsTypesByCountry>()
  .requestHeadersOf<GetPaymentMethodsTypesByCountry>()
  .build({
    method: "get",
    path: "/v1/payment_methods/countries/{countryId}",
    id: "getPaymentMethodsTypesByCountry",
  });

export const getPaymentMethodTypeRequiredFields = API.endpoint()
  .paramsOf<"pmtId">()
  .responseOf<GetPaymentMethodTypeRequiredFieldsResponse>()
  .requestHeadersOf<GetPaymentMethodTypeRequiredFields>()
  .build({
    method: "get",
    path: "/v1/payment_methods/{pmtId}/required_fields",
    id: "getPaymentMethodTypeRequiredFields",
  });

export const listPayments = API.endpoint()
  .responseOf<ListPaymentsResponse>()
  .queryOf<ListPayments>()
  .requestHeadersOf<ListPayments>()
  .build({
    method: "get",
    path: "/v1/payments",
    id: "listPayments",
  });

export const createPayment = API.endpoint()
  .responseOf<CreatePaymentResponse>()
  .bodyOf<V1PaymentsBody>()
  .requestHeadersOf<CreatePayment>()
  .build({
    method: "post",
    path: "/v1/payments",
    id: "createPayment",
  });

export const retrievePayment = API.endpoint()
  .paramsOf<"paymentId">()
  .responseOf<RetrievePaymentResponse>()
  .requestHeadersOf<RetrievePayment>()
  .build({
    method: "get",
    path: "/v1/payments/{paymentId}",
    id: "retrievePayment",
  });

export const updatePayment = API.endpoint()
  .paramsOf<"paymentId">()
  .responseOf<UpdatePaymentResponse>()
  .bodyOf<PaymentsPaymentIdBody>()
  .requestHeadersOf<UpdatePayment>()
  .build({
    method: "post",
    path: "/v1/payments/{paymentId}",
    id: "updatePayment",
  });

export const cancelPayment = API.endpoint()
  .paramsOf<"paymentId">()
  .responseOf<CancelPaymentResponse>()
  .requestHeadersOf<CancelPayment>()
  .build({
    method: "delete",
    path: "/v1/payments/{paymentId}",
    id: "cancelPayment",
  });

export const capturePayment = API.endpoint()
  .paramsOf<"paymentId">()
  .responseOf<CapturePaymentResponse>()
  .bodyOf<PaymentIdCaptureBody>()
  .requestHeadersOf<CapturePayment>()
  .build({
    method: "post",
    path: "/v1/payments/{paymentId}/capture",
    id: "capturePayment",
  });

export const completePayment = API.endpoint()
  .responseOf<CompletePaymentResponse>()
  .bodyOf<PaymentsCompletePaymentBody>()
  .requestHeadersOf<CompletePayment>()
  .build({
    method: "post",
    path: "/v1/payments/completePayment",
    id: "completePayment",
  });

export const getHostedPagePayment = API.endpoint()
  .paramsOf<"checkout_token">()
  .responseOf<GetHostedPagePaymentResponse>()
  .requestHeadersOf<GetHostedPagePayment>()
  .build({
    method: "get",
    path: "/v1/checkout/{checkout_token}",
    id: "getHostedPagePayment",
  });

export const generateHostedPagePayment = API.endpoint()
  .responseOf<GenerateHostedPagePaymentResponse>()
  .bodyOf<V1CheckoutBody>()
  .requestHeadersOf<GenerateHostedPagePayment>()
  .build({
    method: "post",
    path: "/v1/checkout",
    id: "generateHostedPagePayment",
  });

export const getSubscriptionList = API.endpoint()
  .responseOf<GetSubscriptionListResponse>()
  .queryOf<GetSubscriptionList>()
  .requestHeadersOf<GetSubscriptionList>()
  .build({
    method: "get",
    path: "/v1/payments/subscriptions",
    id: "getSubscriptionList",
  });

export const createSubscription = API.endpoint()
  .responseOf<CreateSubscriptionResponse>()
  .bodyOf<PaymentsSubscriptionsBody>()
  .requestHeadersOf<CreateSubscription>()
  .build({
    method: "post",
    path: "/v1/payments/subscriptions",
    id: "createSubscription",
  });

export const getSubscription = API.endpoint()
  .paramsOf<"subscriptionId">()
  .responseOf<GetSubscriptionResponse>()
  .requestHeadersOf<GetSubscription>()
  .build({
    method: "get",
    path: "/v1/payments/subscriptions/{subscriptionId}",
    id: "getSubscription",
  });

export const updateSubscription = API.endpoint()
  .paramsOf<"subscriptionId">()
  .responseOf<UpdateSubscriptionResponse>()
  .bodyOf<SubscriptionsSubscriptionIdBody>()
  .requestHeadersOf<UpdateSubscription>()
  .build({
    method: "post",
    path: "/v1/payments/subscriptions/{subscriptionId}",
    id: "updateSubscription",
  });

export const cancelSubscription = API.endpoint()
  .paramsOf<"subscriptionId">()
  .responseOf<CancelSubscriptionResponse>()
  .requestHeadersOf<CancelSubscription>()
  .build({
    method: "delete",
    path: "/v1/payments/subscriptions/{subscriptionId}",
    id: "cancelSubscription",
  });

export const deleteSubscriptionDiscount = API.endpoint()
  .paramsOf<"subscriptionId">()
  .responseOf<DeleteSubscriptionDiscountResponse>()
  .requestHeadersOf<DeleteSubscriptionDiscount>()
  .build({
    method: "delete",
    path: "/v1/payments/subscriptions/{subscriptionId}/discount",
    id: "deleteSubscriptionDiscount",
  });

export const createSubscriptionByHostedPage = API.endpoint()
  .responseOf<CreateSubscriptionByHostedPageResponse>()
  .bodyOf<CheckoutSubscriptionsBody>()
  .requestHeadersOf<CreateSubscriptionByHostedPage>()
  .build({
    method: "post",
    path: "/v1/checkout/subscriptions",
    id: "createSubscriptionByHostedPage",
  });

export const completeSubscriptionCycle = API.endpoint()
  .paramsOf<"subscriptionId">()
  .responseOf<CompleteSubscriptionCycleResponse>()
  .build({
    method: "post",
    path: "/v1/payments/subscriptions/{subscriptionId}/complete_cycle",
    id: "completeSubscriptionCycle",
  });

export const simulateStartNewCycle = API.endpoint()
  .paramsOf<"subscriptionId">()
  .responseOf<SimulateStartNewCycleResponse>()
  .build({
    method: "post",
    path: "/v1/payments/subscriptions/{subscriptionId}/start_new_cycle",
    id: "simulateStartNewCycle",
  });

export const listPlans = API.endpoint()
  .responseOf<ListPlansResponse>()
  .queryOf<ListPlans>()
  .requestHeadersOf<ListPlans>()
  .build({
    method: "get",
    path: "/v1/plans",
    id: "listPlans",
  });

export const createPlan = API.endpoint()
  .responseOf<CreatePlanResponse>()
  .bodyOf<V1PlansBody>()
  .requestHeadersOf<CreatePlan>()
  .build({
    method: "post",
    path: "/v1/plans",
    id: "createPlan",
  });

export const retrievePlan = API.endpoint()
  .paramsOf<"planId">()
  .responseOf<RetrievePlanResponse>()
  .requestHeadersOf<RetrievePlan>()
  .build({
    method: "get",
    path: "/v1/plans/{planId}",
    id: "retrievePlan",
  });

export const updatePlan = API.endpoint()
  .paramsOf<"planId">()
  .responseOf<UpdatePlanResponse>()
  .bodyOf<PlansPlanIdBody>()
  .requestHeadersOf<UpdatePlan>()
  .build({
    method: "post",
    path: "/v1/plans/{planId}",
    id: "updatePlan",
  });

export const deletePlan = API.endpoint()
  .paramsOf<"planId">()
  .responseOf<DeletePlanResponse>()
  .requestHeadersOf<DeletePlan>()
  .build({
    method: "delete",
    path: "/v1/plans/{planId}",
    id: "deletePlan",
  });

export const getProductsList = API.endpoint()
  .responseOf<GetProductsListResponse>()
  .queryOf<GetProductsList>()
  .requestHeadersOf<GetProductsList>()
  .build({
    method: "get",
    path: "/v1/products",
    id: "getProductsList",
  });

export const createProduct = API.endpoint()
  .responseOf<CreateProductResponse>()
  .bodyOf<V1ProductsBody>()
  .requestHeadersOf<CreateProduct>()
  .build({
    method: "post",
    path: "/v1/products",
    id: "createProduct",
  });

export const getProduct = API.endpoint()
  .paramsOf<"productsId">()
  .responseOf<GetProductResponse>()
  .requestHeadersOf<GetProduct>()
  .build({
    method: "get",
    path: "/v1/products/{productsId}",
    id: "getProduct",
  });

export const updateProduct = API.endpoint()
  .paramsOf<"productsId">()
  .responseOf<UpdateProductResponse>()
  .bodyOf<ProductsProductsIdBody>()
  .requestHeadersOf<UpdateProduct>()
  .build({
    method: "post",
    path: "/v1/products/{productsId}",
    id: "updateProduct",
  });

export const deleteProduct = API.endpoint()
  .paramsOf<"productsId">()
  .responseOf<DeleteProductResponse>()
  .requestHeadersOf<DeleteProduct>()
  .build({
    method: "delete",
    path: "/v1/products/{productsId}",
    id: "deleteProduct",
  });

export const listSubscriptionItem = API.endpoint()
  .responseOf<ListSubscriptionItemResponse>()
  .queryOf<ListSubscriptionItem>()
  .requestHeadersOf<ListSubscriptionItem>()
  .build({
    method: "get",
    path: "/v1/subscription_items",
    id: "listSubscriptionItem",
  });

export const createSubscriptionItem = API.endpoint()
  .responseOf<CreateSubscriptionItemResponse>()
  .bodyOf<V1SubscriptionItemsBody>()
  .requestHeadersOf<CreateSubscriptionItem>()
  .build({
    method: "post",
    path: "/v1/subscription_items",
    id: "createSubscriptionItem",
  });

export const retrieveSubscriptionItem = API.endpoint()
  .paramsOf<"subscriptionItemId">()
  .responseOf<RetrieveSubscriptionItemResponse>()
  .requestHeadersOf<RetrieveSubscriptionItem>()
  .build({
    method: "get",
    path: "/v1/subscription_items/{subscriptionItemId}",
    id: "retrieveSubscriptionItem",
  });

export const updateSubscriptionItem = API.endpoint()
  .paramsOf<"subscriptionItemId">()
  .responseOf<UpdateSubscriptionItemResponse>()
  .bodyOf<SubscriptionItemsSubscriptionItemIdBody>()
  .requestHeadersOf<UpdateSubscriptionItem>()
  .build({
    method: "post",
    path: "/v1/subscription_items/{subscriptionItemId}",
    id: "updateSubscriptionItem",
  });

export const deleteSubscriptionItem = API.endpoint()
  .paramsOf<"subscriptionItemId">()
  .responseOf<DeleteSubscriptionItemResponse>()
  .requestHeadersOf<DeleteSubscriptionItem>()
  .build({
    method: "delete",
    path: "/v1/subscription_items/{subscriptionItemId}",
    id: "deleteSubscriptionItem",
  });

export const usageRecordSummaries = API.endpoint()
  .paramsOf<"subscriptionItemId">()
  .responseOf<UsageRecordSummariesResponse>()
  .queryOf<UsageRecordSummaries>()
  .requestHeadersOf<UsageRecordSummaries>()
  .build({
    method: "get",
    path: "/v1/subscription_items/{subscriptionItemId}/usage_record_summaries",
    id: "usageRecordSummaries",
  });

export const createSubscriptionItemUsageRecord = API.endpoint()
  .paramsOf<"subscriptionItemId">()
  .responseOf<CreateSubscriptionItemUsageRecordResponse>()
  .bodyOf<SubscriptionItemIdUsageRecordsBody>()
  .requestHeadersOf<CreateSubscriptionItemUsageRecord>()
  .build({
    method: "post",
    path: "/v1/subscription_items/{subscriptionItemId}/usage_records",
    id: "createSubscriptionItemUsageRecord",
  });

export const getSubscriptionDiscountById = API.endpoint()
  .paramsOf<"discountId">()
  .responseOf<GetSubscriptionDiscountByIdResponse>()
  .requestHeadersOf<GetSubscriptionDiscountById>()
  .build({
    method: "get",
    path: "/v1/subscriptions/discount/{discountId}",
    id: "getSubscriptionDiscountById",
  });

export const listInvoices = API.endpoint()
  .responseOf<ListInvoicesResponse>()
  .queryOf<ListInvoices>()
  .requestHeadersOf<ListInvoices>()
  .build({
    method: "get",
    path: "/v1/invoices",
    id: "listInvoices",
  });

export const createInvoice = API.endpoint()
  .responseOf<CreateInvoiceResponse>()
  .bodyOf<V1InvoicesBody>()
  .requestHeadersOf<CreateInvoice>()
  .build({
    method: "post",
    path: "/v1/invoices",
    id: "createInvoice",
  });

export const retrieveInvoice = API.endpoint()
  .paramsOf<"invoiceId">()
  .responseOf<RetrieveInvoiceResponse>()
  .requestHeadersOf<RetrieveInvoice>()
  .build({
    method: "get",
    path: "/v1/invoices/{invoiceId}",
    id: "retrieveInvoice",
  });

export const updateInvoice = API.endpoint()
  .paramsOf<"invoiceId">()
  .responseOf<UpdateInvoiceResponse>()
  .bodyOf<InvoicesInvoiceIdBody>()
  .requestHeadersOf<UpdateInvoice>()
  .build({
    method: "post",
    path: "/v1/invoices/{invoiceId}",
    id: "updateInvoice",
  });

export const deleteInvoice = API.endpoint()
  .paramsOf<"invoiceId">()
  .responseOf<DeleteInvoiceResponse>()
  .requestHeadersOf<DeleteInvoice>()
  .build({
    method: "delete",
    path: "/v1/invoices/{invoiceId}",
    id: "deleteInvoice",
  });

export const voidInvoice = API.endpoint()
  .paramsOf<"invoiceId">()
  .responseOf<VoidInvoiceResponse>()
  .requestHeadersOf<VoidInvoice>()
  .build({
    method: "post",
    path: "/v1/invoices/{invoiceId}/void",
    id: "voidInvoice",
  });

export const finalizeInvoice = API.endpoint()
  .paramsOf<"invoiceId">()
  .responseOf<FinalizeInvoiceResponse>()
  .requestHeadersOf<FinalizeInvoice>()
  .build({
    method: "post",
    path: "/v1/invoices/{invoiceId}/finalize",
    id: "finalizeInvoice",
  });

export const payInvoice = API.endpoint()
  .paramsOf<"invoiceId">()
  .responseOf<PayInvoiceResponse>()
  .bodyOf<InvoiceIdPayBody>()
  .requestHeadersOf<PayInvoice>()
  .build({
    method: "post",
    path: "/v1/invoices/{invoiceId}/pay",
    id: "payInvoice",
  });

export const markInvoiceUncollectible = API.endpoint()
  .paramsOf<"invoiceId">()
  .responseOf<MarkInvoiceUncollectibleResponse>()
  .requestHeadersOf<MarkInvoiceUncollectible>()
  .build({
    method: "post",
    path: "/v1/invoices/{invoiceId}/mark_uncollectible",
    id: "markInvoiceUncollectible",
  });

export const getInvoiceLines = API.endpoint()
  .paramsOf<"invoiceId">()
  .responseOf<GetInvoiceLinesResponse>()
  .requestHeadersOf<GetInvoiceLines>()
  .build({
    method: "get",
    path: "/v1/invoices/{invoiceId}/lines",
    id: "getInvoiceLines",
  });

export const getUpcomingInvoice = API.endpoint()
  .responseOf<GetUpcomingInvoiceResponse>()
  .queryOf<GetUpcomingInvoice>()
  .requestHeadersOf<GetUpcomingInvoice>()
  .build({
    method: "get",
    path: "/v1/invoices/upcoming",
    id: "getUpcomingInvoice",
  });

export const getInvoiceLinesUpcomingInvoice = API.endpoint()
  .responseOf<GetInvoiceLinesUpcomingInvoiceResponse>()
  .queryOf<GetInvoiceLinesUpcomingInvoice>()
  .requestHeadersOf<GetInvoiceLinesUpcomingInvoice>()
  .build({
    method: "get",
    path: "/v1/invoices/upcoming/lines",
    id: "getInvoiceLinesUpcomingInvoice",
  });

export const listInvoiceItems = API.endpoint()
  .responseOf<ListInvoiceItemsResponse>()
  .queryOf<ListInvoiceItems>()
  .requestHeadersOf<ListInvoiceItems>()
  .build({
    method: "get",
    path: "/v1/invoice_items",
    id: "listInvoiceItems",
  });

export const createInvoiceItem = API.endpoint()
  .responseOf<CreateInvoiceItemResponse>()
  .bodyOf<V1InvoiceItemsBody>()
  .requestHeadersOf<CreateInvoiceItem>()
  .build({
    method: "post",
    path: "/v1/invoice_items",
    id: "createInvoiceItem",
  });

export const getInvoiceItem = API.endpoint()
  .paramsOf<"invoiceItem">()
  .responseOf<GetInvoiceItemResponse>()
  .requestHeadersOf<GetInvoiceItem>()
  .build({
    method: "get",
    path: "/v1/invoice_items/{invoiceItem}",
    id: "getInvoiceItem",
  });

export const updateInvoiceItem = API.endpoint()
  .paramsOf<"invoiceItem">()
  .responseOf<UpdateInvoiceItemResponse>()
  .bodyOf<InvoiceItemsInvoiceItemBody>()
  .requestHeadersOf<UpdateInvoiceItem>()
  .build({
    method: "post",
    path: "/v1/invoice_items/{invoiceItem}",
    id: "updateInvoiceItem",
  });

export const deleteInvoiceItem = API.endpoint()
  .paramsOf<"invoiceItem">()
  .responseOf<DeleteInvoiceItemResponse>()
  .requestHeadersOf<DeleteInvoiceItem>()
  .build({
    method: "delete",
    path: "/v1/invoice_items/{invoiceItem}",
    id: "deleteInvoiceItem",
  });

export const paymentLink = API.endpoint()
  .paramsOf<"paymentLink">()
  .responseOf<PaymentLinkResponse>()
  .requestHeadersOf<PaymentLink>()
  .build({
    method: "get",
    path: "/v1/hosted/collect/payments/{paymentLink}",
    id: "paymentLink",
  });

export const createGroupPayment = API.endpoint()
  .responseOf<CreateGroupPaymentResponse>()
  .bodyOf<PaymentsGroupPaymentsBody>()
  .requestHeadersOf<CreateGroupPayment>()
  .build({
    method: "post",
    path: "/v1/payments/group_payments",
    id: "createGroupPayment",
  });

export const retrieveGroupPaymentId = API.endpoint()
  .paramsOf<"groupPaymentId">()
  .responseOf<RetrieveGroupPaymentIdResponse>()
  .requestHeadersOf<RetrieveGroupPaymentId>()
  .build({
    method: "get",
    path: "/v1/payments/group_payments/{groupPaymentId}",
    id: "retrieveGroupPaymentId",
  });

export const deletegroupPaymentId = API.endpoint()
  .paramsOf<"groupPaymentId">()
  .responseOf<DeletegroupPaymentIdResponse>()
  .requestHeadersOf<DeletegroupPaymentId>()
  .build({
    method: "delete",
    path: "/v1/payments/group_payments/{groupPaymentId}",
    id: "deletegroupPaymentId",
  });

export const listEscrowReleases = API.endpoint()
  .paramsOf<"payment" | "escrow">()
  .responseOf<ListEscrowReleasesResponse>()
  .requestHeadersOf<ListEscrowReleases>()
  .build({
    method: "get",
    path: "/v1/payments/{payment}/escrows/{escrow}/escrow_releases",
    id: "listEscrowReleases",
  });

export const releaseFundsFromEscrow = API.endpoint()
  .paramsOf<"payment" | "escrow">()
  .responseOf<ReleaseFundsFromEscrowResponse>()
  .bodyOf<EscrowEscrowReleasesBody>()
  .requestHeadersOf<ReleaseFundsFromEscrow>()
  .build({
    method: "post",
    path: "/v1/payments/{payment}/escrows/{escrow}/escrow_releases",
    id: "releaseFundsFromEscrow",
  });

export const getEscrow = API.endpoint()
  .paramsOf<"payment" | "escrow">()
  .responseOf<GetEscrowResponse>()
  .requestHeadersOf<GetEscrow>()
  .build({
    method: "get",
    path: "/v1/payments/{payment}/escrows/{escrow}",
    id: "getEscrow",
  });

export const allRefunds = API.endpoint()
  .responseOf<AllRefundsResponse>()
  .queryOf<AllRefunds>()
  .requestHeadersOf<AllRefunds>()
  .build({
    method: "get",
    path: "/v1/refunds",
    id: "allRefunds",
  });

export const requestTotalCreateRefund = API.endpoint()
  .responseOf<RequestTotalCreateRefundResponse>()
  .bodyOf<V1RefundsBody>()
  .requestHeadersOf<RequestTotalCreateRefund>()
  .build({
    method: "post",
    path: "/v1/refunds",
    id: "requestTotal_createRefund",
  });

export const simulateCompleteRefund = API.endpoint()
  .responseOf<SimulateCompleteRefundResponse>()
  .bodyOf<RefundsCompleteBody>()
  .requestHeadersOf<SimulateCompleteRefund>()
  .build({
    method: "post",
    path: "/v1/refunds/complete",
    id: "simulateCompleteRefund",
  });

export const refundGroupPayment = API.endpoint()
  .responseOf<RefundGroupPaymentResponse>()
  .bodyOf<RefundsGroupPaymentsBody>()
  .build({
    method: "post",
    path: "/v1/refunds/group_payments",
    id: "refundGroupPayment",
  });

export const refundByToken = API.endpoint()
  .paramsOf<"refundId">()
  .responseOf<RefundByTokenResponse>()
  .requestHeadersOf<RefundByToken>()
  .build({
    method: "get",
    path: "/v1/refunds/{refundId}",
    id: "refundByToken",
  });

export const updateRefund = API.endpoint()
  .paramsOf<"refundId">()
  .responseOf<UpdateRefundResponse>()
  .bodyOf<RefundsRefundIdBody>()
  .requestHeadersOf<UpdateRefund>()
  .build({
    method: "post",
    path: "/v1/refunds/{refundId}",
    id: "updateRefund",
  });

export const getApplePaySession = API.endpoint()
  .responseOf<GetApplePaySessionResponse>()
  .bodyOf<ApplePayObject>()
  .requestHeadersOf<GetApplePaySession>()
  .build({
    method: "post",
    path: "/v1/digital_wallets/session/apple_pay",
    id: "getApplePaySession",
  });

export const getDisputesListByOrgId = API.endpoint()
  .responseOf<GetDisputesListByOrgIdResponse>()
  .queryOf<GetDisputesListByOrgId>()
  .requestHeadersOf<GetDisputesListByOrgId>()
  .build({
    method: "get",
    path: "/v1/disputes",
    id: "getDisputesListByOrgId",
  });

export const getDispute = API.endpoint()
  .paramsOf<"disputeId">()
  .responseOf<GetDisputeResponse>()
  .requestHeadersOf<GetDispute>()
  .build({
    method: "get",
    path: "/v1/disputes/{disputeId}",
    id: "getDispute",
  });

export const listCustomer = API.endpoint()
  .responseOf<ListCustomerResponse>()
  .queryOf<ListCustomer>()
  .requestHeadersOf<ListCustomer>()
  .build({
    method: "get",
    path: "/v1/customers",
    id: "listCustomer",
  });

export const createCustomer = API.endpoint()
  .responseOf<CreateCustomerResponse>()
  .bodyOf<V1CustomersBody>()
  .requestHeadersOf<CreateCustomer>()
  .build({
    method: "post",
    path: "/v1/customers",
    id: "createCustomer",
  });

export const retrieveCustomer = API.endpoint()
  .paramsOf<"customerId">()
  .responseOf<RetrieveCustomerResponse>()
  .requestHeadersOf<RetrieveCustomer>()
  .build({
    method: "get",
    path: "/v1/customers/{customerId}",
    id: "retrieveCustomer",
  });

export const updateCustomer = API.endpoint()
  .paramsOf<"customerId">()
  .responseOf<UpdateCustomerResponse>()
  .bodyOf<CustomerRequest>()
  .requestHeadersOf<UpdateCustomer>()
  .build({
    method: "post",
    path: "/v1/customers/{customerId}",
    id: "updateCustomer",
  });

export const deleteCustomer = API.endpoint()
  .paramsOf<"customerId">()
  .responseOf<DeleteCustomerResponse>()
  .requestHeadersOf<DeleteCustomer>()
  .build({
    method: "delete",
    path: "/v1/customers/{customerId}",
    id: "deleteCustomer",
  });

export const getCustomerDiscountById = API.endpoint()
  .paramsOf<"discountId">()
  .responseOf<GetCustomerDiscountByIdResponse>()
  .requestHeadersOf<GetCustomerDiscountById>()
  .build({
    method: "get",
    path: "/v1/customers/discount/{discountId}",
    id: "getCustomerDiscountById",
  });

export const deleteCustomerDiscount = API.endpoint()
  .paramsOf<"customerId">()
  .responseOf<DeleteCustomerDiscountResponse>()
  .requestHeadersOf<DeleteCustomerDiscount>()
  .build({
    method: "delete",
    path: "/v1/customers/{customerId}/discount",
    id: "deleteCustomerDiscount",
  });

export const createAddress = API.endpoint()
  .responseOf<CreateAddressResponse>()
  .bodyOf<V1AddressesBody>()
  .requestHeadersOf<CreateAddress>()
  .build({
    method: "post",
    path: "/v1/addresses",
    id: "createAddress",
  });

export const getAddress = API.endpoint()
  .paramsOf<"addressId">()
  .responseOf<GetAddressResponse>()
  .requestHeadersOf<GetAddress>()
  .build({
    method: "get",
    path: "/v1/addresses{addressId}",
    id: "GetAddress",
  });

export const updateAddress = API.endpoint()
  .paramsOf<"addressId">()
  .responseOf<UpdateAddressResponse>()
  .bodyOf<Address>()
  .requestHeadersOf<UpdateAddress>()
  .build({
    method: "post",
    path: "/v1/addresses{addressId}",
    id: "UpdateAddress",
  });

export const deleteAddress = API.endpoint()
  .paramsOf<"addressId">()
  .responseOf<DeleteAddressResponse>()
  .requestHeadersOf<DeleteAddress>()
  .build({
    method: "delete",
    path: "/v1/addresses{addressId}",
    id: "DeleteAddress",
  });

export const getCustomerPaymentMethods = API.endpoint()
  .paramsOf<"customerId">()
  .responseOf<GetCustomerPaymentMethodsResponse>()
  .queryOf<GetCustomerPaymentMethods>()
  .requestHeadersOf<GetCustomerPaymentMethods>()
  .build({
    method: "get",
    path: "/v1/customers/{customerId}/payment_methods",
    id: "getCustomerPaymentMethods",
  });

export const createCustomerPaymentMethod = API.endpoint()
  .paramsOf<"customerId">()
  .responseOf<CreateCustomerPaymentMethodResponse>()
  .bodyOf<CustomerIdPaymentMethodsBody>()
  .requestHeadersOf<CreateCustomerPaymentMethod>()
  .build({
    method: "post",
    path: "/v1/customers/{customerId}/payment_methods",
    id: "createCustomerPaymentMethod",
  });

export const getCustomerPaymentMethod = API.endpoint()
  .paramsOf<"customerId" | "pmtId">()
  .responseOf<GetCustomerPaymentMethodResponse>()
  .requestHeadersOf<GetCustomerPaymentMethod>()
  .build({
    method: "get",
    path: "/v1/customers/{customerId}/payment_methods/{pmtId}",
    id: "getCustomerPaymentMethod",
  });

export const updateCustomerPaymentMethod = API.endpoint()
  .paramsOf<"customerId" | "pmtId">()
  .responseOf<UpdateCustomerPaymentMethodResponse>()
  .bodyOf<CustomerPaymentMethod>()
  .requestHeadersOf<UpdateCustomerPaymentMethod>()
  .build({
    method: "post",
    path: "/v1/customers/{customerId}/payment_methods/{pmtId}",
    id: "updateCustomerPaymentMethod",
  });

export const deleteCustomerPaymentMethod = API.endpoint()
  .paramsOf<"customerId" | "pmtId">()
  .responseOf<DeleteCustomerPaymentMethodResponse>()
  .requestHeadersOf<DeleteCustomerPaymentMethod>()
  .build({
    method: "delete",
    path: "/v1/customers/{customerId}/payment_methods/{pmtId}",
    id: "deleteCustomerPaymentMethod",
  });

export const retrieveSku = API.endpoint()
  .paramsOf<"skuId">()
  .responseOf<RetrieveSKUResponse>()
  .requestHeadersOf<RetrieveSKU>()
  .build({
    method: "get",
    path: "/v1/skus/{skuId}",
    id: "retrieveSKU",
  });

export const updateSku = API.endpoint()
  .paramsOf<"skuId">()
  .responseOf<UpdateSKUResponse>()
  .bodyOf<SkusSkuIdBody>()
  .requestHeadersOf<UpdateSKU>()
  .build({
    method: "post",
    path: "/v1/skus/{skuId}",
    id: "updateSKU",
  });

export const deleteSku = API.endpoint()
  .paramsOf<"skuId">()
  .responseOf<DeleteSKUResponse>()
  .requestHeadersOf<DeleteSKU>()
  .build({
    method: "delete",
    path: "/v1/skus/{skuId}",
    id: "deleteSKU",
  });

export const listSku = API.endpoint()
  .responseOf<ListSKUResponse>()
  .queryOf<ListSKU>()
  .requestHeadersOf<ListSKU>()
  .build({
    method: "get",
    path: "/v1/skus",
    id: "listSKU",
  });

export const createSku = API.endpoint()
  .responseOf<CreateSKUResponse>()
  .bodyOf<V1SkusBody>()
  .requestHeadersOf<CreateSKU>()
  .build({
    method: "post",
    path: "/v1/skus",
    id: "createSKU",
  });

export const listOrder = API.endpoint()
  .responseOf<ListOrderResponse>()
  .queryOf<ListOrder>()
  .requestHeadersOf<ListOrder>()
  .build({
    method: "get",
    path: "/v1/orders",
    id: "listOrder",
  });

export const createOrder = API.endpoint()
  .responseOf<CreateOrderResponse>()
  .bodyOf<V1OrdersBody>()
  .requestHeadersOf<CreateOrder>()
  .build({
    method: "post",
    path: "/v1/orders",
    id: "createOrder",
  });

export const retrieveOrder = API.endpoint()
  .paramsOf<"orderId">()
  .responseOf<RetrieveOrderResponse>()
  .requestHeadersOf<RetrieveOrder>()
  .build({
    method: "get",
    path: "/v1/orders/{orderId}",
    id: "retrieveOrder",
  });

export const updateOrder = API.endpoint()
  .paramsOf<"orderId">()
  .responseOf<UpdateOrderResponse>()
  .bodyOf<OrdersOrderIdBody>()
  .requestHeadersOf<UpdateOrder>()
  .build({
    method: "post",
    path: "/v1/orders/{orderId}",
    id: "updateOrder",
  });

export const returnsOrder = API.endpoint()
  .paramsOf<"orderId">()
  .responseOf<ReturnsOrderResponse>()
  .bodyOf<OrderIdReturnsBody>()
  .requestHeadersOf<ReturnsOrder>()
  .build({
    method: "post",
    path: "/v1/orders/{orderId}/returns",
    id: "returnsOrder",
  });

export const payOrder = API.endpoint()
  .paramsOf<"orderId">()
  .responseOf<PayOrderResponse>()
  .bodyOf<OrderIdPayBody>()
  .requestHeadersOf<PayOrder>()
  .build({
    method: "post",
    path: "/v1/orders/{orderId}/pay",
    id: "payOrder",
  });

export const listOrderReturn = API.endpoint()
  .responseOf<ListOrderReturnResponse>()
  .queryOf<ListOrderReturn>()
  .requestHeadersOf<ListOrderReturn>()
  .build({
    method: "get",
    path: "/v1/order_returns",
    id: "listOrderReturn",
  });

export const retrieveOrderReturn = API.endpoint()
  .paramsOf<"orderReturnsId">()
  .responseOf<RetrieveOrderReturnResponse>()
  .requestHeadersOf<RetrieveOrderReturn>()
  .build({
    method: "get",
    path: "/v1/order_returns/{orderReturnsId}",
    id: "retrieveOrderReturn",
  });

export const listCoupon = API.endpoint()
  .responseOf<ListCouponResponse>()
  .queryOf<ListCoupon>()
  .requestHeadersOf<ListCoupon>()
  .build({
    method: "get",
    path: "/v1/coupons",
    id: "listCoupon",
  });

export const createCoupon = API.endpoint()
  .responseOf<CreateCouponResponse>()
  .bodyOf<Coupon>()
  .requestHeadersOf<CreateCoupon>()
  .build({
    method: "post",
    path: "/v1/coupons",
    id: "createCoupon",
  });

export const retrieveCoupon = API.endpoint()
  .paramsOf<"couponId">()
  .responseOf<RetrieveCouponResponse>()
  .requestHeadersOf<RetrieveCoupon>()
  .build({
    method: "get",
    path: "/v1/coupons/{couponId}",
    id: "retrieveCoupon",
  });

export const updateCoupon = API.endpoint()
  .paramsOf<"couponId">()
  .responseOf<UpdateCouponResponse>()
  .bodyOf<Coupon>()
  .requestHeadersOf<UpdateCoupon>()
  .build({
    method: "post",
    path: "/v1/coupons/{couponId}",
    id: "updateCoupon",
  });

export const deleteCoupon = API.endpoint()
  .paramsOf<"couponId">()
  .responseOf<DeleteCouponResponse>()
  .requestHeadersOf<DeleteCoupon>()
  .build({
    method: "delete",
    path: "/v1/coupons/{couponId}",
    id: "deleteCoupon",
  });

export const getPayoutMethodTypesDetails = API.endpoint()
  .paramsOf<"pomt">()
  .responseOf<GetPayoutMethodTypesDetailsResponse>()
  .queryOf<GetPayoutMethodTypesDetails>()
  .requestHeadersOf<GetPayoutMethodTypesDetails>()
  .build({
    method: "get",
    path: "/v1/payout_methods/{pomt}/required_fields",
    id: "getPayoutMethodTypesDetails",
  });

export const listPayouts = API.endpoint()
  .responseOf<ListPayoutsResponse>()
  .queryOf<ListPayouts>()
  .requestHeadersOf<ListPayouts>()
  .build({
    method: "get",
    path: "/v1/payouts",
    id: "listPayouts",
  });

export const createPayout = API.endpoint()
  .responseOf<CreatePayoutResponse>()
  .bodyOf<V1PayoutsBody>()
  .requestHeadersOf<CreatePayout>()
  .build({
    method: "post",
    path: "/v1/payouts",
    id: "createPayout",
  });

export const createMassPayout = API.endpoint()
  .responseOf<CreateMassPayoutResponse>()
  .requestHeadersOf<CreateMassPayout>()
  .build({
    method: "post",
    path: "/v1/batch_process/files/mass_payout_pci",
    id: "createMassPayout",
  });

export const createBeneficiary = API.endpoint()
  .responseOf<CreateBeneficiaryResponse>()
  .bodyOf<PayoutsBeneficiaryBody>()
  .requestHeadersOf<CreateBeneficiary>()
  .build({
    method: "post",
    path: "/v1/payouts/beneficiary",
    id: "createBeneficiary",
  });

export const createExtendedBeneficiary = API.endpoint()
  .responseOf<CreateExtendedBeneficiaryResponse>()
  .bodyOf<PayoutsExtendedBeneficiaryBody>()
  .requestHeadersOf<CreateExtendedBeneficiary>()
  .build({
    method: "post",
    path: "/v1/payouts/extended_beneficiary",
    id: "createExtendedBeneficiary",
  });

export const validateBeneficiary = API.endpoint()
  .responseOf<ValidateBeneficiaryResponse>()
  .bodyOf<BeneficiaryValidateBody>()
  .requestHeadersOf<ValidateBeneficiary>()
  .build({
    method: "post",
    path: "/v1/payouts/beneficiary/validate",
    id: "validateBeneficiary",
  });

export const getBeneficiary = API.endpoint()
  .paramsOf<"beneficiaryId">()
  .responseOf<GetBeneficiaryResponse>()
  .requestHeadersOf<GetBeneficiary>()
  .build({
    method: "get",
    path: "/v1/payouts/beneficiary/{beneficiaryId}",
    id: "getBeneficiary",
  });

export const updateBeneficiary = API.endpoint()
  .paramsOf<"beneficiaryId">()
  .responseOf<UpdateBeneficiaryResponse>()
  .bodyOf<BeneficiaryBeneficiaryIdBody>()
  .requestHeadersOf<UpdateBeneficiary>()
  .build({
    method: "post",
    path: "/v1/payouts/beneficiary/{beneficiaryId}",
    id: "updateBeneficiary",
  });

export const deleteBeneficiary = API.endpoint()
  .paramsOf<"beneficiaryId">()
  .responseOf<DeleteBeneficiaryResponse>()
  .requestHeadersOf<DeleteBeneficiary>()
  .build({
    method: "delete",
    path: "/v1/payouts/beneficiary/{beneficiaryId}",
    id: "deleteBeneficiary",
  });

export const simulateCompletePayout = API.endpoint()
  .paramsOf<"payoutToken" | "amount">()
  .responseOf<SimulateCompletePayoutResponse>()
  .requestHeadersOf<SimulateCompletePayout>()
  .build({
    method: "post",
    path: "/v1/payouts/complete/{payoutToken}/{amount}",
    id: "simulateCompletePayout",
  });

export const beneficiaryTokenizationPage = API.endpoint()
  .responseOf<BeneficiaryTokenizationPageResponse>()
  .bodyOf<DisburseBeneficiaryBody>()
  .requestHeadersOf<BeneficiaryTokenizationPage>()
  .build({
    method: "post",
    path: "/v1/hosted/disburse/beneficiary",
    id: "beneficiaryTokenizationPage",
  });

export const confirmPayout = API.endpoint()
  .paramsOf<"payoutToken">()
  .responseOf<ConfirmPayoutResponse>()
  .requestHeadersOf<ConfirmPayout>()
  .build({
    method: "post",
    path: "/v1/payouts/confirm/{payoutToken}",
    id: "confirmPayout",
  });

export const createSender = API.endpoint()
  .responseOf<CreateSenderResponse>()
  .bodyOf<PayoutsSenderBody>()
  .requestHeadersOf<CreateSender>()
  .build({
    method: "post",
    path: "/v1/payouts/sender",
    id: "createSender",
  });

export const getPayer = API.endpoint()
  .paramsOf<"senderId">()
  .responseOf<GetPayerResponse>()
  .requestHeadersOf<GetPayer>()
  .build({
    method: "get",
    path: "/v1/payouts/sender/{senderId}",
    id: "getPayer",
  });

export const deletePayer = API.endpoint()
  .paramsOf<"senderId">()
  .responseOf<DeletePayerResponse>()
  .requestHeadersOf<DeletePayer>()
  .build({
    method: "delete",
    path: "/v1/payouts/sender/{senderId}",
    id: "deletePayer",
  });

export const getPayoutMethodTypes = API.endpoint()
  .responseOf<GetPayoutMethodTypesResponse>()
  .queryOf<GetPayoutMethodTypes>()
  .requestHeadersOf<GetPayoutMethodTypes>()
  .build({
    method: "get",
    path: "/v1/payout_methods",
    id: "getPayoutMethodTypes",
  });

export const getPayout = API.endpoint()
  .paramsOf<"payoutId">()
  .responseOf<GetPayoutResponse>()
  .requestHeadersOf<GetPayout>()
  .build({
    method: "get",
    path: "/v1/payouts/{payoutId}",
    id: "getPayout",
  });

export const updatePayout = API.endpoint()
  .paramsOf<"payoutId">()
  .responseOf<UpdatePayoutResponse>()
  .bodyOf<PayoutsPayoutIdBody>()
  .requestHeadersOf<UpdatePayout>()
  .build({
    method: "post",
    path: "/v1/payouts/{payoutId}",
    id: "updatePayout",
  });

export const cancelPayout = API.endpoint()
  .paramsOf<"payoutId">()
  .responseOf<CancelPayoutResponse>()
  .requestHeadersOf<CancelPayout>()
  .build({
    method: "delete",
    path: "/v1/payouts/{payoutId}",
    id: "cancelPayout",
  });

export const simulatePayoutReturnedStatus = API.endpoint()
  .paramsOf<"payout">()
  .responseOf<SimulatePayoutReturnedStatusResponse>()
  .requestHeadersOf<SimulatePayoutReturnedStatus>()
  .build({
    method: "post",
    path: "/v1/payouts/return/{payout}",
    id: "simulatePayoutReturnedStatus",
  });

export const uploadDocumentsToPayout = API.endpoint()
  .paramsOf<"payout">()
  .responseOf<UploadDocumentsToPayoutResponse>()
  .requestHeadersOf<UploadDocumentsToPayout>()
  .build({
    method: "post",
    path: "/v1/files/documents/payout/{payout}",
    id: "uploadDocumentsToPayout",
  });

export const listDocumentsOfPayout = API.endpoint()
  .paramsOf<"payout">()
  .responseOf<ListDocumentsOfPayoutResponse>()
  .requestHeadersOf<ListDocumentsOfPayout>()
  .build({
    method: "get",
    path: "/v1/payouts/{payout}/documents/",
    id: "listDocumentsOfPayout",
  });

export const deleteDocumentsOfPayout = API.endpoint()
  .paramsOf<"payout">()
  .responseOf<DeleteDocumentsOfPayoutResponse>()
  .requestHeadersOf<DeleteDocumentsOfPayout>()
  .build({
    method: "delete",
    path: "/v1/payouts/{payout}/documents/",
    id: "deleteDocumentsOfPayout",
  });

export const getDocumentOfPayout = API.endpoint()
  .paramsOf<"payout" | "file_id">()
  .responseOf<GetDocumentOfPayoutResponse>()
  .requestHeadersOf<GetDocumentOfPayout>()
  .build({
    method: "get",
    path: "/v1/payouts/{payout}/documents/{file_id}",
    id: "getDocumentOfPayout",
  });

export const deleteDocumentOfPayout = API.endpoint()
  .paramsOf<"payout" | "file_id">()
  .responseOf<DeleteDocumentOfPayoutResponse>()
  .requestHeadersOf<DeleteDocumentOfPayout>()
  .build({
    method: "delete",
    path: "/v1/payouts/{payout}/documents/{file_id}",
    id: "deleteDocumentOfPayout",
  });

export const fundsTransfer = API.endpoint()
  .responseOf<FundsTransferResponse>()
  .bodyOf<AccountTransferBody>()
  .requestHeadersOf<FundsTransfer>()
  .build({
    method: "post",
    path: "/v1/account/transfer",
    id: "fundsTransfer",
  });

export const setFundsTransferResponse = API.endpoint()
  .responseOf<SetFundsTransferResponseResponse>()
  .bodyOf<TransferResponseBody>()
  .requestHeadersOf<SetFundsTransferResponse>()
  .build({
    method: "post",
    path: "/v1/account/transfer/response",
    id: "setFundsTransferResponse",
  });

export const addFundsToWalletAccount = API.endpoint()
  .responseOf<AddFundsToWalletAccountResponse>()
  .bodyOf<AccountDepositBody>()
  .requestHeadersOf<AddFundsToWalletAccount>()
  .build({
    method: "post",
    path: "/v1/account/deposit",
    id: "addFundsToWalletAccount",
  });

export const detailsOfAddFundstoWalletAccount = API.endpoint()
  .paramsOf<"id">()
  .responseOf<DetailsOfAddFundstoWalletAccountResponse>()
  .requestHeadersOf<DetailsOfAddFundstoWalletAccount>()
  .build({
    method: "get",
    path: "/v1/account/deposit/{id}",
    id: "detailsOfAddFundstoWalletAccount",
  });

export const withdrawFundsFromWalletAccount = API.endpoint()
  .responseOf<WithdrawFundsFromWalletAccountResponse>()
  .bodyOf<AccountWithdrawBody>()
  .requestHeadersOf<WithdrawFundsFromWalletAccount>()
  .build({
    method: "post",
    path: "/v1/account/withdraw",
    id: "withdrawFundsFromWalletAccount",
  });

export const getDetailsOfRemoveFundsRequest = API.endpoint()
  .paramsOf<"id">()
  .responseOf<GetDetailsOfRemoveFundsRequestResponse>()
  .requestHeadersOf<GetDetailsOfRemoveFundsRequest>()
  .build({
    method: "get",
    path: "/v1/account/withdraw{id}",
    id: "getDetailsOfRemoveFundsRequest",
  });

export const putFundsOnHold = API.endpoint()
  .responseOf<PutFundsOnHoldResponse>()
  .bodyOf<BalanceHoldBody>()
  .requestHeadersOf<PutFundsOnHold>()
  .build({
    method: "post",
    path: "/v1/ewallets/accounts/balance/hold",
    id: "putFundsOnHold",
  });

export const getEwalletContacts = API.endpoint()
  .paramsOf<"ewalletId">()
  .responseOf<GetEwalletContactsResponse>()
  .requestHeadersOf<GetEwalletContacts>()
  .build({
    method: "get",
    path: "/v1/ewallets/{ewalletId}/contacts",
    id: "getEwalletContacts",
  });

export const createEwalletContact = API.endpoint()
  .paramsOf<"ewalletId">()
  .responseOf<CreateEwalletContactResponse>()
  .bodyOf<EwalletIdContactsBody>()
  .requestHeadersOf<CreateEwalletContact>()
  .build({
    method: "post",
    path: "/v1/ewallets/{ewalletId}/contacts",
    id: "createEwalletContact",
  });

export const getEwalletContact = API.endpoint()
  .paramsOf<"ewalletId" | "contactId">()
  .responseOf<GetEwalletContactResponse>()
  .requestHeadersOf<GetEwalletContact>()
  .build({
    method: "get",
    path: "/v1/ewallets/{ewalletId}/contacts/{contactId}",
    id: "getEwalletContact",
  });

export const updateEwalletContact = API.endpoint()
  .paramsOf<"ewalletId" | "contactId">()
  .responseOf<UpdateEwalletContactResponse>()
  .bodyOf<Contact>()
  .requestHeadersOf<UpdateEwalletContact>()
  .build({
    method: "post",
    path: "/v1/ewallets/{ewalletId}/contacts/{contactId}",
    id: "updateEwalletContact",
  });

export const deleteEwalletContact = API.endpoint()
  .paramsOf<"ewalletId" | "contactId">()
  .responseOf<DeleteEwalletContactResponse>()
  .requestHeadersOf<DeleteEwalletContact>()
  .build({
    method: "delete",
    path: "/v1/ewallets/{ewalletId}/contacts/{contactId}",
    id: "deleteEwalletContact",
  });

export const getEwalletContactComplianceLevels = API.endpoint()
  .paramsOf<"ewalletId" | "contactId">()
  .responseOf<GetEwalletContactComplianceLevelsResponse>()
  .requestHeadersOf<GetEwalletContactComplianceLevels>()
  .build({
    method: "get",
    path: "/v1/ewallets/{ewalletId}/contacts/{contactId}/compliance_levels",
    id: "getEwalletContactComplianceLevels",
  });



export const getCardIssuingList = API.endpoint()
  .responseOf<GetCardIssuingListResponse>()
  .queryOf<GetCardIssuingList>()
  .requestHeadersOf<GetCardIssuingList>()
  .build({
    method: "get",
    path: "/v1/issuing/cards",
    id: "getCardIssuingList",
  });

export const issueCard = API.endpoint()
  .responseOf<IssueCardResponse>()
  .bodyOf<IssuingCardsBody>()
  .requestHeadersOf<IssueCard>()
  .build({
    method: "post",
    path: "/v1/issuing/cards",
    id: "issueCard",
  });

export const getCardIssuingDetails = API.endpoint()
  .paramsOf<"cardId">()
  .responseOf<GetCardIssuingDetailsResponse>()
  .requestHeadersOf<GetCardIssuingDetails>()
  .build({
    method: "get",
    path: "/v1/issuing/cards/{cardId}",
    id: "getCardIssuingDetails",
  });

export const activateCard = API.endpoint()
  .responseOf<ActivateCardResponse>()
  .bodyOf<CardsActivateBody>()
  .requestHeadersOf<ActivateCard>()
  .build({
    method: "post",
    path: "/v1/issuing/cards/activate",
    id: "activateCard",
  });

export const hostedActivateCard = API.endpoint()
  .responseOf<HostedActivateCardResponse>()
  .bodyOf<IssuingActivateCardBody>()
  .requestHeadersOf<HostedActivateCard>()
  .build({
    method: "post",
    path: "/v1/hosted/issuing/activate_card",
    id: "hostedActivateCard",
  });

export const hostedCardPin = API.endpoint()
  .responseOf<HostedCardPINResponse>()
  .bodyOf<IssuingPinBody>()
  .requestHeadersOf<HostedCardPIN>()
  .build({
    method: "post",
    path: "/v1/hosted/issuing/pin",
    id: "hostedCardPIN",
  });

export const modifyCard = API.endpoint()
  .responseOf<ModifyCardResponse>()
  .bodyOf<CardsPersonalizeBody>()
  .requestHeadersOf<ModifyCard>()
  .build({
    method: "post",
    path: "/v1/issuing/cards/personalize",
    id: "modifyCard",
  });

export const updateCardStatus = API.endpoint()
  .responseOf<UpdateCardStatusResponse>()
  .bodyOf<CardsStatusBody>()
  .requestHeadersOf<UpdateCardStatus>()
  .build({
    method: "post",
    path: "/v1/issuing/cards/status",
    id: "updateCardStatus",
  });

export const getCardIssuingTransactions = API.endpoint()
  .paramsOf<"cardId">()
  .responseOf<GetCardIssuingTransactionsResponse>()
  .queryOf<GetCardIssuingTransactions>()
  .requestHeadersOf<GetCardIssuingTransactions>()
  .build({
    method: "get",
    path: "/v1/issuing/cards/{cardId}/transactions",
    id: "getCardIssuingTransactions",
  });

export const getCardIssuingTransaction = API.endpoint()
  .paramsOf<"cardId" | "transactionId">()
  .responseOf<GetCardIssuingTransactionResponse>()
  .requestHeadersOf<GetCardIssuingTransaction>()
  .build({
    method: "get",
    path: "/v1/issuing/cards/{cardId}/transactions/{transactionId}",
    id: "getCardIssuingTransaction",
  });

export const setPinCode = API.endpoint()
  .responseOf<SetPINCodeResponse>()
  .bodyOf<CardsPinBody>()
  .requestHeadersOf<SetPINCode>()
  .build({
    method: "post",
    path: "/v1/issuing/cards/pin",
    id: "setPINCode",
  });

export const addCardtoGooglePay = API.endpoint()
  .paramsOf<"card_id">()
  .responseOf<AddCardtoGooglePayResponse>()
  .bodyOf<CardTokensGooglePayBody>()
  .requestHeadersOf<AddCardtoGooglePay>()
  .build({
    method: "post",
    path: "/v1/issuing/cards/{card_id}/card_tokens/google_pay",
    id: "addCardtoGooglePay",
  });

export const createCardToken = API.endpoint()
  .responseOf<CreateCardTokenResponse>()
  .bodyOf<CollectCardBody>()
  .requestHeadersOf<CreateCardToken>()
  .build({
    method: "post",
    path: "/v1/hosted/collect/card/",
    id: "createCardToken",
  });

export const simulateBlockCard = API.endpoint()
  .responseOf<SimulateBlockCardResponse>()
  .bodyOf<CardsSimulateBlockBody>()
  .requestHeadersOf<SimulateBlockCard>()
  .build({
    method: "post",
    path: "/v1/issuing/cards/simulate_block",
    id: "simulateBlockCard",
  });

export const simulateCardTransactionAuthorizationRequestEea = API.endpoint()
  .responseOf<SimulateCardTransactionAuthorizationRequestEEAResponse>()
  .bodyOf<CardsAuthorizationBody>()
  .requestHeadersOf<SimulateCardTransactionAuthorizationRequestEEA>()
  .build({
    method: "post",
    path: "/v1/issuing/cards/authorization",
    id: "simulateCardTransactionAuthorizationRequestEEA",
  });

export const simulateCardTransactionAuthorizationReversalEea = API.endpoint()
  .responseOf<SimulateCardTransactionAuthorizationReversalEEAResponse>()
  .bodyOf<CardsReversalBody>()
  .requestHeadersOf<SimulateCardTransactionAuthorizationReversalEEA>()
  .build({
    method: "post",
    path: "/v1/issuing/cards/reversal",
    id: "simulateCardTransactionAuthorizationReversalEEA",
  });

export const simulateClearingCardTransactionEea = API.endpoint()
  .responseOf<SimulateClearingCardTransactionEEAResponse>()
  .bodyOf<CardsClearingBody>()
  .requestHeadersOf<SimulateClearingCardTransactionEEA>()
  .build({
    method: "post",
    path: "/v1/issuing/cards/clearing",
    id: "simulateClearingCardTransactionEEA",
  });

export const simulateCardRefundEea = API.endpoint()
  .responseOf<SimulateCardRefundEEAResponse>()
  .bodyOf<CardsRefundBody>()
  .requestHeadersOf<SimulateCardRefundEEA>()
  .build({
    method: "post",
    path: "/v1/issuing/cards/refund",
    id: "simulateCardRefundEEA",
  });

export const simulateCardTransactionAdjustmentEea = API.endpoint()
  .responseOf<SimulateCardTransactionAdjustmentEEAResponse>()
  .bodyOf<CardsAdjustmentBody>()
  .requestHeadersOf<SimulateCardTransactionAdjustmentEEA>()
  .build({
    method: "post",
    path: "/v1/issuing/cards/adjustment",
    id: "SimulateCardTransactionAdjustmentEEA",
  });

export const createVirtualAccount = API.endpoint()
  .responseOf<CreateVirtualAccountResponse>()
  .bodyOf<V1VirtualAccountsBody>()
  .requestHeadersOf<CreateVirtualAccount>()
  .build({
    method: "post",
    path: "/v1/virtual_accounts",
    id: "createVirtualAccount",
  });

export const simulateBankTransferToVirtualAccount = API.endpoint()
  .responseOf<SimulateBankTransferToVirtualAccountResponse>()
  .bodyOf<VirtualAccountsTransactionsBody>()
  .requestHeadersOf<SimulateBankTransferToVirtualAccount>()
  .build({
    method: "post",
    path: "/v1/virtual_accounts/transactions",
    id: "simulateBankTransferToVirtualAccount",
  });

export const retrieveVirtualAccount = API.endpoint()
  .paramsOf<"virtualAccountId">()
  .responseOf<RetrieveVirtualAccountResponse>()
  .build({
    method: "get",
    path: "/v1/virtual_accounts/{virtualAccountId}",
    id: "retrieveVirtualAccount",
  });

export const updateRequestedCurrency = API.endpoint()
  .paramsOf<"virtualAccountId">()
  .responseOf<UpdateRequestedCurrencyResponse>()
  .bodyOf<VirtualAccountsVirtualAccountIdBody>()
  .requestHeadersOf<UpdateRequestedCurrency>()
  .build({
    method: "post",
    path: "/v1/virtual_accounts/{virtualAccountId}",
    id: "updateRequestedCurrency",
  });

export const closeIssuing = API.endpoint()
  .paramsOf<"virtualAccountId">()
  .responseOf<CloseIssuingResponse>()
  .requestHeadersOf<CloseIssuing>()
  .build({
    method: "delete",
    path: "/v1/virtual_accounts/{virtualAccountId}",
    id: "closeIssuing",
  });

export const capabilitiesOfVirtualAccounts = API.endpoint()
  .paramsOf<"country">()
  .responseOf<CapabilitiesOfVirtualAccountsResponse>()
  .requestHeadersOf<CapabilitiesOfVirtualAccounts>()
  .build({
    method: "get",
    path: "/v1/virtual_accounts/capabilities/{country}",
    id: "capabilitiesOfVirtualAccounts",
  });

export const getDailyRate = API.endpoint()
  .responseOf<GetDailyRateResponse>()
  .queryOf<GetDailyRate>()
  .build({
    method: "get",
    path: "/v1/fx_rate",
    id: "getDailyRate",
  });

export const getUsers = API.endpoint()
  .responseOf<GetUsersResponse>()
  .queryOf<GetUsers>()
  .requestHeadersOf<GetUsers>()
  .build({
    method: "get",
    path: "/v1/ewallets",
    id: "getUsers",
  });

export const createUser = API.endpoint()
  .responseOf<CreateUserResponse>()
  .bodyOf<V1EwalletsBody>()
  .requestHeadersOf<CreateUser>()
  .build({
    method: "post",
    path: "/v1/ewallets",
    id: "createUser",
  });

export const getUser = API.endpoint()
  .paramsOf<"ewalletToken">()
  .responseOf<GetUserResponse>()
  .requestHeadersOf<GetUser>()
  .build({
    method: "get",
    path: "/v1/ewallets/{ewalletToken}",
    id: "getUser",
  });

export const updatedUser = API.endpoint()
  .paramsOf<"ewalletToken">()
  .responseOf<UpdatedUserResponse>()
  .bodyOf<EwalletsEwalletTokenBody>()
  .requestHeadersOf<UpdatedUser>()
  .build({
    method: "post",
    path: "/v1/ewallets/{ewalletToken}",
    id: "updatedUser",
  });

export const deleteUser = API.endpoint()
  .paramsOf<"ewalletToken">()
  .responseOf<DeleteUserResponse>()
  .requestHeadersOf<DeleteUser>()
  .build({
    method: "delete",
    path: "/v1/ewallets/{ewalletToken}",
    id: "deleteUser",
  });

export const updateEwalletStatus = API.endpoint()
  .paramsOf<"ewalletToken" | "status">()
  .responseOf<UpdateEwalletStatusResponse>()
  .requestHeadersOf<UpdateEwalletStatus>()
  .build({
    method: "post",
    path: "/v1/ewallets/{ewalletToken}/statuses/{status}",
    id: "updateEwalletStatus",
  });

export const setAccountLimit = API.endpoint()
  .paramsOf<"walletId">()
  .responseOf<SetAccountLimitResponse>()
  .bodyOf<AccountLimitsBody>()
  .requestHeadersOf<SetAccountLimit>()
  .build({
    method: "post",
    path: "/v1/ewallets/{walletId}/account/limits",
    id: "setAccountLimit",
  });

export const removeAccountLimit = API.endpoint()
  .paramsOf<"walletId">()
  .responseOf<RemoveAccountLimitResponse>()
  .requestHeadersOf<RemoveAccountLimit>()
  .build({
    method: "delete",
    path: "/v1/ewallets/{walletId}/account/limits",
    id: "removeAccountLimit",
  });

export const getUserAccounts = API.endpoint()
  .paramsOf<"walletId">()
  .responseOf<GetUserAccountsResponse>()
  .requestHeadersOf<GetUserAccounts>()
  .build({
    method: "get",
    path: "/v1/ewallets/{walletId}/accounts",
    id: "getUserAccounts",
  });

export const getUserTransactions = API.endpoint()
  .paramsOf<"walletId">()
  .responseOf<GetUserTransactionsResponse>()
  .queryOf<GetUserTransactions>()
  .requestHeadersOf<GetUserTransactions>()
  .build({
    method: "get",
    path: "/v1/ewallets/{walletId}/transactions",
    id: "getUserTransactions",
  });

export const getUserTransactionDetails = API.endpoint()
  .paramsOf<"walletId" | "transactionId">()
  .responseOf<GetUserTransactionDetailsResponse>()
  .requestHeadersOf<GetUserTransactionDetails>()
  .build({
    method: "get",
    path: "/v1/ewallets/{walletId}/transactions/{transactionId}",
    id: "getUserTransactionDetails",
  });

export const virtualAccountsByRapydWallet = API.endpoint()
  .paramsOf<"ewallet">()
  .responseOf<VirtualAccountsByRapydWalletResponse>()
  .requestHeadersOf<VirtualAccountsByRapydWallet>()
  .build({
    method: "get",
    path: "/v1/ewallets/{ewallet}/virtual_accounts",
    id: "virtualAccountsByRapydWallet",
  });

export const getFxRate = API.endpoint()
  .responseOf<GetFXRateResponse>()
  .queryOf<GetFXRate>()
  .requestHeadersOf<GetFXRate>()
  .build({
    method: "get",
    path: "/v1/fx_rates/",
    id: "getFXRate",
  });

export const getWebhook = API.endpoint()
  .paramsOf<"webhook">()
  .responseOf<GetWebhookResponse>()
  .requestHeadersOf<GetWebhook>()
  .build({
    method: "get",
    path: "/v1/webhooks/{webhook}",
    id: "getWebhook",
  });

export const resendWebhook = API.endpoint()
  .paramsOf<"webhook">()
  .responseOf<ResendWebhookResponse>()
  .requestHeadersOf<ResendWebhook>()
  .build({
    method: "post",
    path: "/v1/webhooks/{webhook}",
    id: "resendWebhook",
  });

export const listWebhooks = API.endpoint()
  .responseOf<ListWebhooksResponse>()
  .queryOf<ListWebhooks>()
  .build({
    method: "get",
    path: "/v1/webhooks",
    id: "listWebhooks",
  });

export const createIssuing = API.endpoint()
  .responseOf<CreateIssuingResponse>()
  .bodyOf<IssuingBankaccountsBody>()
  .requestHeadersOf<CreateIssuing>()
  .build({
    method: "post",
    path: "/v1/issuing/bankaccounts",
    id: "createIssuing",
  });

export const simulateCompleteBankAccountIssuingTransaction = API.endpoint()
  .responseOf<SimulateCompleteBankAccountIssuingTransactionResponse>()
  .bodyOf<BankaccountsBankaccounttransfertobankaccountBody>()
  .requestHeadersOf<SimulateCompleteBankAccountIssuingTransaction>()
  .build({
    method: "post",
    path: "/v1/issuing/bankaccounts/bankaccounttransfertobankaccount",
    id: "simulateCompleteBankAccountIssuingTransaction",
  });

export const getRemitterDetails = API.endpoint()
  .paramsOf<"virtualAccountId" | "transaction_id">()
  .responseOf<GetRemitterDetailsResponse>()
  .requestHeadersOf<GetRemitterDetails>()
  .build({
    method: "get",
    path: "/v1/issuing/bankaccounts/remitters/{virtualAccountId}/transactions/{transaction_id}",
    id: "getRemitterDetails",
  });

export const retrieveIssuingByRapydToken = API.endpoint()
  .paramsOf<"virtualAccountId">()
  .responseOf<RetrieveIssuingByRapydTokenResponse>()
  .requestHeadersOf<RetrieveIssuingByRapydToken>()
  .build({
    method: "get",
    path: "/v1/issuing/bankaccounts/{virtualAccountId}",
    id: "retrieveIssuingByRapydToken",
  });

export const updateReceivingCurrency = API.endpoint()
  .paramsOf<"virtualAccountId">()
  .responseOf<UpdateReceivingCurrencyResponse>()
  .bodyOf<BankaccountsVirtualAccountIdBody>()
  .requestHeadersOf<UpdateReceivingCurrency>()
  .build({
    method: "post",
    path: "/v1/issuing/bankaccounts/{virtualAccountId}",
    id: "updateReceivingCurrency",
  });

export const retrieveIssuingTransaction = API.endpoint()
  .paramsOf<"virtualAccountId" | "transactionId">()
  .responseOf<RetrieveIssuingTransactionResponse>()
  .requestHeadersOf<RetrieveIssuingTransaction>()
  .build({
    method: "get",
    path: "/v1/issuing/bankaccounts/{virtualAccountId}/transactions/{transactionId}",
    id: "retrieveIssuingTransaction",
  });

export const createPaymentLink = API.endpoint()
  .responseOf<CreatePaymentLinkResponse>()
  .bodyOf<CollectPaymentsBody>()
  .requestHeadersOf<CreatePaymentLink>()
  .build({
    method: "post",
    path: "/v1/hosted/collect/payments/",
    id: "createPaymentLink",
  });

export const verifyIdentity = API.endpoint()
  .responseOf<VerifyIdentityResponse>()
  .bodyOf<V1IdentitiesBody>()
  .requestHeadersOf<VerifyIdentity>()
  .build({
    method: "post",
    path: "/v1/identities",
    id: "verifyIdentity",
  });

export const getKycIdVerificationSupportedDocTypes = API.endpoint()
  .responseOf<GetKycIdVerificationSupportedDocTypesResponse>()
  .queryOf<GetKycIdVerificationSupportedDocTypes>()
  .requestHeadersOf<GetKycIdVerificationSupportedDocTypes>()
  .build({
    method: "get",
    path: "/v1/identities/types",
    id: "getKycIdVerificationSupportedDocTypes",
  });

export const getApplicationTypesByCountry = API.endpoint()
  .paramsOf<"country">()
  .responseOf<GetApplicationTypesByCountryResponse>()
  .requestHeadersOf<GetApplicationTypesByCountry>()
  .build({
    method: "get",
    path: "/v1/verify/applications/types/country/{country}",
    id: "getApplicationTypesByCountry",
  });

export const getApplicationStatus = API.endpoint()
  .paramsOf<"application">()
  .responseOf<GetApplicationStatusResponse>()
  .requestHeadersOf<GetApplicationStatus>()
  .build({
    method: "get",
    path: "/v1/verify/applications/status/{application}",
    id: "getApplicationStatus",
  });

export const createHostedApplicationToken = API.endpoint()
  .responseOf<CreateHostedApplicationTokenResponse>()
  .bodyOf<ApplicationsHostedBody>()
  .requestHeadersOf<CreateHostedApplicationToken>()
  .build({
    method: "post",
    path: "/v1/verify/applications/hosted",
    id: "createHostedApplicationToken",
  });

export const getHostedApplicationByToken = API.endpoint()
  .paramsOf<"verifyAppId">()
  .responseOf<GetHostedApplicationByTokenResponse>()
  .requestHeadersOf<GetHostedApplicationByToken>()
  .build({
    method: "get",
    path: "/v1/verify/applications/hosted/{verifyAppId}",
    id: "getHostedApplicationByToken",
  });

export const identityVerificationPage = API.endpoint()
  .responseOf<IdentityVerificationPageResponse>()
  .bodyOf<HostedIdvBody>()
  .requestHeadersOf<IdentityVerificationPage>()
  .build({
    method: "post",
    path: "/v1/hosted/idv",
    id: "identityVerificationPage",
  });

export const initiateMerchantQuery = API.endpoint()
  .responseOf<InitiateMerchantQueryResponse>()
  .bodyOf<CnlTerminationQueryBody>()
  .requestHeadersOf<InitiateMerchantQuery>()
  .build({
    method: "post",
    path: "/v1/cnl/termination_query",
    id: "initiateMerchantQuery",
  });

export const retrieveQueryResults = API.endpoint()
  .paramsOf<"partner_query_reference">()
  .responseOf<RetrieveQueryResultsResponse>()
  .requestHeadersOf<RetrieveQueryResults>()
  .build({
    method: "get",
    path: "/v1/cnl/termination_query/{partner_query_reference}",
    id: "retrieveQueryResults",
  });

export const listSupportedLanguages = API.endpoint()
  .responseOf<ListSupportedLanguagesResponse>()
  .requestHeadersOf<ListSupportedLanguages>()
  .build({
    method: "get",
    path: "/v1/hosted/config/supported_languages",
    id: "listSupportedLanguages",
  });

export const listCountries = API.endpoint()
  .responseOf<ListCountriesResponse>()
  .requestHeadersOf<ListCountries>()
  .build({
    method: "get",
    path: "/v1/data/countries",
    id: "listCountries",
  });

export const listCurrencies = API.endpoint()
  .responseOf<ListCurrenciesResponse>()
  .requestHeadersOf<ListCurrencies>()
  .build({
    method: "get",
    path: "/v1/data/currencies",
    id: "listCurrencies",
  });

export default API;