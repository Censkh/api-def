openapi: 3.0.3
info:
  title: Mastercard Processing Core API
  description: |
    OpenAPI Specification for MP (Mastercard Processing) **Core**.

    This documentation describes what functionalities are exposed by the MP's CMS (Card Management System) and are available to be used by the Issuer.
    The Issuer is the primary actor who executes the operations. Whenever the Issuer wishes to onboard its customers to the card program, they may use API to:
     * create and manage **client**
     * create and manage **contracts**, there are two types of contracts in the MP's CMS:
       * **account contract**
       * **card contract**

    Later, during the card lifecycle, the Issuer can also manage other objects related to the client and the contract (account or card):
     * manage **card plastic**
     * create, manage and retrieve **additional addresses** (for the client and the contract)
     * manage and retrieve **classifiers** (for the client and the contract)
     * manage and retrieve **custom data** (for the client and the contract)
     * manage and retrieve **parameters** (for the contract)
     * set or retrieve **service limit tariff** (for the contract)
     * post or retrieve **transactions** (for the contract)
     * manage and retrieve **usage limits** (for the contract)

    ***
    API uses RESTful protocol via HTTP to execute POST, PUT, GET and PATCH operations sent to given endpoints, e.g. `/clients`.

    API uses JSON Web Encryption compact serialization for payload encryption for all API operations.
    ***
    External documentation:
      * [ISO 4217 - Currency Codes](https://www.iso.org/iso-4217-currency-codes.html)
      * [ISO 3166 - Country Codes](https://www.iso.org/iso-3166-country-codes.html)
      * [Internet Engineering Task Force (IETF) BCP 47 standard](https://tools.ietf.org/html/bcp47#appendix-A)
      * [JSON Web Encryption](https://developer.mastercard.com/platform/documentation/security-and-authentication/securing-sensitive-data-using-payload-encryption/#jwe-encryption)
      * [Internet Engineering Task Force (IETF) RFC7232](https://datatracker.ietf.org/doc/html/rfc7232)
      * [JSON Merge Patch](https://datatracker.ietf.org/doc/html/rfc7386)
    ***
  version: 1.0.0
  contact:
    name: API Support
    email: apisupport@mastercard.com
    url: 'https://developer.mastercard.com/support'
servers:
  - url: 'https://api.mastercard.com/global-processing/core'
    description: Production server
  - url: 'https://sandbox.api.mastercard.com/global-processing/core'
    description: Sandbox server
tags:
  - name: Client
    description: |
      Client object represents a physical person who - later on - may become an owner of an account contract or a card contract.
      The Client object contains information like name, address, and contact information, which can be used to identify each individual.
  - name: Contract
    description: |
      The contract object represents a generic object from which both account contract and card contract objects inherit. Many functionalities are available on the contract level which means that these functions are available for both types of contracts - account contract and card contract.
  - name: Account contract
    description: |
      The account contract object represents an account where information, like total balance, available balance or credit limit, is stored.
      The account can be categorized based on purpose (debit/credit) or based on hierarchy (top account/sub-account).
  - name: Card contract
    description: |
      The card contract object represents a card which is used as a medium to perform transactions by the client (a client, who is an owner of the card becomes a cardholder).
      Card contract contains information like card number, and card expiration date.
  - name: Card plastic
    description: |
      The card plastic is a medium by which a cardholder can perform transactions, i.e. use the physical card at POS terminals or ATM devices, or use data of a virtual card for e-commerce transactions.
      The card plastic reflects both a physical and a virtual card issued under a card contract.
  - name: Address
    description: |
      Operations for addresses allow to create, manage and retrieve additional addresses which can be assigned to client or contract.
  - name: Classifier
    description: |
      Operations for classifiers allow to manage and retrieve classifiers of the client or contract.
  - name: Custom Data
    description: |
      Operations for custom data allow to add, manage and retrieve custom data tags of the client or contract.
  - name: Parameter
    description: |
      Operations for parameters allow to manage and retrieve contract's parameters.
  - name: Tariff
    description: |
      Operations for tariffs allow to manage and retrieve contract's tariffs.
  - name: Transaction
    description: |
      Operations for transactions allow to post or retrieve transactions or fees.
  - name: Usage limit
    description: |
      Operations for usage limits allow to manage and retrieve contract's usage limits.
  - name: Search
    description: |
      Search operations allow to retrieve technical identifiers (assigned by the MP's CMS) of client, account contract and card contract objects based on other object identifier known by the Issuer.
  - name: Security
    description: |
      Security operation allows to obtain an encryption key needed to additionally secure the PIN block transferred between the Issuer and the MP.
paths:
  /clients:
    post:
      tags:
        - Client
      summary: Creates a client
      description: |
        Operation name: `createClient`

        Operation is used to create a client.
        Client creation is the first step in the onboarding of the Issuer's customers into MP's CMS.

        Upon successful client creation, a unique client identifier is returned.
        The Issuer shall create a client before they request for an account contract creation (`POST /accounts`) or a card contract creation (`POST /cards`).
      operationId: createClient
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/idempotencyKey'
      requestBody:
        $ref: '#/components/requestBodies/ClientCreation'
      responses:
        '201':
          $ref: '#/components/responses/ClientIdentifierCreated'
        '400':
          $ref: '#/components/responses/BadRequestNullClientNumberError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
  /clients/{client_id}:
    get:
      tags:
        - Client
      summary: Retrieves a client
      description: |
        Operation name: `getClient`

        Operation is used to retrieve information about the specified client, existing in the MP's CMS.
      operationId: getClient
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/clientId'
      responses:
        '200':
          $ref: '#/components/responses/Client'
        '400':
          $ref: '#/components/responses/BadRequestInvalidClientTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ClientNotFoundError'
    patch:
      tags:
        - Client
      summary: Updates a client
      description: |
        Operation name: `updateClient`

        Operation is used to update client data in the MP's CMS.
        The method has been implemented as [JSON Merge Patch](https://datatracker.ietf.org/doc/html/rfc7386), but not all field values can be cleared.
        Fields which can be cleared are listed below:
          * `client.additionalDate01`
          * `client.additionalDate02`
          * `client.clientBaseAddressData.state`
          * `client.clientBaseAddressData.city`
          * `client.clientBaseAddressData.postalCode`
          * `client.clientBaseAddressData.addressLine1`
          * `client.clientBaseAddressData.addressLine2`
          * `client.clientBaseAddressData.addressLine3`
          * `client.clientBaseAddressData.addressLine4`
          * `client.clientBaseAddressData.country`
          * `client.clientCompanyData.companyName`
          * `client.clientCompanyData.companyTradeName`
          * `client.clientCompanyData.companyDepartment`
          * `client.clientCompanyData.position`
          * `client.clientContactData.phoneNumberHome`
          * `client.clientContactData.phoneNumberMobile`
          * `client.clientContactData.phoneNumberWork`
          * `client.clientContactData.faxHome`
          * `client.clientContactData.fax`
          * `client.clientContactData.email`
          * `client.clientExpiryDate`
          * `client.clientIdentificationData.taxPosition`
          * `client.clientIdentificationData.taxpayerIdentifier`
          * `client.clientIdentificationData.identificationDocumentType`
          * `client.clientIdentificationData.identificationDocumentNumber`
          * `client.clientIdentificationData.identificationDocumentDetails`
          * `client.clientIdentificationData.socialNumber`
          * `client.clientPersonalData.language`
          * `client.clientPersonalData.maritalStatus`
          * `client.clientPersonalData.title`
          * `client.clientPersonalData.shortName`
          * `client.clientPersonalData.suffix`
          * `client.clientPersonalData.gender`
          * `client.clientPersonalData.firstName`
          * `client.clientPersonalData.middleName`
          * `client.clientPersonalData.lastName`
          * `client.clientPersonalData.birthDate`
          * `client.clientPersonalData.birthPlace`
          * `client.clientPersonalData.birthName`
          * `client.clientPersonalData.citizenship`
          * `client.clientPersonalData.secretPhrase`
          * `client.embossedData.title`
          * `client.embossedData.firstName`
          * `client.embossedData.lastName`
          * `client.embossedData.companyName`
      operationId: updateClient
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/ifMatch'
        - $ref: '#/components/parameters/clientId'
        - $ref: '#/components/parameters/idempotencyKey'
      requestBody:
        $ref: '#/components/requestBodies/ClientModification'
      responses:
        '204':
          $ref: '#/components/responses/ClientUpdated'
        '400':
          $ref: '#/components/responses/BadRequestInvalidClientTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ClientNotFoundError'
        '412':
          $ref: '#/components/responses/PreconditionError'
  /clients/{client_id}/account-contracts:
    get:
      tags:
        - Client
      summary: Retrieves a list of account contracts for a specified client
      description: |
        Operation name: `getAccountContractsByClient`

        Operation is used to retrieve a list of account contracts for a specified client.
      operationId: getAccountContractsByClient
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/clientId'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          $ref: '#/components/responses/ClientAccountContracts'
        '400':
          $ref: '#/components/responses/BadRequestInvalidClientTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ClientNotFoundError'
  /clients/{client_id}/card-contracts:
    get:
      tags:
        - Client
      summary: Retrieves a list of card contracts for a specified client
      description: |
        Operation name: `getCardContractsByClient`

        Operation is used to retrieve a list of card contracts for a specified client.

        Additional filtering can be applied:
          * **Card contract opening date** - to retrieve cards created after defined date
          * **Card contract status** - to retrieve cards with specified statuses only
      operationId: getCardContractsByClient
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/clientId'
        - $ref: '#/components/parameters/creationDateFrom'
        - $ref: '#/components/parameters/statuses'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          $ref: '#/components/responses/ClientCardContracts'
        '400':
          $ref: '#/components/responses/BadRequestInvalidCardContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ClientNotFoundError'
  /contracts/{contract_id}/events:
    post:
      tags:
        - Contract
      summary: Opens an event for a specified contract (account contract or card contract)
      description: |
        Operation name: `openEvent`

        Operation is used to open event for a specified contract (**account contract** or **card contract**).
      operationId: openEvent
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/contractId'
        - $ref: '#/components/parameters/idempotencyKey'
      requestBody:
        $ref: '#/components/requestBodies/Event'
      responses:
        '200':
          $ref: '#/components/responses/ContractEventCreated'
        '400':
          $ref: '#/components/responses/BadRequestInvalidContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ContractNotFoundError'
  /contracts/{contract_id}/financials:
    get:
      tags:
        - Contract
      summary: Retrieves contract's (account contract's or card contract's) financial information
      description: |
        Operation name: `getContractFinancials`

        Operation is used to retrieve financial information for the contract (**account contract** or **card contract**).
      operationId: getContractFinancials
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/contractId'
      responses:
        '200':
          $ref: '#/components/responses/ContractFinancial'
        '400':
          $ref: '#/components/responses/BadRequestInvalidContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ContractNotFoundError'
  /contracts/{contract_id}/balances:
    get:
      tags:
        - Contract
      summary: Retrieves information about balances for a specified contract (account contract or card contract)
      description: |
        Operation name: `getContractBalances`

        Operation is used to retrieve information about chosen contract balances. Operation can be used for (**account contract** or **card contract**).

        The response will return information about specified balances.

        *Disclaimer: Possible values which can be sent must be defined by MP and Issuer during the onboarding process.*

        Available balances in the standard product:
        | `balanceCode` 	| **Description**                                                                                                     	| **Product applicability** 	|
        |---------------	|---------------------------------------------------------------------------------------------------------------------	|---------------------------	|
        | AVAILABLE     	| Balance type reflecting contract's amount available                                                                 	| Credit, Prepaid           	|
        | BLOCKED       	| Balance type reflecting amounts blocked after authorization                                                         	| Credit, Prepaid           	|
        | CR_LIMIT      	| Balance type reflecting contract's credit limit and additional authorization limit                                  	| Credit                    	|
        | DEPOSIT       	| Balance type reflecting a cardholder current balance                                                                	| Prepaid                   	|
        | DUE           	| Balance type calculated in latest cycle as cardholder due amount                                                    	| Credit                    	|
        | OUT_BALANCE   	| Outstanding balance                                                                                                 	| Prepaid                   	|
        | OVL           	| Balance type reflecting the difference between a contract's balance (`TOTAL_BALANCE`) and credit limit (`CR_LIMIT`) 	| Credit                    	|
        | PAST_DUE      	| Sum of all overdue balances (from OVD_1 up to OVD_6)                                                                	| Credit                    	|
        | STMT_BALANCE  	| Balance type calculated at end of cycle                                                                             	| Credit                    	|
        | TOTAL_BALANCE 	| Balance type reflecting contract's balance including balances of liability subcontracts                             	| Credit, Prepaid           	|
        | TOTAL_DUE     	| SUM of `DUE` and `PAST_DUE` balances. This is the amount presented in the Statement as Minimum to Pay               	| Credit                    	|
      operationId: getContractBalances
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/contractId'
        - $ref: '#/components/parameters/contractBalanceCodes'
      responses:
        '200':
          $ref: '#/components/responses/ContractBalances'
        '400':
          $ref: '#/components/responses/BadRequestInvalidContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ContractNotFoundError'
  /contracts/{contract_id}/technical-accounts:
    get:
      tags:
        - Contract
      summary: Retrieves information about technical accounts for a specified contract (account contract or card contract)
      description: |
        Operation name: `getTechnicalAccounts`

        Operation is used to retrieve information about technical accounts configured for the contract (**account contract** or **card contract**).

        Additional filtering can be applied:
          * **Technical account code** - to retrieve only selected technical account

        Notes:
          * If a technical account code is not provided response will contain all technical accounts.
          * Technical accounts are created for the contract during 1st transfer of funds from or to a given technical account.
           Hence, right after contract creation response will not contain all possible technical accounts for the contract.
      operationId: getTechnicalAccounts
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/contractId'
        - $ref: '#/components/parameters/technicalAccountCode'
      responses:
        '200':
          $ref: '#/components/responses/TechnicalAccounts'
        '400':
          $ref: '#/components/responses/BadRequestInvalidContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ContractNotFoundError'
  /contracts/{contract_id}/tree-summaries:
    get:
      tags:
        - Contract
      summary: Retrieves summary of the contracts for a specified contract (account contract or card contract)
      description: |
        Operation name: `getContractTreeSummary`

        Operation is used to retrieve summary of the contracts from the tree structure created in the MP's CMS for the specified contract (**account contract** or **card contract**).

        The operation returns a summary of the contracts created under the specified contract and upper-level contracts from the tree structure created in the CMS. For example, if there is one account contract (top account contract) with one subaccount under which 3 card contracts have been created, then:
        * if the operation is used to retrieve tree summary for the top account contract then API returns 5 contracts (top account contract, subaccount contract and all 3 card contracts)
        * if the operation is used to retrieve tree summary for one of the card contracts then API returns 3 contracts (top account contract, subaccount contract and 1 card contract specified in the request)
      operationId: getContractTreeSummary
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/contractId'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          $ref: '#/components/responses/ContractSummaryTree'
        '400':
          $ref: '#/components/responses/BadRequestInvalidContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ContractNotFoundError'
  /accounts:
    post:
      tags:
        - Account contract
      summary: Creates an account contract
      description: |
        Operation name: `createAccountContract`

        Operation is used to create an account contract.

        Different types of account contracts can be created:
        * top or sub
        * prepaid, debit or credit
        * with liability or without liability

        To create a top account contract, the Issuer must specify the `clientId` and leave the `parentAccountContractId` empty.

        To create a subaccount contract, the Issuer must leave the `clientId` empty and specify the `parentAccountContractId`.

        To create a credit account contract, the Issuer must specify the `creditData`.

        To create an account contract with liability link to another account contract, the Issuer must fill in the `liabilityContract`.

        Upon successful account contract creation, a unique `accountContractId` is returned. The identifier must be used later on in a card contract creation request (`POST /cards`).
      operationId: createAccountContract
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/idempotencyKey'
      requestBody:
        $ref: '#/components/requestBodies/AccountContractCreation'
      responses:
        '201':
          $ref: '#/components/responses/AccountContractIdentifierCreated'
        '400':
          $ref: '#/components/responses/BadRequestNullClassifierCodeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ClientNotFoundError'
  /accounts/{account_contract_id}:
    get:
      tags:
        - Account contract
      summary: Retrieves an account contract
      description: |
        Operation name: `getAccountContract`

        Operation is used to retrieve information about the specified account contract.
      operationId: getAccountContract
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/accountContractId'
      responses:
        '200':
          $ref: '#/components/responses/AccountContract'
        '400':
          $ref: '#/components/responses/BadRequestInvalidAccountContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/AccountContractNotFoundError'
    patch:
      tags:
        - Account contract
      summary: Updates an account contract
      description: |
        Operation name: `updateAccountContract`

        Operation is used to update an account contract data.

        The method has been implemented as [JSON Merge Patch](https://datatracker.ietf.org/doc/html/rfc7386), but not all field values can be cleared.

        Fields which can be cleared are listed below:

        * `accountContractName`

        * `cbsNumber`
      operationId: updateAccountContract
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/accountContractId'
        - $ref: '#/components/parameters/ifMatch'
        - $ref: '#/components/parameters/idempotencyKey'
      requestBody:
        $ref: '#/components/requestBodies/AccountContractModification'
      responses:
        '204':
          $ref: '#/components/responses/AccountUpdated'
        '400':
          $ref: '#/components/responses/BadRequestInvalidAccountContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/AccountContractNotFoundError'
        '412':
          $ref: '#/components/responses/PreconditionError'
  /accounts/{account_contract_id}/status:
    put:
      tags:
        - Account contract
      summary: Changes an account contract status
      description: |
        Operation name: `changeAccountContractStatus`

        Operation is used to change an account contract status.

        Change is possible according to configured priorities of account contract statuses. Change to status with lower priority is not possible. For example `Account closed` has higher priority than `Account OK` and changing from `Account closed` to `Account OK` is not possible.
      operationId: changeAccountContractStatus
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/accountContractId'
      requestBody:
        $ref: '#/components/requestBodies/AccountContractStatusWithReason'
      responses:
        '204':
          $ref: '#/components/responses/AccountStatusChanged'
        '400':
          $ref: '#/components/responses/BadRequestInvalidAccountContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/AccountContractNotFoundError'
  /accounts/{account_contract_id}/statuses:
    get:
      tags:
        - Account contract
      summary: Retrieves account contract status.
      description: |
        Operation name: `getAccountContractStatus`

        Operation is used to retrieve an account contract status detailed information.
      operationId: getAccountContractStatus
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/accountContractId'
      responses:
        '200':
          $ref: '#/components/responses/AccountContractStatus'
        '400':
          $ref: '#/components/responses/BadRequestInvalidAccountContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/AccountContractNotFoundError'
  /accounts/{account_contract_id}/client-identifier:
    put:
      tags:
        - Account contract
      summary: Relinks an account contract to another client
      description: |
        Operation name: `changeAccountContractClient`

        Operation is used to associate the account contract with a different client object.

        The Issuer can choose the mode for changing a client for a contract tree:
          * **ALL** – the client will be changed for the entire account contract tree
          * **THIS** – the client will be changed only for the specified account contract
          * **DOWN** – the client will be changed for all contracts (including cards) in the hierarchy that are under the account contract.
      operationId: changeAccountContractClient
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/accountContractId'
      requestBody:
        $ref: '#/components/requestBodies/ClientIdentifierWithRelinkType'
      responses:
        '204':
          $ref: '#/components/responses/AccountRelinked'
        '400':
          $ref: '#/components/responses/BadRequestInvalidAccountContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/AccountContractNotFoundError'
  /contracts/{contract_id}/main-contract:
    put:
      tags:
        - Contract
      summary: Relinks a subaccount or card contract to another account contract
      description: |
        Operation name: `changeContractMainContract`

        Operation is used to associate the subaccount or card contract with a different parent account contract. Optionally operation allows to also associate contract with a different client.
      operationId: changeContractMainContract
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/contractId'
      requestBody:
        $ref: '#/components/requestBodies/AccountContractIdentifierWithClientIdentifier'
      responses:
        '204':
          $ref: '#/components/responses/SubAccountRelinked'
        '400':
          $ref: '#/components/responses/BadRequestInvalidAccountContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ContractNotFoundError'
  /accounts/{account_contract_id}/sub-accounts:
    get:
      tags:
        - Account contract
      summary: Retrieves a list of subaccount contracts for a specified account contract.
      description: |
        Operation name: `getSubAccountContracts`

        Operation is used to retrieve a list of subaccounts for a specified account contract. The list contains basic information about subaccount contracts.
      operationId: getSubAccountContracts
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/accountContractId'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          $ref: '#/components/responses/SubAccountContracts'
        '400':
          $ref: '#/components/responses/BadRequestInvalidAccountContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/AccountContractNotFoundError'
  /accounts/{account_contract_id}/card-contracts:
    get:
      tags:
        - Account contract
      summary: Retrieves a list of card contracts for a specified account contract
      description: |
        Operation name: `getCardContractsByAccount`

        Operation is used to retrieve card contracts for specified account contract.

        Additional filtering can be applied:
          * **Card creation date** - to retrieve cards open date greater or equal than passed date
          * **Card statuses** - to retrieve cards with selected statuses only
      operationId: getCardContractsByAccount
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/accountContractId'
        - $ref: '#/components/parameters/creationDateFrom'
        - $ref: '#/components/parameters/statuses'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          $ref: '#/components/responses/AccountContractCardContracts'
        '400':
          $ref: '#/components/responses/BadRequestInvalidAccountContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/AccountContractNotFoundError'
  /cards:
    post:
      tags:
        - Card contract
      summary: Creates a card contract
      description: |
        Operation name: `createCardContract`

        Operation is used to create a card contract.

        Card contract creation is the final step in the Issuer's onboarding into MP's CMS.
        To create a card contract, the Issuer must specify the `accountContractId`. If the `clientId` is not provided, MP's CMS will assign the same Client as the account contract owner.

        Upon successful card contract creation, a unique card contract identifier is returned.
      operationId: createCardContract
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/idempotencyKey'
      requestBody:
        $ref: '#/components/requestBodies/CardContractCreation'
      responses:
        '201':
          $ref: '#/components/responses/CardContractIdentifierCreated'
        '400':
          $ref: '#/components/responses/BadRequestNullCardContractError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/AccountContractNotFoundError'
  /cards/{card_contract_id}:
    get:
      tags:
        - Card contract
      summary: Retrieves a card contract
      description: |
        Operation name: `getCardContract`

        Operation is used to retrieve details of a given card contract.
      operationId: getCardContract
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/cardContractId'
        - $ref: '#/components/parameters/fieldsSelection'
        - $ref: '#/components/parameters/optionalCustomerPublicRsaKey'
      responses:
        '200':
          $ref: '#/components/responses/CardContract'
        '400':
          $ref: '#/components/responses/BadRequestInvalidCardContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/CardContractNotFoundError'
    patch:
      tags:
        - Card contract
      summary: Updates a card contract
      description: |
        Operation name: `updateCardContract`

        Operation is used to update a card data.
        The method has been implemented as [JSON Merge Patch](https://datatracker.ietf.org/doc/html/rfc7386), but not all field values can be cleared.
        Fields which can be cleared are listed below:
          * `cardContractName`
          * `cbsNumber`
          * `embossedData.title`
          * `embossedData.firstName`
          * `embossedData.lastName`
          * `embossedData.companyName`
      operationId: updateCardContract
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/cardContractId'
        - $ref: '#/components/parameters/ifMatch'
        - $ref: '#/components/parameters/idempotencyKey'
      requestBody:
        $ref: '#/components/requestBodies/CardContractModification'
      responses:
        '204':
          $ref: '#/components/responses/CardUpdated'
        '400':
          $ref: '#/components/responses/BadRequestInvalidCardContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/CardContractNotFoundError'
        '412':
          $ref: '#/components/responses/PreconditionError'
  /cards/details-verifications:
    post:
      tags:
        - Card contract
      summary: Verifies card details
      description: |
        Operation name: `verifyCardDetails`

        Operation is used to verify card details.
      operationId: verifyCardDetails
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/idempotencyKey'
      requestBody:
        $ref: '#/components/requestBodies/CardContractDetailsVerification'
      responses:
        '200':
          $ref: '#/components/responses/CardContractDetailsVerificationResult'
        '400':
          $ref: '#/components/responses/BadRequestNullCardContractNumberError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/CardContractNotFoundError'
  /cards/{card_contract_id}/status:
    put:
      tags:
        - Card contract
      summary: Set new status for the card contract
      description: |
        Operation name: `changeCardContractStatus`

        Operation is used to change the card contract status.

        In the MP's CMS, the Issuer can set either a temporary status (which can be reversed) or a permanent one (without the possibility to change it afterwards). The change is possible according to the configured priorities of card contract statuses. A change to a status with lower priority is not possible.
      operationId: changeCardContractStatus
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/cardContractId'
      requestBody:
        $ref: '#/components/requestBodies/CardContractStatusWithReason'
      responses:
        '204':
          $ref: '#/components/responses/CardStatusChanged'
        '400':
          $ref: '#/components/responses/BadRequestInvalidCardContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/CardContractNotFoundError'
  /cards/{card_contract_id}/statuses:
    get:
      tags:
        - Card contract
      summary: Retrieves card contract status.
      description: |
        Operation name: `getCardContractStatus`

        Operation is used to retrieve card status detailed information.
      operationId: getCardContractStatus
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/cardContractId'
      responses:
        '200':
          $ref: '#/components/responses/CardContractStatus'
        '400':
          $ref: '#/components/responses/BadRequestInvalidCardContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/CardContractNotFoundError'
  /cards/{card_contract_id}/client-identifier:
    put:
      tags:
        - Card contract
      summary: Relinks a card contract to another client
      description: |
        Operation name: `changeCardContractClient`

        Operation is used to associate the card contract with a different client (change of client - cardholder).
      operationId: changeCardContractClient
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/cardContractId'
      requestBody:
        $ref: '#/components/requestBodies/ClientIdentifier'
      responses:
        '204':
          $ref: '#/components/responses/CardRelinkedToAnotherClient'
        '400':
          $ref: '#/components/responses/BadRequestInvalidCardContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/CardContractNotFoundError'
  /cards/{card_contract_id}/main-contract:
    put:
      tags:
        - Card contract
      summary: Relinks a card contract to another account contract
      description: |
        Operation name: `changeCardContractMainContract`

        Operation is used to associate the card contract with a different account contract.
      operationId: changeCardContractMainContract
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/cardContractId'
      requestBody:
        $ref: '#/components/requestBodies/AccountContractIdentifier'
      responses:
        '204':
          $ref: '#/components/responses/CardRelinkedToAnotherAccount'
        '400':
          $ref: '#/components/responses/BadRequestInvalidCardContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ContractNotFoundError'
  /cards/{card_contract_id}/online-pin-attempts-counter:
    put:
      tags:
        - Card contract
      summary: Resets Online PIN Try Counter
      description: |
        Operation name: `clearOnlinePinAttempts`

        Operation is used to reset Online PIN Try Counter for a specified card contract.
      operationId: clearOnlinePinAttempts
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/cardContractId'
      requestBody:
        $ref: '#/components/requestBodies/OnlinePinAttemptsClearance'
      responses:
        '204':
          $ref: '#/components/responses/OnlinePinTryCounterReset'
        '400':
          $ref: '#/components/responses/BadRequestInvalidCardContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/CardContractNotFoundError'
  /clients/{client_id}/online-pin-attempts-counter:
    put:
      tags:
        - Client
      summary: Resets Online PIN Try Counter
      description: |
        Operation name: `clearOnlinePinAttemptsForClient`

        Operation is used to reset Online PIN Try Counter for a specified client.
      operationId: clearOnlinePinAttemptsForClient
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/clientId'
      requestBody:
        $ref: '#/components/requestBodies/OnlinePinAttemptsClearanceForClient'
      responses:
        '204':
          $ref: '#/components/responses/OnlinePinTryCounterReset'
        '400':
          $ref: '#/components/responses/BadRequestInvalidClientTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ClientNotFoundError'
  /cards/{card_contract_id}/active:
    put:
      tags:
        - Card plastic
      summary: Activates a card plastic and unlocks the card for transaction use.
      description: |
        Operation name: `activateCard`

        Operation is used to activate a card plastic for transaction use.
        When a new card contract is created, usually a card plastic is produced with the status `Locked` to prevent the card from unauthorized transactions.
        If the card plastic status is `Locked`, the cardholder is not able to perform any transactions as they will be rejected.
        Plastic activation unlocks the plastic and allows the cardholder to use it in POS, e-commerce, ATM, etc.
      operationId: activateCard
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/cardContractId'
      requestBody:
        $ref: '#/components/requestBodies/CardContractActivation'
      responses:
        '204':
          $ref: '#/components/responses/CardPlasticUnlocked'
        '400':
          $ref: '#/components/responses/BadRequestInvalidCardContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/CardContractNotFoundError'
  /cards/{card_contract_id}/pin:
    put:
      tags:
        - Card plastic
      summary: Sets up new PIN for a card plastic
      description: |
        Operation name: `setPin`

        Operation is used to set PIN for a card plastic. The card must have a PIN defined before a physical card is produced.
        MP's CMS does not validate the old PIN.

        The Issuer is not allowed to send PIN value in clear text, instead, a PIN block shall be sent. Additionally, the PIN block must be encrypted.

        The following encryption options are allowed:
          * **Symmetric** - a PIN block is secured with a ZPK (Zone Pin Key, exchanged with MP during the onboarding process).

              When the ZPK encryption is used, the PIN block must be in ISO format 0.
          * **Asymmetric** - a PIN block is secured with a public RSA key received from MP's CMS in `GET /public-keys` response (API operation: `getPublicRsaKey`).

              When the public RSA key encryption is used, the PIN block may be in ISO format 0 or format 1 (depending on the MP API configuration). In such case, the PIN block length is up to 2048 characters. A permitted value format is an ASCII/UTF-8 string of characters 0-9,A-F (ASN.1 DER cryptogram hex unpacked to string).

        Note: Apart from the above encryption (symmetric or asymmetric) payload JWE encryption is used.

        PIN block ISO formats usage:
          * **ISO-0 format** is used when full `cardContractNumber`(PAN) is known to the Issuer (usually for PCI-compliant Issuers).
          * **ISO-1 format** is used when full `cardContractNumber`(PAN) is not known to the Issuer (usually for non-PCI-compliant Issuers).
      operationId: setPin
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/cardContractId'
        - $ref: '#/components/parameters/keyIndex'
      requestBody:
        $ref: '#/components/requestBodies/PinCreation'
      responses:
        '204':
          $ref: '#/components/responses/CardPlasticNewPinSetUp'
        '400':
          $ref: '#/components/responses/BadRequestInvalidCardContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/CardContractNotFoundError'
  /cards/{card_contract_id}/pins/searches:
    post:
      tags:
        - Card plastic
      summary: Retrieves a PIN for a card plastic
      description: |
        Operation name: `getPin`

        Operation is used to retrieve from MP's CMS the PIN defined for given card plastic (in the CMS card plastic exists also for a virtual card - card plastic is not always a physical card).

        Note: If there is more than one card plastic with the same value of expiry date then the CMS system retrieves the PIN from the plastic which is currently treated as active by the CMS system.

        The PIN is always retrieved in a secured way - asymmetric encryption is used. MP will encrypt the PIN returned in the response with public RSA key passed in request message in the `Customer-Public-Rsa-Key` header.
        The Public RSA key will be generated by the Issuer and the Issuer will have a matching private key that can be used to decrypt the PIN value.

        Note: Apart from above symmetric encryption payload JWE encryption is used.
      operationId: getPin
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/cardContractId'
        - $ref: '#/components/parameters/mandatoryCustomerPublicRsaKey'
        - $ref: '#/components/parameters/idempotencyKey'
      requestBody:
        $ref: '#/components/requestBodies/PinSearchCriteria'
      responses:
        '200':
          $ref: '#/components/responses/EncryptedPin'
        '400':
          $ref: '#/components/responses/BadRequestInvalidCardContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/CardContractNotFoundError'
  /cards/{card_contract_id}/pins/verifications:
    post:
      tags:
        - Card plastic
      summary: Verifies a PIN
      description: |
        Operation name: `verifyPin`

        Operation is used to verify the PIN for specified card plastic (in the CMS card plastic exists also for a virtual card - card plastic is not always a physical card).

        The Issuer is not allowed to send the PIN value in clear text, instead, PIN block shall be sent. Additionally, the PIN block must be encrypted.

        The following encryption options are allowed:
          * **Symmetric** - the PIN block secured with ZPK (Zone Pin Key, exchanged with MP).
            When ZPK encryption is used, the PIN block must be in ISO format 0.
          * **Asymmetric** - the PIN block secured with public RSA key received from MP's CMS in `GET /public-keys` response (API operation: `getPublicRsaKey`).
            When public RSA key encryption is used, the PIN block may be in ISO format 0 or format 1 (depending on MP API configuration).
            In such case, PIN block length is up to 2048 characters. ASCII/UTF-8 string of characters 0-9,A-F (ASN.1 DER cryptogram hex unpacked to string).

          Note: Apart from the above encryption (symmetric or asymmetric) payload JWE encryption is used.

        PIN block ISO formats usage:
          * **ISO-0** format is used when full `cardContractNumber`(PAN) is known to the Issuer (usually for PCI-compliant Issuers).
          * **ISO-1** format is used when full `cardContractNumber`(PAN) is not known to the Issuer (usually for non-PCI-compliant Issuers).

        The verification result is returned in response.

        Note: If there is more than one card plastic with the same value of expiry date then the CMS system will verify provided PIN with the PIN from the
        plastic currently treated as active by the CMS system.
      operationId: verifyPin
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/cardContractId'
        - $ref: '#/components/parameters/keyIndex'
        - $ref: '#/components/parameters/idempotencyKey'
      requestBody:
        $ref: '#/components/requestBodies/PinVerification'
      responses:
        '200':
          $ref: '#/components/responses/PinVerificationResult'
        '400':
          $ref: '#/components/responses/BadRequestInvalidCardContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/CardContractNotFoundError'
  /cards/{card_contract_id}/card-verification-codes/searches:
    post:
      tags:
        - Card plastic
      summary: Retrieves a CVC2 for a card plastic
      description: |
        Operation name: `getCvc`

        Operation is used to retrieve a Card Verification Code (CVC2) for a given card plastic (card plastic exists also for a virtual card - is not always a physical card) from MP's CMS.

          If there is no `cardContractId` matching the requested `expiryDate` HTTP 404 error with `INVALID_EXPIRY_DATE` `reasonCode` will be returned.
      operationId: getCvc
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/cardContractId'
        - $ref: '#/components/parameters/optionalCustomerPublicRsaKey'
        - $ref: '#/components/parameters/idempotencyKey'
      requestBody:
        $ref: '#/components/requestBodies/CvcSearchCriteria'
      responses:
        '200':
          $ref: '#/components/responses/Cvc'
        '400':
          $ref: '#/components/responses/BadRequestInvalidCardContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/CardContractNotFoundError'
  /cards/{card_contract_id}/card-verification-codes/verifications:
    post:
      tags:
        - Card plastic
      summary: Verifies a CVC2 of specific card plastic
      description: |
        Operation name: `verifyCvc`

        Operation is used to verify a Card Verification Code 2 (CVC2) for specified card plastic (in the CMS card plastic exists also for a virtual card - card plastic is not always a physical card).

        The verification result is returned in the response.
      operationId: verifyCvc
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/cardContractId'
        - $ref: '#/components/parameters/idempotencyKey'
      requestBody:
        $ref: '#/components/requestBodies/CvcVerification'
      responses:
        '200':
          $ref: '#/components/responses/CvcVerificationResult'
        '400':
          $ref: '#/components/responses/BadRequestInvalidCardContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/CardContractNotFoundError'
  /cards/{card_contract_id}/plastics:
    post:
      tags:
        - Card plastic
      summary: Reissues a card
      description: |
        Operation name: `reissueCard`

        Operation is used to create a new card plastic object for a given card contract. By triggering the operation, the Issuer may execute the following cases:
          * issue a physical card for a virtual card
          * reissue an existing card (duplicate physical card, e.g. due to damage, ...)
          * renew an existing card
          * replace an existing card

        In each case, a new card plastic object is created for a given card contract and the card plastic sequential number for the new object is incremented by 1.

        Note: `newCardContractNumber` is not used when:
          * `reissueType` defines that a new card contract is not created (only a new `Plastic` is created under the same card contract)
          * `reissueType` defines that a card contract will be replaced with a PIN inheritance (the MP's CMS generates `newCardContractNumber` in this case)
      operationId: reissueCard
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/cardContractId'
        - $ref: '#/components/parameters/idempotencyKey'
      requestBody:
        $ref: '#/components/requestBodies/CardContractReissue'
      responses:
        '201':
          $ref: '#/components/responses/ReissuedCardContract'
        '400':
          $ref: '#/components/responses/BadRequestInvalidCardContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/CardContractNotFoundError'
    get:
      tags:
        - Card plastic
      summary: Retrieves information about all card plastics for a specified card contract
      description: |
        Operation name: `getCardPlastics`

        Operation is used to retrieve information about all card plastics created under a specified card contract.

        Each card plastic has a sequential number assigned. The card plastic number sequence starts with 1 and is increased by 1 for each reissued card, whenever a new card plastic is created under the same card contract.
      operationId: getCardPlastics
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/cardContractId'
      responses:
        '200':
          $ref: '#/components/responses/CardContractPlastics'
        '400':
          $ref: '#/components/responses/BadRequestInvalidCardContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/CardContractNotFoundError'
  /clients/{client_id}/addresses:
    post:
      tags:
        - Address
      summary: Creates an address for a client
      description: |
        Operation name: `addClientAddress`

        Operation is used to add an additional address for a specified client object.

        MP's CMS allows to store many additional addresses related to the client. Each address type which will be added must be predefined in the CMS system.

        The additional address can be used to store for example:
          * statement delivery address.
          * PIN mailer delivery address.
      operationId: addClientAddress
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/clientId'
        - $ref: '#/components/parameters/idempotencyKey'
      requestBody:
        $ref: '#/components/requestBodies/AddressCreation'
      responses:
        '200':
          $ref: '#/components/responses/ClientAddressCreated'
        '400':
          $ref: '#/components/responses/BadRequestInvalidClientTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ClientNotFoundError'
    get:
      tags:
        - Address
      summary: Retrieves a list of addresses for the client
      description: |
        Operation name: `getClientAddresses`

        Operation is used to retrieve a list of additional addresses assigned to the specified client object.
      operationId: getClientAddresses
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/clientId'
      responses:
        '200':
          $ref: '#/components/responses/ClientAddresses'
        '400':
          $ref: '#/components/responses/BadRequestInvalidClientTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ClientNotFoundError'
  /clients/{client_id}/addresses/{address_type}:
    put:
      tags:
        - Address
      summary: Updates an address of a selected type for the client
      description: |
        Operation name: `updateClientAddress`

        Operation is used to update the additional address for a specified client object.
      operationId: updateClientAddress
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/clientId'
        - $ref: '#/components/parameters/addressType'
      requestBody:
        $ref: '#/components/requestBodies/AddressModification'
      responses:
        '204':
          $ref: '#/components/responses/ClientAddressUpdated'
        '400':
          $ref: '#/components/responses/BadRequestInvalidClientTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ClientNotFoundError'
  /contracts/{contract_id}/addresses:
    post:
      tags:
        - Address
      summary: Creates an address for the contract (account contract or card contract)
      description: |
        Operation name: `addContractAddress`

        Operation is used to add an additional address for a specified contract (**account contract** or **card contract**).

        MP's CMS allows to store many additional addresses related to the contract. Each address type which will be added must be predefined in the CMS system.

        Additional address can be used to store for example:
          * statement delivery address.
          * PIN mailer delivery address
      operationId: addContractAddress
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/contractId'
        - $ref: '#/components/parameters/idempotencyKey'
      requestBody:
        $ref: '#/components/requestBodies/AddressCreation'
      responses:
        '200':
          $ref: '#/components/responses/ContractAddressCreated'
        '400':
          $ref: '#/components/responses/BadRequestInvalidContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ContractNotFoundError'
    get:
      tags:
        - Address
      summary: Retrieves a list of addresses for the contract (account contract or card contract)
      description: |
        Operation name: `getContractAddresses`

        Operation is used to retrieve a list of additional addresses assigned to the specified contract (**account contract** or **card contract**).
      operationId: getContractAddresses
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/contractId'
      responses:
        '200':
          $ref: '#/components/responses/ContractAddresses'
        '400':
          $ref: '#/components/responses/BadRequestInvalidContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ContractNotFoundError'
  /contracts/{contract_id}/addresses/{address_type}:
    put:
      tags:
        - Address
      summary: Updates an address of a selected type for the contract (account contract or card contract)
      description: |
        Operation name: `updateContractAddress`

        Operation is used to update the additional address for a specified contract (**account contract** or **card contract**).
      operationId: updateContractAddress
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/contractId'
        - $ref: '#/components/parameters/addressType'
      requestBody:
        $ref: '#/components/requestBodies/AddressModification'
      responses:
        '204':
          $ref: '#/components/responses/ContractAddressUpdated'
        '400':
          $ref: '#/components/responses/BadRequestInvalidContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ContractNotFoundError'
  /clients/{client_id}/classifiers/{classifier_code}:
    put:
      tags:
        - Classifier
      summary: Sets up a client classifier
      description: |
        Operation name: `setClientClassifier`

        Operation is used to set client classifier value.

        Classifiers are a mechanism for storing configuration parameters. Represent rules or restrictions allowing flexible configuration of business processes:
          * Classifiers make it possible to segment clients into groups depending on the current status of a client
          * Classifiers make it possible to set conditions for executing various actions, depending on the current status of a client

        For example, a client classifier can be used to mark the client as a migrated client.
      operationId: setClientClassifier
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/clientId'
        - $ref: '#/components/parameters/classifierCode'
      requestBody:
        $ref: '#/components/requestBodies/ClassifierCreation'
      responses:
        '204':
          $ref: '#/components/responses/ClientClassifierSetUp'
        '400':
          $ref: '#/components/responses/BadRequestInvalidClientTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ClientNotFoundError'
  /clients/{client_id}/classifiers:
    get:
      tags:
        - Classifier
      summary: Retrieves a client classifier
      description: |
        Operation name: `getClientClassifiers`

        Operation is used to retrieve selected client classifiers values.

        Available classifier in the standard product on the client level:
        | `classifierCode`  	| `classifierValue` ` 	| **Description**                                                                                                                                                                        	| **Product   applicability** 	|
        |--------------------	|---------------------	|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	|-----------------------------	|
        | GDPR_DATA_ERASE    	| N                   	| According to the GDPR the right to be forgotten, Issuer can flag appropriate Client in the Workbench. It would be the only channel how such request could be raised by the issuer. 	| Prepaid                     	|
        | GDPR_DATA_ERASE    	| Y                   	| According to the GDPR the right to be forgotten, Issuer can flag appropriate Client in the Workbench. It would be the only channel how such request could be raised by the issuer. 	| Prepaid                     	|

      operationId: getClientClassifiers
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/classifierCodes'
        - $ref: '#/components/parameters/clientId'
      responses:
        '200':
          $ref: '#/components/responses/ClientClassifiers'
        '400':
          $ref: '#/components/responses/BadRequestInvalidClientTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ClientNotFoundError'
  /contracts/{contract_id}/classifiers/{classifier_code}:
    put:
      tags:
        - Classifier
      summary: Sets up a contract's (account contract's or card contract's) classifier
      description: |
        Operation name: `setContractClassifier`

        Operation is used to set the classifier value for the contract (**account contract** or **card contract**).

        Classifiers are a mechanism for storing configuration parameters. Represent rules or restrictions allowing flexible configuration of business processes:
        *	Classifiers make it possible to segment separate contracts into groups depending on the current status of a contract (account contract or card contract)
        *	Classifiers make it possible to set conditions for executing various actions, depending on the current status of a contract (account contract or card contract)

        Available classifiers in the standard product with possible values:

        | `classifier_code`  	| `classifierValue`             	| **Contract level** 	| **Description**                                                                                                                          	| **Product   applicability**                                                                                                                	|
        |--------------------	|-------------------------------	|--------------------	|------------------------------------------------------------------------------------------------------------------------------------------	|--------------------------------------------------------------------------------------------------------------------------------------------	|
        | ABU                	| N                       	      | Card contract      	| ABU (Automatic Billing Updater) management Default: Y                                                                                    	| Any product                                                                                                                                	|
        | ABU                	| Y                             	| Card contract      	| ABU (Automatic Billing Updater) management Default: Y                                                                                    	| Any product                                                                                                                                	|
        | ALLOW_INTL         	| N                       	      | Card contract      	| Foreign transactions management Default - Y                                                                                             	| Credit, Debit                                                                                                                              	|
        | ALLOW_INTL         	| Y                             	| Card contract      	| Foreign transactions management Default - Y                                                                                         	    | Credit, Debit                                                                                                                              	|
        | ALLOW_MAGS         	| N                             	| Card contract      	| Magstripe transactions management Default: Y                                                                                            	| Debit                                                                                                                                      	|
        | ALLOW_MAGS         	| Y                             	| Card contract      	| Magstripe transactions management Default: Y                                                                                         	    | Debit                                                                                                                                      	|
        | CHARGE_OFF_STATE   	| OFF                           	| Any Contract       	| Charge off management                                                                                                                    	| Credit                                                                                                                                     	|
        | CHARGE_OFF_STATE   	| ON                            	| Any Contract       	| Charge off management                                                                                                                    	| Credit                                                                                                                                     	|
        | CTLS_FLAG          	| CTLS_FLAG_OFF 	                | Card contract      	| Contactless management Default: CTLS_FLAG_ON                                                                                          	  | Any product                                                                                                                                	|
        | CTLS_FLAG          	| CTLS_FLAG_ON 	                  | Card contract      	| Contactless management Default: CTLS_FLAG_ON                                                                                          	  | Any product                                                                                                                                	|
        | FEE_WAIVING        	| N                       	      | Any Contract       	| Switch to stop/start calculating turnovers for fee waiving Default - OFF                                                              	  | Credit, Prepaid                                                                                                                            	|
        | FEE_WAIVING        	| Y                             	| Any Contract       	| Switch to stop/start calculating turnovers for fee waiving Default - OFF                                                              	  | Credit, Prepaid                                                                                                                            	|
        | INS_FIXED          	| OFF                     	      | Any Contract       	| Switch to stop/start charging insurance fixed (INF) Default - OFF                                                                     	  | Credit, Prepaid                                                                                                                            	|
        | INS_FIXED          	| ON                     	        | Any Contract       	| Switch to stop/start charging insurance fixed (INF) Default - OFF                                                                     	  | Credit, Prepaid                                                                                                                            	|
        | INS_FIXED_AD       	| OFF                    	        | Any Contract       	| Switch to stop/start charging insurance fixed single (INFS) Default - OFF                                                             	  | Credit, Prepaid                                                                                                                            	|
        | INS_FIXED_AD       	| ON                             	| Any Contract       	| Switch to stop/start charging insurance fixed single (INFS) Default - OFF                                                             	  | Credit, Prepaid                                                                                                                            	|
        | INS_FIXED_AD_C     	| OFF                           	| Card contract      	| Insurance Fixed Single Card (INFSC) management Default - OFF                                                                          	  | Credit                                                                                                                                     	|
        | INS_FIXED_AD_C     	| ON                             	| Card contract      	| Insurance Fixed Single Card (INFSC) management Default - OFF                                                                          	  | Credit                                                                                                                                     	|
        | MEMB_FEE_DELAY     	| OFF                     	      | Any Contract       	| Membership fee delay management                                                                                                          	| Credit                                                                                                                                     	|
        | MEMB_FEE_DELAY     	| ON                     	        | Any Contract       	| Membership fee delay management                                                                                                          	| Credit                                                                                                                                     	|
        | MEMB_FEE_FREQ      	| B                 	            | Any Contract       	| Switch to signify what kind of recurring fee (Billing, Monthly, None or Yearly) to charge on contract.  Can be reversed. Default – Y. 	  | Credit	                                                                                                                                    |
        | MEMB_FEE_FREQ      	| M                	              | Any Contract       	| Switch to signify what kind of recurring fee (Billing, Monthly, None or Yearly) to charge on contract.  Can be reversed. Default – Y. 	  | Credit 	                                                                                                                                    |
        | MEMB_FEE_FREQ      	| N                 	            | Any Contract       	| Switch to signify what kind of recurring fee (Billing, Monthly, None or Yearly) to charge on contract.  Can be reversed. Default – Y. 	  | Credit	                                                                                                                                    |
        | MEMB_FEE_FREQ      	| Y                              	| Any Contract       	| Switch to signify what kind of recurring fee (Billing, Monthly, None or Yearly) to charge on contract.  Can be reversed. Default – Y. 	  | Credit 	                                                                                                                                    |
        | SDD_AGREED_TO_PAY  	| MTP                     	      | Any Contract       	| Simplified Direct debit option (Minimum to pay or Statement value). Default = MTP                                                        	| Credit                                                                                                                                     	|
        | SDD_AGREED_TO_PAY  	| STMT                      	    | Any Contract       	| Simplified Direct debit option (Minimum to pay or Statement value). Default = MTP                                                        	| Credit                                                                                                                                     	|

      operationId: setContractClassifier
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/contractId'
        - $ref: '#/components/parameters/classifierCode'
      requestBody:
        $ref: '#/components/requestBodies/ClassifierCreation'
      responses:
        '204':
          $ref: '#/components/responses/ContractClassifierSetUp'
        '400':
          $ref: '#/components/responses/BadRequestInvalidContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ContractNotFoundError'
  /contracts/{contract_id}/classifiers:
    get:
      tags:
        - Classifier
      summary: Retrieves contract's (account contract's or card contract's) classifier
      description: |
        Operation name: `getContractClassifiers`

        Operation is used to retrieve selected contract (**account contract** or **card contract**) classifier value.

        Available classifiers in the standard product with possible values:
        | **classifierCode** 	| **classifierValue**                  	| **Contract level** 	| **Description**                                                                                                                                                                                        	| **Product   applicability**                                                                                                                	|
        |--------------------	|--------------------------------------	|--------------------	|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	|--------------------------------------------------------------------------------------------------------------------------------------------	|
        | ABU                	| N                              	      | Card contract      	| ABU (Automatic Billing Updater) management Default: Y                                                                                                                                                  	| Any product                                                                                                                                	|
        | ABU                	| Y                                   	| Card contract      	| ABU (Automatic Billing Updater) management Default: Y                                                                                                                                                 	| Any product                                                                                                                                	|
        | ALLOW_INTL         	| N                              	      | Card contract      	| Foreign transactions management Default - Y                                                                                                                                                            	| Credit, Debit                                                                                                                              	|
        | ALLOW_INTL         	| Y                                   	| Card contract      	| Foreign transactions management Default - Y                                                                                                                                                       	    | Credit, Debit                                                                                                                              	|
        | ALLOW_MAGS         	| N                             	      | Card contract      	| Magstripe transactions management Default: Y                                                                                                                                                          	| Debit                                                                                                                                      	|
        | ALLOW_MAGS         	| Y                               	    | Card contract      	| Magstripe transactions management Default: Y                                                                                                                                                          	| Debit                                                                                                                                      	|
        | CHARGE_OFF_STATE   	| OFF                                 	| Any Contract       	| Charge off management                                                                                                                                                                                  	| Credit                                                                                                                                     	|
        | CHARGE_OFF_STATE   	| ON                            	      | Any Contract       	| Charge off management                                                                                                                                                                                  	| Credit                                                                                                                                     	|
        | CTLS_FLAG          	| CTLS_FLAG_OFF       	                | Card contract      	| Contactless management Default: CTLS_FLAG_ON                                                                                                                                                            | Any product                                                                                                                                 |
        | CTLS_FLAG          	| CTLS_FLAG_ON        	                | Card contract      	| Contactless management Default: CTLS_FLAG_ON                                                                                                                                                            | Any product                                                                                                                                 |
        | DLQ_LEVEL          	| 0 	                                  | Any Contract       	| Delinquency level 0 – No debt 1 – Due 2 – 7 – Overdue 30 – 180 Cannot be changed through `setContractClassifier`                                                                                      	| Credit                                                                                                                                     	|
        | DLQ_LEVEL          	| 1              	                      | Any Contract       	| Delinquency level 0 – No debt 1 – Due 2 – 7 – Overdue 30 – 180 Cannot be changed through `setContractClassifier`                                                                           	            | Credit                                                                                                                                     	|
        | DLQ_LEVEL          	| 2 	                                  | Any Contract       	| Delinquency level 0 – No debt 1 – Due 2 – 7 – Overdue 30 – 180 Cannot be changed through `setContractClassifier`                                                                                      	| Credit                                                                                                                                     	|
        | DLQ_LEVEL          	| 3 	                                  | Any Contract       	| Delinquency level 0 – No debt 1 – Due 2 – 7 – Overdue 30 – 180 Cannot be changed through `setContractClassifier`                                                                           	            | Credit                                                                                                                                     	|
        | DLQ_LEVEL          	| 4 	                                  | Any Contract       	| Delinquency level 0 – No debt 1 – Due 2 – 7 – Overdue 30 – 180 Cannot be changed through `setContractClassifier`                                                                           	            | Credit                                                                                                                                     	|
        | DLQ_LEVEL          	| 5 	                                  | Any Contract       	| Delinquency level 0 – No debt 1 – Due 2 – 7 – Overdue 30 – 180 Cannot be changed through `setContractClassifier`                                                                           	            | Credit                                                                                                                                     	|
        | DLQ_LEVEL          	| 6	                                    | Any Contract       	| Delinquency level 0 – No debt 1 – Due 2 – 7 – Overdue 30 – 180 Cannot be changed through `setContractClassifier`                                                                           	            | Credit                                                                                                                                     	|
        | DLQ_LEVEL          	| 7 	                                  | Any Contract       	| Delinquency level 0 – No debt 1 – Due 2 – 7 – Overdue 30 – 180 Cannot be changed through `setContractClassifier`                                                                                       	| Credit                                                                                                                                     	|
        | FEE_WAIVING        	| N                                   	| Any Contract       	| Switch to stop/start calculating turnovers for fee waiving Default - OFF                                                                                                                            	  | Credit, Prepaid                                                                                                                            	|
        | FEE_WAIVING        	| N                                   	| Any Contract       	| Switch to stop/start calculating turnovers for fee waiving Default - OFF                                                                                                                              	| Credit, Prepaid                                                                                                                            	|
        | GRACE_PERIOD       	| OFF                                 	| Account Contract   	| Switch to on/off grace period for given account contracted. Default - ON. Cannot be changed through `setContractClassifier`                                                                         	  | Credit                                                                                                                                     	|
        | GRACE_PERIOD       	| ON                                  	| Account Contract   	| Switch to on/off grace period for given account contracted. Default - ON. Cannot be changed through `setContractClassifier`                                                                         	  | Credit                                                                                                                                     	|
        | INS_FIXED          	| OFF                                 	| Any Contract       	| Switch to stop/start charging insurance fixed (INF) Default - OFF                                                                                                                                   	  | Credit, Prepaid                                                                                                                            	|
        | INS_FIXED          	| ON                            	      | Any Contract       	| Switch to stop/start charging insurance fixed (INF) Default - OFF                                                                                                                                   	  | Credit, Prepaid                                                                                                                            	|
        | INS_FIXED_AD       	| OFF                            	      | Any Contract       	| Switch to stop/start charging insurance fixed single (INFS) Default - OFF                                                                                                                           	  | Credit, Prepaid                                                                                                                            	|
        | INS_FIXED_AD       	| ON                            	      | Any Contract       	| Switch to stop/start charging insurance fixed single (INFS) Default - OFF                                                                                                                           	  | Credit, Prepaid                                                                                                                            	|
        | INS_FIXED_AD_C     	| OFF                            	      | Card contract      	| Insurance Fixed Single Card (INFSC) management Default - OFF                                                                                                                                        	  | Credit                                                                                                                                     	|
        | INS_FIXED_AD_C     	| ON                            	      | Card contract      	| Insurance Fixed Single Card (INFSC) management Default - OFF                                                                                                                                        	  | Credit                                                                                                                                     	|
        | MARKUP_ENABLED     	| N                               	    | Any Contract       	| Markup fees enabled Cannot be changed through `setContractClassifier`                                                                                                                               	  | Credit                                                                                                                                     	|
        | MARKUP_ENABLED     	| Y                               	    | Any Contract       	| Markup fees enabled Cannot be changed through `setContractClassifier`                                                                                                                               	  | Credit                                                                                                                                     	|
        | MEMB_FEE_DELAY     	| OFF                            	      | Any Contract       	| Membership fee delay management                                                                                                                                                                        	| Credit                                                                                                                                     	|
        | MEMB_FEE_DELAY     	| ON                            	      | Any Contract       	| Membership fee delay management                                                                                                                                                                        	| Credit                                                                                                                                     	|
        | MEMB_FEE_FREQ      	| B                         	          | Any Contract       	| Switch to signify what kind of recurring fee (Billing, Monthly, None or Yearly) to charge on contract.  Can be reversed. Default – Y                                                                   	| Credit 	                                                                                                                                    |
        | MEMB_FEE_FREQ      	| M                                    	| Any Contract       	| Switch to signify what kind of recurring fee (Billing, Monthly, None or Yearly) to charge on contract.  Can be reversed. Default – Y                                                                  	| Credit                                                                                                                                      |
        | MEMB_FEE_FREQ      	| N                          	          | Any Contract       	| Switch to signify what kind of recurring fee (Billing, Monthly, None or Yearly) to charge on contract.  Can be reversed. Default – Y                                                               	    | Credit 	                                                                                                                                    |
        | MEMB_FEE_FREQ      	| Y                          	          | Any Contract       	| Switch to signify what kind of recurring fee (Billing, Monthly, None or Yearly) to charge on contract.  Can be reversed. Default – Y                                                               	    | Credit 	                                                                                                                                    |
        | OVL_STATUS         	| N                               	    | Account Contract   	| Account Overlimit status indicated. Once account goes Overlimit then the classifier is switched to Y.  If reset, then the value is reverted to N. Cannot be changed through `setContractClassifier` 	  | Credit                                                                                                                                     	|
        | OVL_STATUS         	| Y                               	    | Account Contract   	| Account Overlimit status indicated. Once account goes Overlimit then the classifier is switched to Y.  If reset, then the value is reverted to N. Cannot be changed through `setContractClassifier` 	  | Credit                                                                                                                                     	|
        | SDD_AGREED_TO_PAY  	| MTP                          	        | Any Contract       	| Simplified Direct debit option (Minimum to pay or Statement value). Default = MTP                                                                                                                      	| Credit                                                                                                                                     	|
        | SDD_AGREED_TO_PAY  	| STMT                          	      | Any Contract       	| Simplified Direct debit option (Minimum to pay or Statement value). Default = MTP                                                                                                                      	| Credit                                                                                                                                     	|
        | STOCK              	| N                               	    | Account Contract   	| Identifying whether contract is STOCK (value = Y) or TARGET (value = N)/Cannot be changed through `setContractClassifier`                                                                           	  | Prepaid                                                                                                                                    	|
        | STOCK              	| Y                               	    | Account Contract   	| Identifying whether contract is STOCK (value = Y) or TARGET (value = N)/Cannot be changed through `setContractClassifier`                                                                           	  | Prepaid                                                                                                                                    	|
        | TRX_FEES_ENABLED   	| N                               	    | Any Contract       	| Transaction Fees Enabled Default - Y. Cannot be changed through `setContractClassifier`                                                                                                               	| Credit                                                                                                                                     	|
        | TRX_FEES_ENABLED   	| Y                               	    | Any Contract       	| Transaction Fees Enabled Default - Y. Cannot be changed through `setContractClassifier`                                                                                                               	| Credit                                                                                                                                     	|

      operationId: getContractClassifiers
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/classifierCodes'
        - $ref: '#/components/parameters/contractId'
      responses:
        '200':
          $ref: '#/components/responses/ContractClassifiers'
        '400':
          $ref: '#/components/responses/BadRequestInvalidContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ContractNotFoundError'
  /clients/{client_id}/custom-data:
    post:
      tags:
        - Custom Data
      summary: Sets up a custom data for a client
      description: |
        Operation name: `setClientCustomData`

        Operation is used to manage custom data of the client object:
          * add
          * update
          * remove

        Client custom data allow the Issuer to store specific client-related information on client record in the MP's CMS.
        The tags may represent Issuer-specific field names and values, not available as separate, dedicated fields on client record.
        The Issuer can specify the tag name and its value.

        Custom data tags are stored in fixed containers (four containers are available) in TAG=VALUE; format (for example: CATEGORY=A;GROUP=G1;).

        Each container has length of 3900 characters.
      operationId: setClientCustomData
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/clientId'
        - $ref: '#/components/parameters/idempotencyKey'
      requestBody:
        $ref: '#/components/requestBodies/CustomDataTags'
      responses:
        '200':
          $ref: '#/components/responses/ClientCustomDataSetUp'
        '400':
          $ref: '#/components/responses/BadRequestInvalidClientTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ClientNotFoundError'
  /clients/{client_id}/custom-data/{tag_name}:
    get:
      tags:
        - Custom Data
      summary: Retrieves selected custom data for a client
      description: |
        Operation name: `getClientCustomData`

        Operation is used to retrieve selected custom data of the client object.
      operationId: getClientCustomData
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/clientId'
        - $ref: '#/components/parameters/tagName'
      responses:
        '200':
          $ref: '#/components/responses/ClientCustomDataTagValues'
        '400':
          $ref: '#/components/responses/BadRequestInvalidClientTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ClientNotFoundError'
  /contracts/{contract_id}/custom-data:
    post:
      tags:
        - Custom Data
      summary: Sets up a custom data for a specified contract (account contract or card contract)
      description: |
        Operation name: `setContractCustomData`

        Operation is used to manage custom data of the contract (**account contract** or **card contract**):
          * add
          * update
          * remove

        Account contract custom data allow the Issuer to store specific contract-related information on a contract record in the MP's CMS.
        The tags may represent the Issuer-specific field names and values, not available as separate, dedicated fields on the contract record.
        The Issuer can specify the tag name and its value.

        Custom data tags are stored in fixed containers (four containers are available) in TAG=VALUE; format (for example: CATEGORY=A;GROUP=G1;).

        Each container has length of 255 characters.
      operationId: setContractCustomData
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/contractId'
        - $ref: '#/components/parameters/idempotencyKey'
      requestBody:
        $ref: '#/components/requestBodies/CustomDataTags'
      responses:
        '200':
          $ref: '#/components/responses/ContractCustomDataSetUp'
        '400':
          $ref: '#/components/responses/BadRequestInvalidContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ContractNotFoundError'
  /contracts/{contract_id}/custom-data/{tag_name}:
    get:
      tags:
        - Custom Data
      summary: Retrieves selected custom data for a specified contract (account contract or card contract)
      description: |
        Operation name: `getContractCustomData`

        Operation is used to retrieve selected custom data of the specified contract (**account contract** or **card contract**).
      operationId: getContractCustomData
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/contractId'
        - $ref: '#/components/parameters/tagName'
      responses:
        '200':
          $ref: '#/components/responses/ContractCustomDataTagValues'
        '400':
          $ref: '#/components/responses/BadRequestInvalidContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ContractNotFoundError'
  /contracts/{contract_id}/parameters/{parameter_code}:
    put:
      tags:
        - Parameter
      summary: Sets up or changes a contract's parameter value.
      description: |
        Operation name: `setContractParameter`

        Operation is used to set or change the contract (**account contract** or **card contract**) parameter value.

        Contract parameters are used for storing the product configuration values.
        For example, contract parameters can store:
          * chosen billing day (for credit card)
          * the profile of the fees
          * the profile of the interest

        The set of allowed contract parameters for the contract depends on the product based on which the contract is created.
        A list of possible contract parameter codes will be defined during the card product implementation project.

        Available parameters in the standard product with possible values:
        | `parameter_code`           	| `parameterValue`                          	| **Contract level** 	| **Description**                              	| **Product applicability** 	|
        |----------------------------	|-------------------------------------------	|--------------------	|----------------------------------------------	|---------------------------	|
        | FUNCTIONAL_DATES           	| DATE_PLAN_01                              	| Account   Contract 	| Functional   dates plan management           	| Prepaid                   	|
        | FUNCTIONAL_DATES           	| DATE_PLAN_02                              	| Account   Contract 	| Functional   dates plan management           	| Prepaid                   	|
        | GL_PLAN                    	| GL_PLAN_01                                	| Account   Contract 	| GL plan   management                         	| Credit                    	|
        | INTEREST_PLAN              	| INT_PLAN_01 	                              | Account   Contract 	| Interest   plan management                   	| Credit                    	|
        | INTEREST_PLAN              	| INT_PLAN_02 	                              | Account   Contract 	| Interest   plan management                   	| Credit                    	|
        | INTEREST_PLAN              	| INT_PLAN_03 	                              | Account   Contract 	| Interest   plan management                   	| Credit                    	|
        | MTP_OPTION                 	| MTP_OPTION_01           	                  | Account   Contract 	| MTP   option management                      	| Credit                    	|
        | MTP_OPTION                 	| MTP_OPTION_02            	                  | Account   Contract 	| MTP   option management                      	| Credit                    	|
        | SDD_AGREED_TO_PAY_VARIANCE 	| NULL                    	                  | Card   contract    	| Variance   for Direct debit Statement option 	| Credit                    	|
        | SDD_AGREED_TO_PAY_VARIANCE 	| 10                                        	| Card   contract    	| Variance   for Direct debit Statement option 	| Credit                    	|
        | SDD_AGREED_TO_PAY_VARIANCE 	| 20                                        	| Card   contract    	| Variance   for Direct debit Statement option 	| Credit                    	|
        | SDD_AGREED_TO_PAY_VARIANCE 	| 30                	                        | Card   contract    	| Variance   for Direct debit Statement option 	| Credit                    	|
        | SDD_AGREED_TO_PAY_VARIANCE 	| 50                 	                        | Card   contract    	| Variance   for Direct debit Statement option 	| Credit                    	|
        | SDD_AGREED_TO_PAY_VARIANCE 	| 75                                        	| Card   contract    	| Variance   for Direct debit Statement option 	| Credit                    	|
        | TARIFF_PLAN                	| FEE_PLAN_01	                                | Any   Contract     	| Fee plan   management                        	| Credit, Prepaid             |
        | TARIFF_PLAN                	| FEE_PLAN_02                                 | Any   Contract     	| Fee plan   management                        	| Credit, Prepaid             |
        | TARIFF_PLAN                	| FEE_PLAN_03 	                              | Any   Contract     	| Fee plan   management                        	| Credit                    	|

      operationId: setContractParameter
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/contractId'
        - $ref: '#/components/parameters/parameterCode'
      requestBody:
        $ref: '#/components/requestBodies/ParameterModification'
      responses:
        '204':
          $ref: '#/components/responses/ContractParameterSetOrChanged'
        '400':
          $ref: '#/components/responses/BadRequestInvalidContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ContractNotFoundError'
  /contracts/{contract_id}/parameters:
    get:
      tags:
        - Parameter
      summary: Retrieves information about contract (account contract or card contract) parameter(s).
      description: |
        Operation name: `getContractParameters`

        Operation is used to retrieve information about contract parameter(s) (**account contract** or **card contract**).

        The Issuer is allowed to provide parameter codes to retrieve information only about specific parameters.

        Available parameters in the standard product with possible values:
        | `parameterCode`           	| `parameterValue`                          	| **Contract level** 	| **Description**                              	| **Product applicability** 	|
        |----------------------------	|-------------------------------------------	|--------------------	|----------------------------------------------	|---------------------------	|
        | FUNCTIONAL_DATES           	| DATE_PLAN_01                              	| Account   Contract 	| Functional   dates plan management           	| Prepaid                   	|
        | FUNCTIONAL_DATES           	| DATE_PLAN_02                              	| Account   Contract 	| Functional   dates plan management           	| Prepaid                   	|
        | GL_PLAN                    	| GL_PLAN_01                                	| Account   Contract 	| GL plan   management                         	| Credit                    	|
        | INTEREST_PLAN              	| INT_PLAN_01                               	| Account   Contract 	| Interest   plan management                   	| Credit                    	|
        | INTEREST_PLAN              	| INT_PLAN_02   	                            | Account   Contract 	| Interest   plan management                   	| Credit                    	|
        | INTEREST_PLAN              	| INT_PLAN_03   	                            | Account   Contract 	| Interest   plan management                   	| Credit                    	|
        | MTP_OPTION                 	| MTP_OPTION_01                             	| Account   Contract 	| MTP   option management                      	| Credit                    	|
        | MTP_OPTION                 	| MTP_OPTION_02                             	| Account   Contract 	| MTP   option management                      	| Credit                    	|
        | SDD_AGREED_TO_PAY_VARIANCE 	| NULL            	                          | Card   contract    	| Variance   for Direct debit Statement option 	| Credit                    	|
        | SDD_AGREED_TO_PAY_VARIANCE 	| 10            	                            | Card   contract    	| Variance   for Direct debit Statement option 	| Credit                    	|
        | SDD_AGREED_TO_PAY_VARIANCE 	| 20             	                            | Card   contract    	| Variance   for Direct debit Statement option 	| Credit                    	|
        | SDD_AGREED_TO_PAY_VARIANCE 	| 30             	                            | Card   contract    	| Variance   for Direct debit Statement option 	| Credit                    	|
        | SDD_AGREED_TO_PAY_VARIANCE 	| 50              	                          | Card   contract    	| Variance   for Direct debit Statement option 	| Credit                    	|
        | SDD_AGREED_TO_PAY_VARIANCE 	| 75                                        	| Card   contract    	| Variance   for Direct debit Statement option 	| Credit                    	|
        | TARIFF_PLAN                	| FEE_PLAN_01                             	  | Any   Contract     	| Fee plan   management                        	| Credit, Prepaid             |
        | TARIFF_PLAN                	| FEE_PLAN_02 	                              | Any   Contract     	| Fee plan   management                        	| Credit, Prepaid             |
        | TARIFF_PLAN                	| FEE_PLAN_03 	                              | Any   Contract     	| Fee plan   management                        	| Credit                    	|

      operationId: getContractParameters
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/contractId'
        - $ref: '#/components/parameters/parameterCodes'
      responses:
        '200':
          $ref: '#/components/responses/ContractParameters'
        '400':
          $ref: '#/components/responses/BadRequestInvalidContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ContractNotFoundError'
  /contracts/{contract_id}/debits:
    post:
      tags:
        - Transaction
      summary: Posts debit transaction to a contract (account contract or card contract)
      description: |
        Operation name: `debitContract`

        Operation is used to post debit transaction for particular contract (**account contract** or **card contract**).

        Available debit transactions in the standard product:
        | `transactionTypeCode` 	| **Description**             	| **Contract level** 	| **Product applicability** 	|
        |-----------------------	|-----------------------------	|--------------------	|---------------------------	|
        | BT1                   	| Balance Transfer            	| Account contract   	| Credit                    	|
        | FP                    	| Fee posting                 	| Account contract   	| Credit                    	|
        | I_TPD                 	| Transaction posting - debit 	| Account contract   	| Credit, Prepaid           	|
        | TPD                   	| Transaction posting - debit 	| Account contract   	| Credit                    	|
      operationId: debitContract
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/contractId'
        - $ref: '#/components/parameters/idempotencyKey'
      requestBody:
        $ref: '#/components/requestBodies/TransactionContractDebit'
      responses:
        '201':
          $ref: '#/components/responses/DebitTransactionId'
        '400':
          $ref: '#/components/responses/BadRequestInvalidContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ContractNotFoundError'
  /contracts/{contract_id}/credits:
    post:
      tags:
        - Transaction
      summary: Posts credit transaction to a contract (account contract or card contract)
      description: |
        Operation name: `creditContract`

        Operation is used to post credit transaction for particular contract (**account contract** or **card contract**).

        Available credit transactions in the standard product:
        | `transactionTypeCode` 	| **Description**              	| **Contract level** 	| **Product applicability** 	|
        |-----------------------	|------------------------------	|--------------------	|---------------------------	|
        | I_TPC                 	| Transaction posting - credit 	| Account contract   	| Credit, Prepaid           	|
        | PT_1                  	| Payment to Client Contract   	| Account contract   	| Credit                    	|
        | TP                    	| Top-up prepaid card          	| Account contract   	| Prepaid                   	|
        | TPC_1                 	| Transaction posting - credit 	| Account contract   	| Credit, Prepaid           	|
      operationId: creditContract
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/contractId'
        - $ref: '#/components/parameters/idempotencyKey'
      requestBody:
        $ref: '#/components/requestBodies/TransactionContractCredit'
      responses:
        '201':
          $ref: '#/components/responses/CreditTransactionId'
        '400':
          $ref: '#/components/responses/BadRequestInvalidContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ContractNotFoundError'
  /contracts/{contract_id}/charge-fees:
    post:
      tags:
        - Transaction
      summary: Charges specified contract (account contract or card contract) with a fee configured in the MP's CMS
      description: |
        Operation name: `chargeFee`

        Operation is used to charge the specified contract (**account contract** or **card contract**) with fee configured on MP's CMS.

        Available fees in the standard product:
        | `feeTypeId` 	| **Description**          	| **Contract level** 	| **Product applicability** 	|
        |-------------	|--------------------------	|--------------------	|---------------------------	|
        | APSF        	| Paper statement fee      	| Account contract   	| Credit                    	|
        | AUCF        	| Urgent card fee          	| Card contract      	| Credit, Prepaid           	|
        | MFM         	| Miscellaneous custom fee 	| Account contract   	| Prepaid                   	|

      operationId: chargeFee
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/contractId'
        - $ref: '#/components/parameters/idempotencyKey'
      requestBody:
        $ref: '#/components/requestBodies/ChargeFee'
      responses:
        '201':
          $ref: '#/components/responses/ChargeTransactionId'
        '400':
          $ref: '#/components/responses/BadRequestInvalidContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ContractNotFoundError'
  /contracts/{contract_id}/transactions:
    get:
      tags:
        - Transaction
      summary: Retrieves transactions for a specified contract (account contract or card contract)
      description: |
        Operation name: `getTransactions`

        Operation is used to retrieve transactions for a specified contract (**account contract** or **card contract**).

        Additional filtering can be applied:
          * **Date from** - to define the start period
          * **Date to** - to define the end period
          * **Authorization filter mode** - to retrieve records with different impact on contract balance
          * **Authorized flag** - to retrieve records which were authorized or not
          * **Transaction type code** - to retrieve transactions of a specified type

        Note: Date filters use CMS "transaction date" (`transactionDate` field) to filter the records.
      operationId: getTransactions
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/contractId'
        - $ref: '#/components/parameters/transactionDateFrom'
        - $ref: '#/components/parameters/transactionDateTo'
        - $ref: '#/components/parameters/transactionAuthorizationFilterMode'
        - $ref: '#/components/parameters/transactionAuthorized'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/transactionTypeCodes'
      responses:
        '200':
          $ref: '#/components/responses/Transactions'
        '400':
          $ref: '#/components/responses/BadRequestInvalidContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ContractNotFoundError'
  /contracts/{contract_id}/transaction-documents:
    get:
      tags:
        - Transaction
      summary: Retrieves transaction documents for a contract (account contract or card contract)
      description: |
        Operation name: `getContractTransactionDocuments`

        Operation is used to retrieve transaction documents for a specified contract (**account contract** or **card contract**).

        Additional filtering can be applied:
          * **Date from** - to define the start period
          * **Date to** - to define the end period
          * **Authorization filter** - to retrieve records with different impact on the contract balance
          * **Collect authorizations** - to retrieve only cleared transactions or also pending authorizations
          * **Contract hierarchy** - to enable contract hierarchy analysis
          * **Direction** - to retrieve only debit or credit transactions
          * **Transaction type code** - to retrieve transactions of a specified type

        Note: Date filters use CMS posting date (`postingDate` field) to filter the records.
      operationId: getContractTransactionDocuments
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/contractId'
        - $ref: '#/components/parameters/transactionDateFrom'
        - $ref: '#/components/parameters/transactionDateTo'
        - $ref: '#/components/parameters/transactionAuthorizationFilterMode'
        - $ref: '#/components/parameters/transactionCollectAuthorizations'
        - $ref: '#/components/parameters/contractHierarchy'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/transactionTypeCodes'
      responses:
        '200':
          $ref: '#/components/responses/TransactionDocuments'
        '400':
          $ref: '#/components/responses/BadRequestInvalidContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ContractNotFoundError'
  /transaction-documents:
    get:
      tags:
        - Transaction
      summary: Retrieves transaction documents by ID, ARN, RRN or SRN
      description: |
        Operation name: `getTransactionDocuments`


        Method is used to retrieve transaction documents by

        * ID - Transaction document identifier

        * ARN - Acquirer Reference Number

        * RRN - Retrieval Reference Number

        * SRN - Source Registration Number


        ID - Transaction document identifier


        ARN - Transaction identification number generated by the acquirer according to payment scheme rules


        RRN - Transaction identifier generated according to payment scheme rules


        SRN - Document registration number assigned by the sender
      operationId: getTransactionDocuments
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/transactionSelectorType'
        - $ref: '#/components/parameters/transactionSelectorValue'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          $ref: '#/components/responses/TransactionDocuments'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '400':
          $ref: '#/components/responses/BadRequestMissingTransactionSelectorTypeError'
  /transactions/{transaction_id}/fees:
    get:
      tags:
        - Transaction
      summary: Retrieves fees generated for a transaction.
      description: |
        Operation name: `getTransactionFees`

        Operation is used to retrieve fees generated for a specified transaction.
      operationId: getTransactionFees
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/transactionId'
      responses:
        '200':
          $ref: '#/components/responses/TransactionFees'
        '400':
          $ref: '#/components/responses/BadRequestInvalidTransactionTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/TransactionNotFoundError'
  /contracts/{contract_id}/usage-limits/{usage_limit_code}:
    put:
      tags:
        - Usage limit
      summary: Adds or updates a usage limit for a given contract (account contract or card contract)
      description: |
        Operation name: `setUsageLimit`

        Operation is used to add or update a new usage limit for the contract (**account contract** or **card contract**).

        MP API does not provide an option to create a new usage limit. Usage limits are defined during the setup phase of the product (card product).
        Each usage limit has default values stored on CMS configuration (Service Pack).
        Operation `setUsageLimit` allows to update those default values of a given usage limit for the specified contract.
        The updated values are immediately used in authorization checks.

        Specifics of a combination of limit properties (`maxNumber`, `maxAmount`, `maxSingleAmount`) parameters:
          * Limit could be active (after overriding by `setUsageLimit`) with all 0 which means that all transactions belonging
            to this limit will be declined. If all three fields have zero values, all transactions are prohibited.
          * If at least one property is set to non-zero, the limit will allow transactions up to that number or amount respectively.
          * If at least one property is set to a big number (ex. `maxNumber` set to 999999999 which is unlikely to reach in normal circumstances),
            it will serve the same purpose as disabling limit.

        **Examples:**
        1.  *`maxNumber`=0, `maxAmount`=1000, `maxSingleAmount`=200*

            In this configuration, no limit is set on the total number of transactions (maxNumber) on a contract for a period.
            The total transaction amount for a period (maxAmount) and single transaction amount (maxSingleAmount) are limited.

        2.  *`maxNumber`=10, `maxAmount`=0, `maxSingleAmount`=200*

            In this configuration, the total number of transactions on a contract for a period and single transaction amount are limited.
            No limit is set on the total transaction amount for a period.

        3.  *`maxNumber`=10, `maxAmount`=1000, `maxSingleAmount`=0*

            In this configuration, the total number of transactions on a contract and the total transaction amount for a period are limited.
            No limit is set on the single transaction amount.

        Note:
        If limiter parameters were changed several times, and the effective periods of the redefined parameters overlap, the system remembers the changed values in the overlapping time periods. For example:
          * On 01.10.2009 a card was opened for a client. A limit of 300 USD was set on this card for operations at ATMs.
          * The client requested that for a period of one month, beginning 05.10.2009, the limit on his card be increased from 300 USD to 600 USD.
          * On 10.10.2009 the client asked to increase the limit on his card from 600 USD to 900 USD for one day.
          * Therefore, from 01.10.2009 to 04.10.2009 the limit will be 300 USD, from 05.10.2009 to 09.10.2009 it will increase to 600 USD,
            on 10.10.2009 it will be 900 USD, and from 11.10.2009 to 05.11.2009 the limit will be 600 USD again. After 05.11.2009 the limit will return to 300 USD.

        Available usage limits in the standard product. In the standard product usage limits are defined in the Parametrization Workbook (PPW), in the worksheet 4 *Usage Limits* and in the worksheet 5 *Top-up* (in case of dedicated usage limits for prepaid).
          | `usageLimitCode`      	| **Contract   level** 	| **Description**                                                         	| **Product applicability** 	|
          |-----------------------	|----------------------	|-------------------------------------------------------------------------	|---------------------------	|
          | BILLING_ATM           	| Card contract        	| Billing ATM withdrawal transactions                                     	| Credit                    	|
          | BILLING_CASH          	| Card contract        	| Billing ATM withdrawal and Cash advance transactions                    	| Credit                    	|
          | BILLING_ECOMM         	| Card contract        	| Billing e-commerce transactions                                         	| Credit                    	|
          | BILLING_MOTO          	| Card contract        	| Billing MOTO transactions                                               	| Credit                    	|
          | BILLING_RETAIL        	| Card contract        	| Billing Retail (POS, e-commerce, MOTO and other payments) transactions  	| Credit                    	|
          | BILLING_TOTAL         	| Card contract        	| Billing all types of transactions                                       	| Credit                    	|
          | DAILY_ATM             	| Card contract        	| Daily ATM withdrawal transactions                                       	| Any product               	|
          | DAILY_CASH            	| Card contract        	| Daily ATM withdrawal and Cash advance transactions                      	| Any product               	|
          | DAILY_ECOMM           	| Card contract        	| Daily e-commerce transactions                                           	| Any product               	|
          | DAILY_MOTO            	| Card contract        	| Daily MOTO transactions                                                 	| Any product               	|
          | DAILY_RETAIL          	| Card contract        	| Daily Retail (POS, e-commerce, MOTO and other payments) transactions    	| Any product               	|
          | DAILY_TOP_UP          	| Account contract     	| Cumulative daily top-up limit                                           	| Prepaid                   	|
          | DAILY_TOTAL           	| Card contract        	| Daily all types of transactions                                         	| Any product               	|
          | MONTHLY_ATM           	| Card contract        	| Monthly ATM withdrawal transactions                                     	| Any product               	|
          | MONTHLY_CASH          	| Card contract        	| Monthly ATM withdrawal and Cash advance transactions                    	| Any product               	|
          | MONTHLY_ECOMM         	| Card contract        	| Monthly e-commerce transactions                                         	| Any product               	|
          | MONTHLY_MOTO          	| Card contract        	| Monthly MOTO transactions                                               	| Any product               	|
          | MONTHLY_RETAIL        	| Card contract        	| Monthly Retail  (POS, e-commerce, MOTO and other payments) transactions 	| Any product               	|
          | MONTHLY_TOP_UP        	| Account contract     	| Cumulative monthly top-up limit                                         	| Prepaid                   	|
          | MONTHLY_TOTAL         	| Card contract        	| Monthly all types of transactions                                       	| Any product               	|
          | PREPAID_BALANCE_LIMIT 	| Account contract     	| Prepaid Balance Limit                                                   	| Prepaid                   	|
          | YEARLY_TOP_UP         	| Account contract     	| Cumulative yearly top-up limit                                          	| Prepaid                   	|
      operationId: setUsageLimit
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/contractId'
        - $ref: '#/components/parameters/usageLimitCode'
      requestBody:
        $ref: '#/components/requestBodies/UsageLimitModification'
      responses:
        '204':
          $ref: '#/components/responses/ContractUsageLimitAddedOrUpdated'
        '400':
          $ref: '#/components/responses/BadRequestInvalidContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ContractNotFoundError'
  /contracts/{contract_id}/usage-limits:
    get:
      tags:
        - Usage limit
      summary: Retrieves a list of usage limits for a contract (account contract or card contract)
      description: |
        Operation name: `getUsageLimits`

        Operation is used to retrieve specified usage limits for a given contract (**account contract** or **card contract**).

        The response will contain only specified usage limits. If the request doesn't contain any limit code value then the response will be empty.

        Note: Operation retrieves only the current (at the time of query) state of the limit.

        Available usage limits in the standard product. In the standard product usage limits are defined in the Parametrization Workbook (PPW), in the worksheet 4 *Usage Limits* and in the worksheet 5 *Top-up* (in case of dedicated usage limits for prepaid).
          | `usageLimitCode`      	| **Contract   level** 	| **Description**                                                         	| **Product applicability** 	|
          |-----------------------	|----------------------	|-------------------------------------------------------------------------	|---------------------------	|
          | BILLING_ATM           	| Card contract        	| Billing ATM withdrawal transactions                                     	| Credit                    	|
          | BILLING_CASH          	| Card contract        	| Billing ATM withdrawal and Cash advance transactions                    	| Credit                    	|
          | BILLING_ECOMM         	| Card contract        	| Billing e-commerce transactions                                         	| Credit                    	|
          | BILLING_MOTO          	| Card contract        	| Billing MOTO transactions                                               	| Credit                    	|
          | BILLING_RETAIL        	| Card contract        	| Billing Retail (POS, e-commerce, MOTO and other payments) transactions  	| Credit                    	|
          | BILLING_TOTAL         	| Card contract        	| Billing all types of transactions                                       	| Credit                    	|
          | DAILY_ATM             	| Card contract        	| Daily ATM withdrawal transactions                                       	| Any product               	|
          | DAILY_CASH            	| Card contract        	| Daily ATM withdrawal and Cash advance transactions                      	| Any product               	|
          | DAILY_ECOMM           	| Card contract        	| Daily e-commerce transactions                                           	| Any product               	|
          | DAILY_MOTO            	| Card contract        	| Daily MOTO transactions                                                 	| Any product               	|
          | DAILY_RETAIL          	| Card contract        	| Daily Retail (POS, e-commerce, MOTO and other payments) transactions    	| Any product               	|
          | DAILY_TOP_UP          	| Account contract     	| Cumulative daily top-up limit                                           	| Prepaid                   	|
          | DAILY_TOTAL           	| Card contract        	| Daily all types of transactions                                         	| Any product               	|
          | MONTHLY_ATM           	| Card contract        	| Monthly ATM withdrawal transactions                                     	| Any product               	|
          | MONTHLY_CASH          	| Card contract        	| Monthly ATM withdrawal and Cash advance transactions                    	| Any product               	|
          | MONTHLY_ECOMM         	| Card contract        	| Monthly e-commerce transactions                                         	| Any product               	|
          | MONTHLY_MOTO          	| Card contract        	| Monthly MOTO transactions                                               	| Any product               	|
          | MONTHLY_RETAIL        	| Card contract        	| Monthly Retail  (POS, e-commerce, MOTO and other payments) transactions 	| Any product               	|
          | MONTHLY_TOP_UP        	| Account contract     	| Cumulative monthly top-up limit                                         	| Prepaid                   	|
          | MONTHLY_TOTAL         	| Card contract        	| Monthly all types of transactions                                       	| Any product               	|
          | PREPAID_BALANCE_LIMIT 	| Account contract     	| Prepaid Balance Limit                                                   	| Prepaid                   	|
          | YEARLY_TOP_UP         	| Account contract     	| Cumulative yearly top-up limit                                          	| Prepaid                   	|
      operationId: getUsageLimits
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/contractId'
        - $ref: '#/components/parameters/usageLimitCodes'
      responses:
        '200':
          $ref: '#/components/responses/UsageLimits'
        '400':
          $ref: '#/components/responses/BadRequestInvalidContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ContractNotFoundError'
  /contracts/{contract_id}/usage-limits/{usage_limit_code}/original-values:
    put:
      tags:
        - Usage limit
      summary: Restores original values of a usage limit for a given contract (account contract or card contract)
      description: |
        Operation name: `restoreUsageLimitOriginalValues`

        Operation is used to restore usage limit default parameters specified in the CMS (Service Package) for the contract (**account contract** or **card contract**).

        Available usage limits in the standard product. In the standard product usage limits are defined in the Parametrization Workbook (PPW), in the worksheet 4 *Usage Limits* and in the worksheet 5 *Top-up* (in case of dedicated usage limits for prepaid).
          | `usageLimitCode`      	| **Contract   level** 	| **Description**                                                         	| **Product applicability** 	|
          |-----------------------	|----------------------	|-------------------------------------------------------------------------	|---------------------------	|
          | BILLING_ATM           	| Card contract        	| Billing ATM withdrawal transactions                                     	| Credit                    	|
          | BILLING_CASH          	| Card contract        	| Billing ATM withdrawal and Cash advance transactions                    	| Credit                    	|
          | BILLING_ECOMM         	| Card contract        	| Billing e-commerce transactions                                         	| Credit                    	|
          | BILLING_MOTO          	| Card contract        	| Billing MOTO transactions                                               	| Credit                    	|
          | BILLING_RETAIL        	| Card contract        	| Billing Retail (POS, e-commerce, MOTO and other payments) transactions  	| Credit                    	|
          | BILLING_TOTAL         	| Card contract        	| Billing all types of transactions                                       	| Credit                    	|
          | DAILY_ATM             	| Card contract        	| Daily ATM withdrawal transactions                                       	| Any product               	|
          | DAILY_CASH            	| Card contract        	| Daily ATM withdrawal and Cash advance transactions                      	| Any product               	|
          | DAILY_ECOMM           	| Card contract        	| Daily e-commerce transactions                                           	| Any product               	|
          | DAILY_MOTO            	| Card contract        	| Daily MOTO transactions                                                 	| Any product               	|
          | DAILY_RETAIL          	| Card contract        	| Daily Retail (POS, e-commerce, MOTO and other payments) transactions    	| Any product               	|
          | DAILY_TOP_UP          	| Account contract     	| Cumulative daily top-up limit                                           	| Prepaid                   	|
          | DAILY_TOTAL           	| Card contract        	| Daily all types of transactions                                         	| Any product               	|
          | MONTHLY_ATM           	| Card contract        	| Monthly ATM withdrawal transactions                                     	| Any product               	|
          | MONTHLY_CASH          	| Card contract        	| Monthly ATM withdrawal and Cash advance transactions                    	| Any product               	|
          | MONTHLY_ECOMM         	| Card contract        	| Monthly e-commerce transactions                                         	| Any product               	|
          | MONTHLY_MOTO          	| Card contract        	| Monthly MOTO transactions                                               	| Any product               	|
          | MONTHLY_RETAIL        	| Card contract        	| Monthly Retail  (POS, e-commerce, MOTO and other payments) transactions 	| Any product               	|
          | MONTHLY_TOP_UP        	| Account contract     	| Cumulative monthly top-up limit                                         	| Prepaid                   	|
          | MONTHLY_TOTAL         	| Card contract        	| Monthly all types of transactions                                       	| Any product               	|
          | PREPAID_BALANCE_LIMIT 	| Account contract     	| Prepaid Balance Limit                                                   	| Prepaid                   	|
          | YEARLY_TOP_UP         	| Account contract     	| Cumulative yearly top-up limit                                          	| Prepaid                   	|
      operationId: restoreUsageLimitOriginalValues
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/contractId'
        - $ref: '#/components/parameters/usageLimitCode'
      requestBody:
        $ref: '#/components/requestBodies/UsageLimitOriginalValue'
      responses:
        '204':
          $ref: '#/components/responses/ContractUsageLimitRestored'
        '400':
          $ref: '#/components/responses/BadRequestInvalidContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ContractNotFoundError'
  /contracts/{contract_id}/usage-limits/{usage_limit_code}/resetting-counters:
    put:
      tags:
        - Usage limit
      summary: Resets counters for a specified usage limit for a given contract (account contract or card contract)
      description: |
        Operation name: `resetUsageLimitCounters`

        Operation is used to reset counters for a specified usage limit for the contract (**account contract** or **card contract**).

        Available usage limits in the standard product. In the standard product usage limits are defined in the Parametrization Workbook (PPW), in the worksheet 4 *Usage Limits* and in the worksheet 5 *Top-up* (in case of dedicated usage limits for prepaid).
          | `usageLimitCode`      	| **Contract   level** 	| **Description**                                                         	| **Product applicability** 	|
          |-----------------------	|----------------------	|-------------------------------------------------------------------------	|---------------------------	|
          | BILLING_ATM           	| Card contract        	| Billing ATM withdrawal transactions                                     	| Credit                    	|
          | BILLING_CASH          	| Card contract        	| Billing ATM withdrawal and Cash advance transactions                    	| Credit                    	|
          | BILLING_ECOMM         	| Card contract        	| Billing e-commerce transactions                                         	| Credit                    	|
          | BILLING_MOTO          	| Card contract        	| Billing MOTO transactions                                               	| Credit                    	|
          | BILLING_RETAIL        	| Card contract        	| Billing Retail (POS, e-commerce, MOTO and other payments) transactions  	| Credit                    	|
          | BILLING_TOTAL         	| Card contract        	| Billing all types of transactions                                       	| Credit                    	|
          | DAILY_ATM             	| Card contract        	| Daily ATM withdrawal transactions                                       	| Any product               	|
          | DAILY_CASH            	| Card contract        	| Daily ATM withdrawal and Cash advance transactions                      	| Any product               	|
          | DAILY_ECOMM           	| Card contract        	| Daily e-commerce transactions                                           	| Any product               	|
          | DAILY_MOTO            	| Card contract        	| Daily MOTO transactions                                                 	| Any product               	|
          | DAILY_RETAIL          	| Card contract        	| Daily Retail (POS, e-commerce, MOTO and other payments) transactions    	| Any product               	|
          | DAILY_TOP_UP          	| Account contract     	| Cumulative daily top-up limit                                           	| Prepaid                   	|
          | DAILY_TOTAL           	| Card contract        	| Daily all types of transactions                                         	| Any product               	|
          | MONTHLY_ATM           	| Card contract        	| Monthly ATM withdrawal transactions                                     	| Any product               	|
          | MONTHLY_CASH          	| Card contract        	| Monthly ATM withdrawal and Cash advance transactions                    	| Any product               	|
          | MONTHLY_ECOMM         	| Card contract        	| Monthly e-commerce transactions                                         	| Any product               	|
          | MONTHLY_MOTO          	| Card contract        	| Monthly MOTO transactions                                               	| Any product               	|
          | MONTHLY_RETAIL        	| Card contract        	| Monthly Retail  (POS, e-commerce, MOTO and other payments) transactions 	| Any product               	|
          | MONTHLY_TOP_UP        	| Account contract     	| Cumulative monthly top-up limit                                         	| Prepaid                   	|
          | MONTHLY_TOTAL         	| Card contract        	| Monthly all types of transactions                                       	| Any product               	|
          | PREPAID_BALANCE_LIMIT 	| Account contract     	| Prepaid Balance Limit                                                   	| Prepaid                   	|
          | YEARLY_TOP_UP         	| Account contract     	| Cumulative yearly top-up limit                                          	| Prepaid                   	|
      operationId: resetUsageLimitCounters
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/contractId'
        - $ref: '#/components/parameters/usageLimitCode'
      requestBody:
        $ref: '#/components/requestBodies/UsageLimitResetting'
      responses:
        '204':
          $ref: '#/components/responses/ContractUsageLimitCounterReset'
        '400':
          $ref: '#/components/responses/BadRequestInvalidContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ContractNotFoundError'
  /contracts/{contract_id}/usage-limits/{usage_limit_code}/status:
    put:
      tags:
        - Usage limit
      summary: Changes specified usage limit status for a given contract (account contract or card contract)
      description: |
        Operation name: `changeUsageLimitStatus`

        Operation is used to manage the activity of the specified usage limit on a given contract (**account contract** or **card contract**).

        The Issuer is able to:
          * switch off usage limit
          * switch on usage limit

        Additionally, activity period can be provided (start and end timestamp).

          * For switch off (SUSPEND):
            * activation date must be greater than the deactivation date
            * activation date must be greater than the system date

          * For switch on (ACTIVE):
            * deactivation date must be greater than the activation date
            * deactivation date must be greater than the system date

        Available usage limits in the standard product. In the standard product usage limits are defined in the Parametrization Workbook (PPW), in the worksheet 4 *Usage Limits* and in the worksheet 5 *Top-up* (in case of dedicated usage limits for prepaid).
          | `usageLimitCode`      	| **Contract   level** 	| **Description**                                                         	| **Product applicability** 	|
          |-----------------------	|----------------------	|-------------------------------------------------------------------------	|---------------------------	|
          | BILLING_ATM           	| Card contract        	| Billing ATM withdrawal transactions                                     	| Credit                    	|
          | BILLING_CASH          	| Card contract        	| Billing ATM withdrawal and Cash advance transactions                    	| Credit                    	|
          | BILLING_ECOMM         	| Card contract        	| Billing e-commerce transactions                                         	| Credit                    	|
          | BILLING_MOTO          	| Card contract        	| Billing MOTO transactions                                               	| Credit                    	|
          | BILLING_RETAIL        	| Card contract        	| Billing Retail (POS, e-commerce, MOTO and other payments) transactions  	| Credit                    	|
          | BILLING_TOTAL         	| Card contract        	| Billing all types of transactions                                       	| Credit                    	|
          | DAILY_ATM             	| Card contract        	| Daily ATM withdrawal transactions                                       	| Any product               	|
          | DAILY_CASH            	| Card contract        	| Daily ATM withdrawal and Cash advance transactions                      	| Any product               	|
          | DAILY_ECOMM           	| Card contract        	| Daily e-commerce transactions                                           	| Any product               	|
          | DAILY_MOTO            	| Card contract        	| Daily MOTO transactions                                                 	| Any product               	|
          | DAILY_RETAIL          	| Card contract        	| Daily Retail (POS, e-commerce, MOTO and other payments) transactions    	| Any product               	|
          | DAILY_TOP_UP          	| Account contract     	| Cumulative daily top-up limit                                           	| Prepaid                   	|
          | DAILY_TOTAL           	| Card contract        	| Daily all types of transactions                                         	| Any product               	|
          | MONTHLY_ATM           	| Card contract        	| Monthly ATM withdrawal transactions                                     	| Any product               	|
          | MONTHLY_CASH          	| Card contract        	| Monthly ATM withdrawal and Cash advance transactions                    	| Any product               	|
          | MONTHLY_ECOMM         	| Card contract        	| Monthly e-commerce transactions                                         	| Any product               	|
          | MONTHLY_MOTO          	| Card contract        	| Monthly MOTO transactions                                               	| Any product               	|
          | MONTHLY_RETAIL        	| Card contract        	| Monthly Retail  (POS, e-commerce, MOTO and other payments) transactions 	| Any product               	|
          | MONTHLY_TOP_UP        	| Account contract     	| Cumulative monthly top-up limit                                         	| Prepaid                   	|
          | MONTHLY_TOTAL         	| Card contract        	| Monthly all types of transactions                                       	| Any product               	|
          | PREPAID_BALANCE_LIMIT 	| Account contract     	| Prepaid Balance Limit                                                   	| Prepaid                   	|
          | YEARLY_TOP_UP         	| Account contract     	| Cumulative yearly top-up limit                                          	| Prepaid                   	|
      operationId: changeUsageLimitStatus
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/contractId'
        - $ref: '#/components/parameters/usageLimitCode'
      requestBody:
        $ref: '#/components/requestBodies/UsageLimitStatus'
      responses:
        '204':
          $ref: '#/components/responses/ContractUsageLimitStatusChanged'
        '400':
          $ref: '#/components/responses/BadRequestInvalidContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ContractNotFoundError'
  /contracts/{contract_id}/service-limit-tariffs:
    post:
      tags:
        - Tariff
      summary: Sets up an individual service limit tariff for the contract (account contract or card contract)
      description: |
        Operation name: `setServiceLimitTariff`

        Operation is used to redefine individual Service Limit Tariff for a specified contract (**account contract** or **card contract**).

        Service Tariff Role - is used to set up fee calculation rules in Services
        Service Limit Tariff Role - is used to set up Services for calculating the maximum and minimum transaction amount,
        or to specify account balance limitations, or to specify limitations related to Events that open or close when the value of a specific balance type changes.
      operationId: setServiceLimitTariff
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/contractId'
        - $ref: '#/components/parameters/idempotencyKey'
      requestBody:
        $ref: '#/components/requestBodies/ServiceLimitTariff'
      responses:
        '200':
          $ref: '#/components/responses/ServiceLimitTariffSetUp'
        '400':
          $ref: '#/components/responses/BadRequestInvalidContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ContractNotFoundError'
  /contracts/{contract_id}/tariff-data:
    get:
      tags:
        - Tariff
      summary: Retrieves information about tariff configuration for a contract (account contract or card contract)
      description: |
        Operation name: `getContractTariffData`

        Operation is used to retrieve information about tariff configuration for a given contract (**account contract** or **card contract**).
      operationId: getContractTariffData
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/contractId'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/personalisationType'
        - $ref: '#/components/parameters/tariffCode'
        - $ref: '#/components/parameters/tariffDomainCode'
        - $ref: '#/components/parameters/tariffRole'
        - $ref: '#/components/parameters/tariffTypeCode'
      responses:
        '200':
          $ref: '#/components/responses/ContractTariffs'
        '400':
          $ref: '#/components/responses/BadRequestInvalidContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ContractNotFoundError'
  /clients/searches:
    post:
      tags:
        - Search
      summary: Returns clientId assigned to a given client identifier.
      description: |
        Operation name: `getClientId`

        Operation is used to retrieve `clientId` of the client record identified by:
          * `clientNumber` assigned by the Issuer
          * `identificationDocumentNumber` assigned by the Issuer or
          * `socialNumber` assigned by the Issuer or
          * `taxpayerIdentifier` assigned by the Issuer
      operationId: getClientId
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/idempotencyKey'
      requestBody:
        $ref: '#/components/requestBodies/ClientIdentifierSearch'
      responses:
        '200':
          $ref: '#/components/responses/ClientIdentifier'
        '400':
          $ref: '#/components/responses/BadRequestNullClientIdentifierError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ClientNotFoundError'
  /accounts/searches:
    post:
      tags:
        - Search
      summary: Returns accountContractId assigned to a given account identifier.
      description: |
        Operation name: `getAccountContractId`

        Operation is used to retrieve `accountContractId` of the account contract record identified by:
          * `accountContractNumber` (account contract number assigned by the Issuer) or
          * `cbsNumber` (Core Banking System number assigned usually by the Issuer)

        An `accountContractId` is a unique, technical account contract identifier assigned by the MP's CMS system. The identifier is used in the MP API operations to identify particular account contract.
      operationId: getAccountContractId
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/idempotencyKey'
      requestBody:
        $ref: '#/components/requestBodies/AccountContractIdentifierSearch'
      responses:
        '200':
          $ref: '#/components/responses/AccountContractIdentifier'
        '400':
          $ref: '#/components/responses/BadRequestNullAccountContractIdentifierError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/AccountContractNotFoundError'
  /cards/searches:
    post:
      tags:
        - Search
      summary: Returns cardContractId assigned to a given card contract identifier.
      description: |
        Operation name: `getCardContractId`

        Operation is used to retrieve `cardContractId` of the card contract record identified by:
          * `cardContractNumber` (PAN of the card assigned by the Issuer or MP) or
          * `cbsNumber` (Core Banking System number assigned usually by the Issuer)

        A `cardContractId` is a unique, technical card contract identifier assigned by the MP's CMS system. The identifier is used in the MP API operations to identify particular card contract.
      operationId: getCardContractId
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/idempotencyKey'
      requestBody:
        $ref: '#/components/requestBodies/CardContractIdentifierSearch'
      responses:
        '200':
          $ref: '#/components/responses/CardContractIdentifier'
        '400':
          $ref: '#/components/responses/BadRequestNullCardContractIdentifierError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/CardContractNotFoundError'
  /public-keys:
    get:
      tags:
        - Security
      summary: Retrieves MP's public RSA key.
      description: |
        Operation name: `getPublicRsaKey`

        Operation is used to request a public RSA key information from the MP. In the response to the request, MP will return the MP's public RSA key and its index.

        Operation is used for PIN Block asymmetric encryption in `setPin` and `verifyPin` operations.
      operationId: getPublicRsaKey
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/dateTypeToSecure'
      responses:
        '200':
          $ref: '#/components/responses/PublicRsaKeyData'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '400':
          $ref: '#/components/responses/BadRequestMissingDataTypeToSecureError'
  /contracts/{contract_id}/authentication-method:
    put:
      tags:
        - Contract
      summary: Sets up a contract (account contract or card contract) authentication method.
      description: |
        Operation name: `setAuthenticationMethod`

        Operation is used to set up a contract (**account contract** or **card contract**) authentication method.
      operationId: setAuthenticationMethod
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/contractId'
      requestBody:
        $ref: '#/components/requestBodies/AuthenticationMethod'
      responses:
        '204':
          $ref: '#/components/responses/AuthenticationMethodSetUp'
        '400':
          $ref: '#/components/responses/BadRequestInvalidContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ContractNotFoundError'
  /contracts/{contract_id}/transactions/{transaction_id}/releasing-blocked-funds:
    put:
      tags:
        - Transaction
      summary: Releases funds of the pending transaction.
      description: |
        Operation name: `releaseBlockedFunds`

        Operation is used to release funds for the pending transaction before automatic cancelation occurs.
      operationId: releaseBlockedFunds
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/contractId'
        - $ref: '#/components/parameters/transactionId'
      requestBody:
        $ref: '#/components/requestBodies/BlockedFundsRelease'
      responses:
        '200':
          $ref: '#/components/responses/BlockedFundsReleaseResult'
        '400':
          $ref: '#/components/responses/BadRequestInvalidContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ContractNotFoundError'
  /transactions/{transaction_id}/reversal:
    post:
      tags:
        - Transaction
      summary: Reverses selected transaction made by the Issuer.
      description: |
        Operation name: `reverseTransaction`

        Operation is used to reverse selected transaction made by the Issuer. Transaction types that can be reversed must be preconfigured in the CMS during the onboarding process.

        The transaction which can be reversed must be in posting status `Posted`. After a successful transaction reversal, the proper balance will be changed.
      operationId: reverseTransaction
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/transactionId'
        - $ref: '#/components/parameters/idempotencyKey'
      requestBody:
        $ref: '#/components/requestBodies/ReverseTransactionReason'
      responses:
        '201':
          $ref: '#/components/responses/ReverseTransactionId'
        '400':
          $ref: '#/components/responses/BadRequestInvalidTransactionTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/TransactionNotFoundError'
  /contracts/{contract_id}/authentication-parameter-values:
    get:
      tags:
        - Contract
      summary: Retrieves the value of a given authentication parameter for a specified contract.
      description: |
        Operation name: `getAuthenticationParameterValue`

        Operation is used to retrieve the value of a given authentication parameter for a specified contract.
      operationId: getAuthenticationParameterValue
      x-mastercard-api-encrypted: true
      parameters:
        - $ref: '#/components/parameters/contractId'
        - $ref: '#/components/parameters/authenticationParameterName'
        - $ref: '#/components/parameters/authenticationTypeCode'
      responses:
        '200':
          $ref: '#/components/responses/AuthenticationParameterValue'
        '400':
          $ref: '#/components/responses/BadRequestInvalidContractTypeError'
        '403':
          $ref: '#/components/responses/OperationDeniedError'
        '404':
          $ref: '#/components/responses/ContractNotFoundError'
components:
  schemas:
    transactionTypeCode:
      type: string
      maxLength: 32
      minLength: 0
      description: |
        Transaction type code. The value which can be used for filtering of transactions provided on the input filter.

        Transactions originated from the Banknet
        | `transactionTypeCode` 	| `transactionType`                     	|
        |:---------------------:	|---------------------------------------	|
        | 0512                  	| Retail with CashBack                  	|
        | 0513 1                	| CH Debit                              	|
        | 0515                  	| Retail                                	|
        | 0518                  	| Unique                                	|
        | 0522                  	| CashBack 2Prs                         	|
        | 0523 1                	| CH Debit 2Prs                         	|
        | 0525                  	| Retail 2Prs                           	|
        | 0528                  	| Unique 2Prs                           	|
        | 0614 2                	| CH Payment                            	|
        | 0616                  	| Refund                                	|
        | 0624 2                	| CH Payment 2Prs                       	|
        | 0626                  	| Credit 2Prs                           	|
        | 0717                  	| Cash Advance                          	|
        | 0719                  	| ATM Cash Withdrawal                   	|
        | 0727                  	| Cash 2Prs                             	|
        | 0729                  	| ATM Cash withdrawal - 2nd presentment 	|

        Transactions originated from the Issuer in the standard product
        | `transactionTypeCode` 	| `transactionType`             	| **Product applicability** 	|
        |-----------------------	|-------------------------------	|---------------------------	|
        | APSF                  	| Paper statement fee           	| Credit                    	|
        | BT1                   	| Balance Transfer              	| Credit                    	|
        | FP                    	| Fee posting                   	| Credit                    	|
        | I_TPC                 	| PBB Transfer posting - credit 	| Credit, Prepaid           	|
        | I_TPD                 	| PBB Transfer posting - debit  	| Credit, Prepaid           	|
        | PT_1                  	| Payment To Client Contract    	| Credit                    	|
        | TP                    	| Prepaid Top-Up                	| Prepaid                   	|
        | TPC_1                 	| Transaction posting - credit  	| Credit, Prepaid           	|
        | TPD                   	| Transaction posting - debit   	| Credit                    	|

        Fees originated from the CMS in the standard product
        | `transactionTypeCode` 	| `transactionType`                     	| **Product applicability** 	|
        |-----------------------	|---------------------------------------	|---------------------------	|
        | A1F                   	| ATM Fee                               	| Prepaid                   	|
        | AFM_1                 	| BCC CA Annual Fee Main Card           	| Prepaid                   	|
        | AUCF                  	| Urgent card fee                       	| Credit, Prepaid           	|
        | C1F                   	| Cash Fee                              	| Prepaid                   	|
        | CF1                   	| Country Fee                           	| Prepaid                   	|
        | FXF                   	| Foreign exchange (FX) fee             	| Credit                    	|
        | INFC                  	| Insurance Fixed Card                  	| Credit                    	|
        | INFS                  	| Insurance Fixed Single                	| Credit, Prepaid           	|
        | INFSC                 	| Insurance Fixed Single Card           	| Credit                    	|
        | INP                   	| Insurance Percentage                  	| Credit                    	|
        | IPP                   	| BCC Insurance fee: Payment Protection 	| Credit, Prepaid           	|
        | JFA                   	| Joining fee                           	| Prepaid                   	|
        | LC                    	| New Lost Card for PIN Set             	| Prepaid                   	|
        | LPF                   	| BCC Late Payment Fee                  	| Credit                    	|
        | M;                    	| New Card for PIN Set                  	| Prepaid                   	|
        | M0                    	| Plastic Renew Expired                 	| Prepaid                   	|
        | M19                   	| Plastic Renew Misc (no Prod)          	| Credit                    	|
        | M8                    	| Plastic Renew Misc                    	| Prepaid                   	|
        | MA_1                  	| Balance Inquiry Fee                   	| Prepaid                   	|
        | MF_1                  	| BCC Card Fee Billing                  	| Prepaid                   	|
        | MFM                   	| Misc Fee Manual                       	| Prepaid                   	|
        | MR                    	| Replaced Card for PIN Set (no Prod)   	| Credit                    	|
        | OVLF                  	| OVL Fee                               	| Credit                    	|
        | PFMCC                 	| Retail Fee based on MC                	| Prepaid                   	|
        | PZ                    	| PIN Change Fee                        	| Prepaid                   	|
        | RWCBTF                	| Retail with CB Transaction Fee        	| Credit                    	|
        | TPF                   	| Top-up fee                            	| Prepaid                   	|
        | VCP                   	| New Card for PIN Set (no Prod)        	| Credit                    	|

        Interests originated from the CMS in the standard credit product
        | `transactionTypeCode` 	| `transactionType`                 	|
        |-----------------------	|-----------------------------------	|
        | ILBT3                 	| Overdue cash interest             	|
        | ILBT5                 	| Overdue balance transfer interest 	|
        | ILC3                  	| Balance transfer interest         	|
        | ILC5                  	| Overdue retail interest           	|
        | ILR3                  	| Retail interest                   	|
        | ILR5                  	| Cash interest                     	|
      example: '0719'
    transactionType:
      type: string
      maxLength: 255
      minLength: 0
      description: |
        Transaction type.
      example: 'ATM transactions'
    serviceClassCode:
      type: string
      maxLength: 1
      minLength: 1
      description: |
        Transaction type classifier code, determines the way documents or macrotransactions are processed.

        | **Possible values** 	|       **Description**      	|
        |:-------------------:	|:--------------------------:	|
        | T                   	|  Transaction               	|
        | M                   	|  Fee                       	|
        | I                   	|  Interests                 	|
        | U                   	|  Upper Normalization       	|
        | L                   	|  Lower Normalization       	|
        | D                   	|  Due Normalization         	|
        | A                   	|  Account Transfer          	|
        | C                   	|  Credit Limit              	|
        | R                   	|  Rev/Exp                   	|
        | B                   	|  Balance Inquiry           	|
        | S                   	|  Online Statement          	|
        | E                   	|  End Cycle                 	|
        | i                   	|  Interest Fee              	|
        | P                   	|  Online Payment            	|
        | p                   	|  External Payment          	|
        | d                   	|  Due Special               	|
        | u                   	|  Upper Limit Special       	|
        | r                   	|  Reserve for Bad Debts     	|
        | l                   	|  Lower Limit Special       	|
        | c                   	|  Additional Credit Limit   	|
        | X                   	|  Additional Online Service 	|
        | +                   	|  Top Up                   	|
        | V                   	|  Verification              	|
      example: 'M'
    targetContractNumber:
      type: string
      maxLength: 64
      minLength: 0
      description: |
        Contract number of the target side (target contract).

        * For account contract - value unmasked.
        * For card contract - value can be
          * unmasked - full PAN visible
          * masked - full PAN masked according to defined mask (mask pattern is agreed with Issuer and configured in the MP API)
      example: '161212______0128'
    sourceContractNumber:
      type: string
      maxLength: 64
      minLength: 0
      description: |
        Contract number of the source side (source contract).

        * For account contract - value unmasked.
        * For card contract - value can be
          * unmasked - full PAN visible
          * masked - full PAN masked according to defined mask (mask pattern is agreed with Issuer and configured in the MP API)

        In case of transaction done by card at POS field contains the terminal id.
      example: '871818______0074'
    authenticationParameterName:
      type: string
      maxLength: 32
      minLength: 1
      description: |
        Authentication parameter name.
      example: 'PHONE'
    authenticationParameterValue:
      type: string
      maxLength: 255
      minLength: 0
      description: |
        Authentication parameter value.
      example: '+48 123456789'
    authenticationTypeCode:
      type: string
      maxLength: 32
      minLength: 1
      description: |
        Contract authentication type code.
      example: '3DS_EXT_ENROLLMENT'
    BlockedFundsReleaseResult:
      properties:
        cancelHoldResult:
          type: string
          maxLength: 32
          minLength: 1
          description: |
            Release blocked funds result.

            | **Possible values**     	| **Description**                      	|
            |-------------------------	|--------------------------------------	|
            | RELEASE_FUNDS_PERFORMED 	| When blocked funds were released     	|
            | RELEASE_FUNDS_FAILURE   	| When blocked funds were not released 	|
          example: 'RELEASE_FUNDS_FAILURE'
    AuthenticationParameterValue:
      properties:
        authenticationParameterValue:
          $ref: '#/components/schemas/authenticationParameterValue'
    ReverseTransactionReason:
      type: object
      properties:
        reason:
          type: string
          maxLength: 255
          minLength: 0
          description: |
            The reason for reversing the transaction, if not filled by the Issuer, will be filled with the default value.
          example: 'Reversal'
    BlockedFundsRelease:
      type: object
      properties:
        reason:
          type: string
          maxLength: 255
          minLength: 0
          description: |
            Description of the reason which leads to the release of blocked funds.
          example: 'Transaction aborted'
    productionCode:
      type: string
      maxLength: 32
      minLength: 0
      description: |
        Production code specifies a code under which the new card contract will be created.

        There are 4 major card entities defined by the product type:
         * plastic - should a card plastic be generated (Yes/No)
         * PAN - should a new PAN be set (generated by the MP or passed in an API request by the Issuer) or should the existing one be used
         * PIN - should a new PIN be set (generated by the MP or set by the Issuer) or should the existing one be used
         * Expiry date - should a new expiry date be set (generated by the MP or passed in an API request by the Issuer)

        Possible values in the default configuration of the MP's CMS:
         * NWOPIN_NOPROD (new card)
            * physical card  - No
            * PAN - New
            * PIN - Not required
            * Expiry date - Set by the MP or the Issuer

         * NWOPIN (new card)
            * physical card - Yes
            * PAN - New
            * PIN - New
            * Expiry date - Set by the MP or the Issuer

          * RPLRE (duplicate card plastic)
            * physical card - Yes
            * PAN - Same
            * PIN - Same
            * Expiry date - Set by the MP or the Issuer

          * RALLRE (duplicate card plastic)
            * physical card - Yes
            * PAN - Same
            * PIN - New random PIN generated by the MP
            * Expiry date - Set by the MP or the Issuer

          * RPL (renew)
            * physical card - Yes
            * PAN - Same
            * PIN - Same
            * Expiry date - Set by the MP or the Issuer

          * RPLRE_NOPROD (renew)
            * physical card - No
            * PAN - Same
            * PIN - Not required
            * Expiry date - Set by the MP or the Issuer

          * NLOSTWOPIN (replacement)
            * physical card - Yes
            * PAN - New
            * PIN - New
            * Expiry date - Set by the MP or the Issuer

          * RWOPIN_NOPROD (replacement)
            * physical card  - No
            * PAN - New
            * PIN - Not required
            * Expiry date - Set by the MP or the Issuer

        Notes:
          * `productionCode` is configured in the MP's CMS and the Issuer is allowed to use only the value set by the MP (the Issuer cannot use their own value).
          * Passing `productionCode` field is optional. The MP's CMS allows to configure a default `productionCode` assigned to the `productCode`.
      example: 'NWOPIN_NOPROD'
    cardContractProductionCode:
      type: string
      maxLength: 32
      minLength: 0
      description: |
        A code under which a card contract has been created.

        Possible values in the default configuration of the MP's CMS:
          * NWOPIN_NOPROD (new card)
            * physical card - No
            * PAN - New
            * PIN - Not required
            * Expiry date - Set by the MP or the Issuer

          * NWOPIN (new card)
            * physical card - Yes
            * PAN - New
            * PIN - New
            * Expiry date - Set by the MP or the Issuer

          * RPLRE (duplicate card plastic)
            * physical card - Yes
            * PAN - Same
            * PIN - Same
            * Expiry date - Set by the MP or the Issuer

          * RALLRE (duplicate card plastic)
            * physical card - Yes
            * PAN - Same
            * PIN - New random PIN generated by the MP
            * Expiry date - Set by the MP or the Issuer

          * RPL (renew)
            * physical card - Yes
            * PAN - Same
            * PIN - Same
            * Expiry date - Set by the MP or the Issuer

          * RPLRE_NOPROD (renew)
            * physical card - No
            * PAN - Same
            * PIN - Not required
            * Expiry date - Set by the MP or the Issuer

          * NLOSTWOPIN (replacement)
            * physical card - Yes
            * PAN - New
            * PIN - New
            * Expiry date - Set by the MP or the Issuer

          * RWOPIN_NOPROD (replacement)
            * physical card - No
            * PAN - New
            * PIN - Not required
            * Expiry date - Set by the MP or the Issuer
      example: RALLRE
    clientId:
      type: integer
      format: int64
      maximum: 999999999999999999
      minimum: 1
      description: |
        A unique technical client identifier, generated by the MP's CMS database engine.
        The identifier is generated when client creation is completed successfully and is returned in a client creation response (`POST /clients`).
      example: 40000
    clientNumber:
      type: string
      maxLength: 32
      minLength: 1
      description: |
        Client's identifier generated by the Issuer's CBS system (Core Banking System). The identifier is stored in the MP's CMS so that - apart from the technical identifier `clientId` - the Issuer can distinguish between their customers.

        `clientNumber` should be prefixed with a unique Issuer designation, for example "ABC_", as it must be unique in the MP's CMS.

        Note: The Issuer designation "ABC_" is configured in the MP's CMS and the Issuer is allowed to use only the value agreed with the MP.
      example: 'ABC_5698521931'
    clientType:
      type: string
      maxLength: 5
      minLength: 1
      description: |
        Client type.

        | **Possible values** 	| **Description**       	|
        |---------------------	|-----------------------	|
        | PNR                 	| Private NonResident   	|
        | PR                  	| Private Resident      	|
        | CR                  	| Corporate Resident    	|
        | CNR                 	| Corporate NonResident 	|

        Notes:
          * The field cannot be freely used because the client type has an impact on many CMS internal procedures. The Issuer must always agree with the MP which value should be used (in most cases "PR" is the default value)
          * Please contact the MP representative should a value different than "PR" be needed, as using it requires configuration on the MP's side.
      example: 'PR'
    clientExpiryDate:
      type: string
      format: date
      description: |
        Date of client expiration (YYYY-MM-DD format). When the date is met in the MP's CMS, the Issuer will not be able to create new account contracts or new cards for the client.
      example: '2029-06-25'
    contractId:
      type: integer
      format: int64
      maximum: 999999999999999999
      minimum: 1
      description: |
        Contract record id from MP's CMS database.
      example: 70001
    contractName:
      type: string
      maxLength: 255
      minLength: 0
      description: |
        Contract name.
      example: 'Contract name'
    contractLevel:
      type: string
      maxLength: 255
      minLength: 0
      description: |
        Contract's level in contract hierarchy.
        This field informs about the contract level and about the sequence number of the contract in the level.

        For example, if there is one account contract with two card contracts system will assign:
          * . - for account contract
          * .1. - for 1st card contract
          * .2. - for 2nd card contract

        If there is one account contract with two subaccount contracts with card contracts created under subaccounts system will assign:
          * . - for top account contract
          * .1. - for 1st subaccount contract
          * .1.1. - for 1st card contract
          * .1.2. - for 2nd card contract
          * .2. - for 2nd subaccount contract
          * .2.1. - for 1st card contract
          * .2.2. - for 2nd card contract
          * .2.3. - for 3rd card contract
      example: '.'
    parentAccountContractId:
      type: integer
      format: int64
      maximum: 999999999999999999
      minimum: 1
      description: |
        Account's unique technical identifier from the MP's CMS database, which represents a parent account. The field is empty when an account is a top account. Non-empty value means the account has been created as a sub-account.
      example: 31412211
    accountContractId:
      type: integer
      format: int64
      maximum: 999999999999999999
      minimum: 1
      description: |
        Unique technical identifier for an account contract generated by the MP's CMS.
        The identifier is generated when the account contract creation finishes successfully and is returned in the account contract creation response (`POST /accounts`).
      example: 60001
    accountContractNumber:
      type: string
      maxLength: 32
      minLength: 1
      description: |
        Account contract identifier generated by the Issuer's CBS system (Core Banking System).
        The identifier is stored in the MP's CMS system so that the Issuer can distinguish between their accounts.

        `accountContractNumber` should be prefixed with a unique Issuer designation, for example "ABC_", as it must be unique in the MP's CMS.

        Note: The Issuer designation "ABC_" is configured in the MP's CMS and the Issuer is allowed to use only the value agreed with the MP.
      example: 'ABC_121235694296313'
    accountContractName:
      type: string
      maxLength: 255
      minLength: 0
      description: |
        Account contract name set by the Issuer.
      example: 'North Division Account'
    cardContractId:
      type: integer
      format: int64
      maximum: 999999999999999999
      minimum: 1
      description: |
        Unique technical card contract identifier generated by the MP's CMS.
        The identifier is generated when card contract creation finishes successfully and is returned in a card contract creation response (`POST /cards`).
      example: 70001
    cardContractNumberForReissue:
      type: string
      maxLength: 32
      minLength: 1
      description: |
        The card contract number represents the Primary Account Number (PAN). A PAN usually consists of 16 digits:
          * The first six digits are the Bank Identification Number (BIN): a unique number within the payment organization (Mastercard, VISA)
          * The following nine digits are the contract identification number, which can be generated randomly
          * The last digit is a Luhn check digit.

        The Issuer may enter a PAN number generated by themselves or leave the field empty: in such case, the MP's CMS will generate a PAN number on behalf of the Issuer.

        To generate a PAN, the MP's CMS must be configured with BIN ranges for a given card product.
      example: '535555______5312'
    cardContractNumberForCreation:
      type: string
      maxLength: 32
      minLength: 1
      description: |
        The card contract number represents the Primary Account Number (PAN). A PAN usually consists of 16 digits:
          * The first six digits are the Bank Identification Number (BIN): a unique number within the payment organization (Mastercard, VISA)
          * The following nine digits are the contract identification number, which can be generated randomly
          * The last digit is a Luhn check digit.

        The Issuer may enter a PAN number generated by themselves or leave the field empty: in such case, the MP's CMS will generate a PAN number on behalf of the Issuer.

        To generate a PAN, the MP's CMS must be configured with BIN ranges for a given card product.
      example: '1234567890123456'
    cardContractNumber:
      type: string
      maxLength: 32
      minLength: 1
      description: |
        The card contract number represents a Primary Account Number (PAN). A PAN usually consists of 16 digits:
          * The first six digits are the Bank Identification Number (BIN): a unique number within the payment organization (Mastercard, VISA)
          * The following nine digits are the contract identification number, which can be generated randomly
          * The last digit is a Luhn check digit.

        The card contract number can be returned:
          * unmasked - with a full PAN visible
          * masked - with a full PAN masked according to the defined mask (a mask pattern is agreed with the Issuer and configured in the MP API)
      example: '123456______3456'
    cardContractName:
      type: string
      maxLength: 255
      minLength: 1
      description: |
        Card contract name. Free text field.
      example: 'Card contract name'
    cardExpiryDate:
      type: string
      maxLength: 4
      minLength: 4
      description: |
        Card expiry date (YYMM format).
      example: '3004'
    newCardExpiryDate:
      type: string
      maxLength: 4
      minLength: 4
      description: |
        New card expiry date (YYMM format).
      example: '3004'
    cardExpiryDateForCreation:
      type: string
      maxLength: 4
      minLength: 4
      description: |
        Card expiry date (YYMM format).

        The Issuer may pass their own expiry date in a card creation request, in such case the MP will set the value passed in a card creation request on the first *card plastic* which will be created under newly created card contract.

        If the Issuer does not provide their own expiry date, the MP will generate an expiry date on behalf of the Issuer.
      example: '3004'
    plasticId:
      type: integer
      format: int64
      maximum: 999999999999999999
      minimum: 1
      description: |
        Technical identifier of a card plastic record in the MP's CMS.
      example: 2188792
    plasticSequenceNumber:
      type: string
      maxLength: 3
      minLength: 0
      description: |
        The sequence number of a `Plastic`, created under the given card contract.
        Every new `Plastic` created has the next number in a sequence following previous card plastics.
      example: '2'
    postingDate:
      type: string
      format: date
      description: |
        For authorization documents - authorization request processing date,
        for financial documents - macrotransaction processing date (YYYY-MM-DD format).
      example: '2031-06-25'
    responseCode:
      type: integer
      format: int64
      maximum: 999999999999999999
      minimum: 0
      description: |
        Response code, which, together with posting status field value, shows the transaction posting results.

         -------------------------------------------------------------
        | `responseCode`        | `responseCodeDescription`           |
        |-----------------------|-------------------------------------|
        | 0   | Successfully completed
        | 1   | Refer to card issuer
        | 2   | Refer to card issuer's special condition
        | 3   |  Invalid merchant / source
        | 4   |  PICK UP
        | 5   |  Do not Honour
        | 6   |  Error
        | 7   |  Pick-up card, special condition
        | 8   |  Honour with identification
        | 9   |  Request in progress
        | 10  |  Approved for partial amount
        | 11  |  Approved (VIP)12  Invalid transaction
        | 13  |  Invalid amount
        | 14  |  No such card
        | 15  |  No such issuer
        | 16  |  Approved, update track 3
        | 17  |  Customer cancellation
        | 18  |  Customer dispute
        | 19  |  Re-enter transaction
        | 20  |  Invalid response
        | 21  |  No action taken
        | 22  |  Suspected malfunction
        | 23  |  Unacceptable transaction fee
        | 24  |  File update not supported by receiver
        | 25  |  No such record
        | 26  |  Duplicate record update, old record replaced
        | 27  |  File update field edit error
        | 28  |  File locked out while update
        | 29  |  File update error, contact acquirer
        | 30  |  Format error
        | 31  |  Issuer signed-off
        | 32  |  Completed partially
        | 33  |  Pick-up, expired card
        | 34  |  Suspect Fraud
        | 35  |  Pick-up, card acceptor contact acquirer
        | 36  |  Pick up, card restricted
        | 37  |  Pick up, call acquirer security
        | 38  |  Pick up, Allowable PIN tries exceeded
        | 39  |  No credit account
        | 40  |  Requested function not supported
        | 41  |  Pick up, lost card
        | 42  |  No universal account
        | 43  |  Pick up, stolen card
        | 44  |  No investment account
        | 45  |  Reserved for ISO use
        | 46  |  Contract closed
        | 47  |  Reserved for ISO use
        | 48  |  Reserved for ISO use
        | 49  |  Reserved for ISO use
        | 50  |  Do not renew
        | 51  |  Not sufficient funds
        | 52  |  No cheque account
        | 53  |  No savings account54  Expired card / target
        | 55  |  Incorrect PIN
        | 56  |  No card record
        | 57  |  Transaction not permitted to cardholder
        | 58  |  Transaction not permitted to terminal
        | 59  |  Suspected fraud
        | 60  |  Card acceptor contact acquirer
        | 61  |  Exceeds withdrawal amount limit
        | 62  |  Restricted card
        | 63  |  Security violation
        | 64  |  Wrong original amount
        | 65  |  Exceeds withdrawal frequency limit
        | 66  |  Call acquirers security department
        | 67  |  Card to be picked up at ATM
        | 68  |  Response received too late
        | 69  |  Reserved
        | 70  |  Invalid transaction; contact card issuer
        | 71  |  Decline PIN not changed
        | 72  |  Reserved
        | 73  |  Reserved
        | 74  |  Reserved
        | 75  |  Allowable number of PIN tries exceeded
        | 76  |  Wrong PIN, number of PIN tries exceeded
        | 77  |  Wrong Reference No.
        | 78  |  Record Not Found
        | 79  |  Already reversed
        | 80  |  Network error
        | 81  |  Foreign network error / PIN cryptographic error
        | 82  |  Time-out at issuer system / Bad CVV (VISA)
        | 83  |  Transaction failed
        | 84  |  Pre-authorization timed out
        | 85  |  No reason to decline
        | 86  |  Unable to validate PIN
        | 87  |  Purchase Approval Only
        | 88  |  Cryptographic failure
        | 89  |  Authentication failure
        | 90  |  Cutoff is in progress
        | 91  |  Issuer or switch is inoperative
        | 92  |  Unable to route at acquirer module
        | 93  |  Cannot be completed, violation of law
        | 94  |  Duplicate Transmission
        | 95  |  Reconcile error / Auth Not found
        | 96  |  System Malfunction
        | 97  |  Reserved
        | 98  |  Reserved
        | 99  |  Reserved
        | 101  |  Chain not found
        | 102  |  Incorrect Chain
        | 103  |  Multiple Adjustment
        | 111  |  Card BIN not on file
        | 112  |  Card type not in service for this device
        | 113  |  Invalid operation for this card
        | 115  |  Requested function not supported
        | 117  |  Suspicious Transaction
        | 119  |  Card BIN not in service for this device
        | 120  |  Card not in service for this device
        | 121  |  Repeat
        | 122  |  Previous doc not found
        | 123  |  Invalid reversal amount
        | 124  |  Capture period expired
        | 125  |  Invalid capture amount
        | 126  |  Invalid PIN block format
        | 128  |  No communication keys available for use
        | 129  |  Operation key buffer error
        | 130  |  Invalid Terminal ID
        | 131  |  Wrong Transaction Attributes
        | 132  |  Unmatched Transaction Condition
        | 133  |  The transaction has already been reversed
        | 140  |  Field 39 in response is absent
        | 141  |  Unexpected Field 39 received
        | 142  |  Destination Channel has deceased
        | 143  |  Check request declined by Billing Channel
        | 144  |  Payment request declined by Billing Channel
        | 145  |  Credit authorization declined
        | 146  |  Card not In service for international transfers
        | 147  |  Transaction declined by Terminal
        | 148  |  Tokenization is unavailable for card
        | 149  |  Invalid Resolution Method ID
        | 160  |  Device Hardware/Software Error
        | 161  |  Wrong device status
        | 162  |  Unknown status message
        | 163  |  HSM Response error
        | 164  |  Command rejected by device
        | 165  |  Authorization System malfunction
        | 166  |  Command aborted
        | 167  |  ISO Log Insert Error
        | 168  |  Field Mapper internal Error
        | 169  |  Limit not setup
        | 170  |  Message Authentication Key not defined
        | 171  |  Message Authentication Field Missing
        | 172  |  MAC verification Error
        | 173  |  MAC Generation error
        | 174  |  Security Hardware/Software error
        | 175  |  Security Module Channel Timeout
        | 176  |  Link is inactive. Device is not connected
        | 177  |  Device is not in transaction
        | 178  |  Device is already in transaction
        | 179  |  Device response timed out
        | 180  |  Amount is too small. Dispense not possible
        | 181  |  Amount is too big. Dispense not possible
        | 182  |  Amount has cent's
        | 183  |  Dispense not possible
        | 185  |  Invalid authorization amount
        | 188  |  The Cardholder has not taken MONEY
        | 189  |  Non working time for this device
        | 190  |  Device not configured or not valid
        | 191  |  Device contract not valid
        | 192  |  Device not on file
        | 193  |  Requested operation not on file for this device
        | 194  |  Operation is disabled for this device
        | 195  |  Currency is not available for device
        | 196  |  Internal System Malfunction
        | 198  |  Track 2 Format Error
        | 199  |  PIN Block Conversion Error
        | 200  |  The Cardholder has not taken his Card
        | 201  |  Device is connected to another controller
        | 203  |  Source contract expired
        | 214  |  Merchant card is not on file
        | 240  |  Instalments not supported
        | 241  |  Over than maximum supported amount for instalments
        | 242  |  Less than minimum supported amount for instalments
        | 243  |  Over maximum supported instalments
        | 244  |  Below minimum supported instalments
        | 245  |  Over maximum gratuity months
        | 246  |  Below minimum gratuity months
        | 247  |  Recurring not available
        | 248  |  Invalid Recurring parameters
        | 249  |  Unsupported Recurring operation
        | 254  |  Merchant card expired
        | 257  |  Merchant card contract has not been approved
        | 258  |  Device contract is not on file
        | 261  |  Device amount limits exceeded
        | 262  |  Rejected Some Documents in this Batch
        | 263  |  Wrong Invoice Party
        | 265  |  Device frequency limits exceeded
        | 270  |  CAT transaction is not compatible with MCC 6011
        | 271  |  Transaction attributes for chip card are present but Service Code not belongs to Integrated Circuit Card
        | 361  |  Merchant card amount limits exceeded
        | 365  |  Merchant card frequency limits exceeded
        | 405  |  Strong Customer Authentication Required
        | 457  |  CashBack disabled
        | 461  |  Exceeds CashBack amount limit
        -------------------------------------------------------------------

      example: 0
    responseCodeDescription:
      type: string
      maxLength: 255
      minLength: 0
      description: |
        Description of the transaction response code.
      example: 'Successfully completed'
    sourceContractId:
      type: integer
      format: int64
      maximum: 999999999999999999
      minimum: 1
      description: |
        Source contract identifier. Contract record ID from MP's CMS database.
      example: 70001
    targetContractId:
      type: integer
      format: int64
      maximum: 999999999999999999
      minimum: 1
      description: |
        Target contract identifier. Contract record ID from MP's CMS database.
      example: 54023689
    transactionId:
      type: integer
      format: int64
      maximum: 999999999999999999
      minimum: 1
      description: |
        Unique identifier of the document record in the CMS database.
      example: 90001
    mcc:
      type: string
      maxLength: 4
      minLength: 0
      description: |
        Merchant category code according to Visa rules (Merchant Category Code, MCC) or Mastercard rules (Standard Industry Code, SIC).

        MCC consists of four digits and it's listed in ISO 18245 for retail financial services.
        Merchant Category Code (MCC) is used to classify merchants in types (i.e. one MCC is for hotels, one for automated fuel dispensers)
        or more specifically by merchant name (i.e. car rentals or airlines).
      example: '6011'
    mccDescription:
      type: string
      maxLength: 255
      minLength: 0
      description: |
        Merchant category description according to Visa rules (Merchant Category Code, MCC) or MasterCard rules (Standard Industry Code, SIC).
      example: '6011 ATM'
    merchantCountry:
      type: string
      maxLength: 3
      minLength: 3
      description: |
        Three-letter country code (format according to ISO-3166, alpha-3 specification).
      example: 'USA'
    merchantLocation:
      type: string
      maxLength: 32
      minLength: 0
      description: |
        Terminal city, in other case value is null.
      example: 'BERLIN'
    merchantName:
      type: string
      maxLength: 255
      minLength: 0
      description: |
        Name of the retail outlet where the transaction was performed.
      example: 'DESC'
    cardContractStatusCode:
      type: string
      maxLength: 5
      minLength: 0
      description: |
        Card contract status code. The codes are configured in the MP's CMS for each Issuer.

        Generic solution allows the following codes:
        | **Possible values** 	| **Description**                                                                  	|
        |---------------------	|----------------------------------------------------------------------------------	|
        | 00                  	| Card is active and ready for use                                                 	|
        | 04                  	| Used for cards blocked due to Issuer's reasons (permanent status)                	|
        | 05                  	| Card does not honour (temporary status)                                          	|
        | 14                  	| Final state of card's lifecycle (permanent status). Set automatically by the CMS 	|
        | 41                  	| Card was lost (permanent status)                                                 	|
        | 43                  	| Card was stolen (permanent status)                                               	|
        | 57                  	| Card was deactivated on Issuer's request (permanent status)                      	|
        | 59                  	| Suspected fraud (temporary status). Usually set on Issuer's request              	|

        *Disclaimer: please contact the MP representative should other codes be necessary.*
      example: '00'
    accountContractStatusCode:
      type: string
      maxLength: 5
      minLength: 0
      description: |
        Account contract status. The full list will be defined by the Issuer and MP during the onboarding process as they must be configured in the CMS.

        The generic solution allows the following account contract statuses:
        | **Possible values** 	| **Description**                                                                     	|
        |---------------------	|-------------------------------------------------------------------------------------	|
        | 00                  	| Account contract is active and ready for use                                        	|
        | 00c                 	| Account contract closure procedure was initiated and is ongoing (transition period) 	|
        | 14                  	| Final stats of account contract's lifecycle. Set automatically by the CMS           	|

        *Disclaimer: please contact the MP representative should other codes be necessary.*
      example: '00'
    cardContractStatusName:
      type: string
      maxLength: 255
      minLength: 0
      description: |
        Card contract status name. Name assigned in the CMS system to the `statusCode`.
      example: 'Card OK'
    accountContractStatusName:
      type: string
      maxLength: 255
      minLength: 0
      description: |
        Account contract status name. Name assigned in the CMS system to the `statusCode`.
      example: 'Account OK'
    externalStatusCode:
      type: string
      maxLength: 32
      minLength: 0
      description: |
        Contract status code agreed with the Issuer according to the external system requirements.
        The MP's CMS configuration allows many external status codes to be assigned to the same `statusCode`.
      example: '00'
    cardContractExternalStatusName:
      type: string
      maxLength: 32
      minLength: 0
      description: |
        External status name.
      example: 'Card OK'
    accountContractExternalStatusName:
      type: string
      maxLength: 32
      minLength: 0
      description: |
        External status name.
      example: 'Account OK'
    mainProductCode:
      type: string
      maxLength: 32
      minLength: 0
      description: |
        Main Product Code.
      example: 'ACCOUNT_EUR'
    parentProductCode:
      type: string
      maxLength: 32
      minLength: 0
      description: |
        Product code of the parent contract.
      example: 'ACC_EUR'
    blockedAmount:
      type: number
      maximum: 1E+28
      exclusiveMaximum: true
      minimum: -1E+28
      exclusiveMinimum: true
      description: |
        Contract's own blocked amount, which has not been unblocked yet - not including blocked amount on additional cards.

        The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
      example: 751.28
    creditLimit:
      type: number
      maximum: 1E+28
      exclusiveMaximum: true
      minimum: -1E+28
      exclusiveMinimum: true
      description: |
        Usually field presents the contract's credit limit available for a specific contract itself.

        Only in specific product configuration ('SeeMain' authorization scenario configured in the CMS), the field will show credit limit of the parent contract.

        The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
      example: 1231.78
    liabilityCategory:
      type: string
      maxLength: 1
      minLength: 0
      description: |
        Type of relation with an upper-level Liability contract (if any).

        | **Possible values** 	| **Description**    	|
        |---------------------	|--------------------	|
        | A                   	| Only Check Balance 	|
        | N                   	| Affiliated         	|
        | R                   	| Reporting          	|
        | Y                   	| Full Liability     	|
      example: 'Y'
    pinAttemptsCounter:
      type: integer
      format: int64
      maximum: 999
      minimum: 0
      description: |
        PIN attempts counter.
      example: 55
    maxPinAttempts:
      type: integer
      format: int64
      maximum: 999
      minimum: 1
      description: |
        Maximum number of PIN attempts.
      example: 55
    branchCode:
      type: string
      maxLength: 32
      minLength: 1
      description: |
        Branch code under which a contract (an account contract or a card contract) has been created on the Issuer's side and which has been passed in a contract creation request. (`POST /accounts` or `POST /cards`). The value can be later used by the Issuer for reporting purposes.
      example: 'BRANCH_A'
    branchName:
      type: string
      maxLength: 255
      minLength: 0
      description: |
        Branch name (assigned to the branch code).
      example: 'Branch A'
    cbsNumber:
      type: string
      maxLength: 64
      minLength: 1
      description: |
        Contract identifier (for an account contract or a card contract) generated on the Issuer's side and passed to the MP's CMS in the contract creation request. (`POST /accounts` or `POST /cards`).
      example: 'CBS83863371812033'
    subtypeCode:
      type: string
      maxLength: 32
      minLength: 1
      description: |
        The field defines the subtype code of a contract. The value should be set only for products (an account contract or a card contract) for which a subtype definition is allowed.

        *Disclaimer: `subtypeCode` is configured in the MP's CMS and the Issuer is allowed to use only the value configured by the MP (the Issuer cannot use their own values).*
      example: 'CA-p'
    accountProductCode:
      type: string
      maxLength: 32
      minLength: 1
      description: |
        Product code defines the configuration used for the contract creation (account or card). Product code is linked in the MP's CMS to certain parameters which define how a contract will be used (for example if it is a card contract or an account contract, a debit or a credit contract, etc.).

        *Disclaimer: `productCode` is configured in the MP's CMS and the Issuer is allowed to use only the value configured by the MP (the Issuer cannot use their own value).*

        In the standard product account `productCode` can be found in the Parametrization Workbook (PPW) in the *CD.1.3.003* and *CD.1.3.004* (in case of pre-embossed issuing mode).
      example: 'STD-DEBCH-EUR'
    cardProductCode:
      type: string
      maxLength: 32
      minLength: 1
      description: |
        Product code defines the configuration used for the contract creation (account or card). Product code is linked in the MP's CMS to certain parameters which define how a contract will be used (for example if it is a card contract or an account contract, a debit or a credit contract, etc.).

        *Disclaimer: `productCode` is configured in the MP's CMS and the Issuer is allowed to use only the value configured by the MP (the Issuer cannot use their own value).*

        In the standard product card `productCode` can be found in the Parametrization Workbook (PPW) in the *CD.1.4.005*.
      example: 'STD-MCDEBVF-EUR'
    tagContainer:
      type: string
      maxLength: 11
      minLength: 1
      description: |
        Tag container name indicates where the custom tag will be stored. The values to choose from are fixed.

        | **Possible values** 	|
        |---------------------	|
        | ADD_INFO_01         	|
        | ADD_INFO_02         	|
        | ADD_INFO_03         	|
        | ADD_INFO_04         	|
      enum:
        - ADD_INFO_01
        - ADD_INFO_02
        - ADD_INFO_03
        - ADD_INFO_04
      example: 'ADD_INFO_01'
    tagName:
      type: string
      pattern: '^[^=; ]+$'
      maxLength: 32
      minLength: 1
      description: |
        Tag name. The Issuer can specify any name representing some meaning to the client/contract object.

        The tag name can be set by the Issuer, prior configuration of its name in the MP's CMS is not necessary.

        The tag name should not contain characters ['=', ';', ' '].
      example: 'TAG_01'
    tagValue:
      type: string
      maxLength: 100
      minLength: 0
      description: |
        Tag value. To clear a tag value, an empty value must be sent ('').

        The tag value should not contain characters ['=', ';']
      example: 'TAG_01_VALUE'
    removeTag:
      type: boolean
      description: |
        Flag informing if the tag should be removed from its container field.
      example: false
    amendmentDate:
      type: string
      format: date-time
      description: |
        Date and time of the most recent change to the object (YYYY-MM-DDThh:mm:ssZ format).
      example: '2019-06-25T12:51:30Z'
    amendmentOfficerId:
      type: integer
      format: int64
      maximum: 999999999999999999
      minimum: 1
      description: |
        Officer ID of the MP's CMS user who made the last change to the object.
      example: 14300
    amendmentOfficerName:
      type: string
      maxLength: 255
      minLength: 0
      description: |
        Officer name of the MP's CMS user who made the last change to the object.
      example: 'John Smith'
    dateOpen:
      type: string
      format: date
      description: |
        Date of the contract record creation in the MP's CMS (YYYY-MM-DD format).
      example: '2019-06-25'
    accountProductName:
      type: string
      maxLength: 255
      minLength: 1
      description: |
        Name of the product code used to create contract.
      example: 'Standard Debit Account'
    cardProductName:
      type: string
      maxLength: 255
      minLength: 1
      description: |
        Name of the product code used to create contract.
      example: 'Standard Mastercard Individual Debit Card'
    cardholderId:
      type: integer
      format: int64
      maximum: 999999999999999999
      minimum: 1
      description: |
        Unique technical client identifier, generated by the MP's CMS database engine.
        The identifier is generated when client creation finishes successfully and is returned in a client creation response (`POST /clients`).
        When a client is assigned to a card contract in the card contract creation request, they become a cardholder and are authorized to perform transactions using the card.
      example: 41537005
    cardholderShortName:
      type: string
      maxLength: 255
      minLength: 0
      description: |
        Client (cardholder) short name.
      example: 'Madley'
    statusChangeReason:
      type: string
      maxLength: 128
      minLength: 0
      description: |
        Free text describing the reason for status change.
      example: 'COMMENT'
    orderDepartment:
      type: string
      maxLength: 32
      minLength: 0
      description: |
        Department accepting the creation request on the Issuer's side. The value can be later used by the Issuer for reporting purposes.

        *Disclaimer: Please contact MP's representative should new values be required.*
        Available values will need to be agreed upon by the MP and the Issuer prior to the onboarding process as they need to be configured on the MP's side.
      example: 'Department'
    serviceGroupCode:
      type: string
      maxLength: 32
      minLength: 0
      description: |
        Service groups are an additional client and contract classifier.
        For example, according to additional classification, VIP clients can be distinguished as a separate group.
        Service groups can be used to configure various filters for viewing data or generating reports.

        *Disclaimer: Please contact the MP representative should new values be required. Available values will need to be agreed upon by the MP and the Issuer prior to the onboarding process as they need to be configured on the MP's side.*
      example: '021'
    addressType:
      type: string
      maxLength: 32
      minLength: 1
      description: |
        Address type. Additional addresses allow to store any address related to the client or the contract (account contract or card contract).

        | **Default possible values** 	| **Description**             	|
        |-----------------------------	|-----------------------------	|
        | PIN                         	| PIN mailer delivery address 	|
        | STMT                        	| Statement delivery address  	|
        *Disclaimer: Possible values which can be sent must be defined by MP and Issuer during the onboarding process as they are configured in the CMS system.*
      example: 'PIN'
    addressLine1:
      type: string
      maxLength: 255
      minLength: 0
      description: |
        First address line.
      example: 'Mrs. Alice Smith Apartment'
    addressLine2:
      type: string
      maxLength: 255
      minLength: 0
      description: |
        Second address line.
      example: '1c 213'
    addressLine3:
      type: string
      maxLength: 255
      minLength: 0
      description: |
        Third address line.
      example: 'Derrick Street'
    addressLine4:
      type: string
      maxLength: 255
      minLength: 0
      description: |
        Fourth address line.
      example: '2nd floor'
    city:
      type: string
      maxLength: 255
      minLength: 0
      description: |
        City.
      example: 'Boston'
    postalCode:
      type: string
      maxLength: 32
      minLength: 0
      description: |
        Postal code. The MP's CMS will not validate the correctness of the postal code.
      example: '02130'
    state:
      type: string
      maxLength: 32
      minLength: 0
      description: |
        State. The MP's CMS will not validate the correctness of the state name.
      example: 'MA'
    country:
      type: string
      maxLength: 3
      minLength: 3
      description: |
        Three-letter country code (format according to ISO-3166, alpha-3 specification).
      example: 'USA'
    email:
      type: string
      maxLength: 255
      minLength: 0
      description: |
        Client's email address. The MP's CMS will verify if the value contains the "@" character and will return an error if it does not.
        Requests without the "@" character in the `email` field will be rejected.
      example: 'johndoe@example.com'
    firstName:
      type: string
      maxLength: 255
      minLength: 0
      description: |
        First name.
      example: 'John'
    lastName:
      type: string
      maxLength: 255
      minLength: 0
      description: |
        Last name.
      example: 'Doe'
    customerPublicRsaKey:
      type: string
      maxLength: 4096
      minLength: 1
      description: |
        Public RSA key generated by a Customer (the Issuer). ASCII/UTF-8 string of characters 0-9,A-F (ASN.1 DER Public hex unpacked to string) or PEM concatenated Base64 without BEGIN and END lines.

        The MP will use this key to additionally encrypt sensitive data sent by the MP to the Issuer in responses of the MP's API operations.
      example: '30820122300D06092A864886F70D01010105000382010F003082010A0282010100C98A4398C273D64ABDE2F654FE5C4B0423A789ACAD9F0FE6AB00A75ACF1C974FA35F7DF89560A950F5DC4F5915C6615DA1055BD28C7C32E99191C8CDB67AB7C410DAC0B37CB545D9D2A07677A4DE4BE51529343300AE5B2790067EA885AE485A3A40E6F9C62311109562766634D7F816F9F4A4ACF9791ED281A0FF550D10C8A213F52D9DAB3E5472A3BEFFC5B8E5528BE5B9C853DF5EE95C891CD956E80737CDAC5E48B756524F2EB15AA6DCFD966FD39C58BCA9D1BE37D97EA19FC33483AE9DDE0536D61CBA12C6D1F757110A3531A9543812482CDC200F93EEDA2AC4D492B76560EB7094F90CE8A273D3623A8389FBF5F8F1B17990F1B9EB876C17C3CC2EC50203010001'
    installmentChainId:
      type: integer
      format: int64
      maximum: 999999999999999999
      minimum: 1
      description: |
        Installment chain identifier.
      example: 261983
    installmentPlanStatus:
      type: string
      maxLength: 50
      minLength: 0
      description: |
        Status of installment plan.

        | **Possible values**  	|
        |----------------------	|
        | Waiting              	|
        | Inactive             	|
        | Preview              	|
        | Preview Closed       	|
        | Open                 	|
        | Partially Paid       	|
        | Overdue              	|
        | Paid                 	|
        | Closed               	|
        | Written Off          	|
        | Revised              	|
        | Waived               	|
        | Not Ready            	|
        | Moved                	|
        | Rejected             	|
        | Simulated            	|
        | External             	|
        | Corrected            	|
        | Outstanding          	|
        | Complete Outstanding 	|
      example: 'Inactive'
    billingCycleNumber:
      type: integer
      format: int64
      maximum: 99999
      minimum: 0
      description: |
        Number of billing cycle. Starting from 0. Increased by 1 for every new billing cycle.
      example: 1
    classifierCode:
      type: string
      maxLength: 32
      minLength: 1
      description: |
        Classifier code.

        *Disclaimer: Classifiers are preconfigured in the MP's CMS system. A list of possible classifier codes will be defined during the onboarding process as they are a part of product configuration in the MP's CMS.*
      example: 'TEST_CLASSIFIER_01'
    classifierValue:
      type: string
      maxLength: 32
      minLength: 1
      description: |
        Classifier value.

        *Disclaimer: Classifiers are preconfigured in the MP's CMS system. A list of possible classifier values will be defined during the onboarding process as they are a part of product configuration in the MP's CMS.*
      example: 'VALUE_1A'
    parameterCode:
      type: string
      maxLength: 32
      minLength: 1
      description: |
        Parameter code.

        *Disclaimer: Parameters are preconfigured in the MP's CMS system. A list of possible parameter codes will be defined during the onboarding process as they are a part of product configuration in the MP's CMS.*
      example: 'TEST_PARAMETER_01'
    parameterValue:
      type: string
      maxLength: 32
      minLength: 1
      description: |
        Parameter value.

        *Disclaimer: Parameters are preconfigured in the MP's CMS system. A list of possible parameter values will be defined during the onboarding process as they are a part of product configuration in the MP's CMS.*
      example: '45'
    leaf:
      type: string
      maxLength: 1
      minLength: 1
      description: |
        The technical attribute used in the Workbench (CMS GUI) screens.

        | **Possible values** 	|
        |---------------------	|
        | N                   	|
        | Y                   	|
      example: 'N'
    contractBalanceCode:
      type: string
      maxLength: 32
      minLength: 1
      description: |
        The code of the balance type.

        *Disclaimer: Balance type codes are configured in the MP's CMS.*
      example: 'AVAILABLE'
    billingStartBalance:
      type: number
      maximum: 1E+15
      exclusiveMaximum: true
      minimum: -1E+15
      exclusiveMinimum: true
      description: |
        Account balance at the beginning of the billing cycle.

        The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
      example: 0
    keyIndex:
      type: string
      maxLength: 16
      minLength: 1
      description: |
        Index of a public RSA key used for initiateDigitizationData encryption. A value is received from the MP in the response of `GET /public-keys` (API operation: `getPublicRsaKey`).
      example: A1564386531162
    ifMatch:
      type: string
      maxLength: 64
      minLength: 1
      description: |
        Used to ensure idempotency for the PATCH methods.
        This header should be populated with an `ETag` received in the response header from the GET call of the same resource being updated.
        See [RFC7232](https://datatracker.ietf.org/doc/html/rfc7232) for more details.
      example: '"7fedf39c3c2952a62821de4b480d1d6f"'
    authorizationCode:
      type: string
      maxLength: 32
      minLength: 0
      description: |
        Authorization code.
      example: '179651'
    rrn:
      type: string
      maxLength: 12
      minLength: 1
      description: |
        12-digit Retrieval Reference Number.
      example: '212357021766'
    srn:
      type: string
      maxLength: 32
      minLength: 1
      description: |
        Source Registration Number.
      example: '122357012766'
    paginationCount:
      type: integer
      format: int32
      maximum: 100
      minimum: 0
      description: |
        The number of items that are in this offset batch.
      example: 1
    paginationLimit:
      type: integer
      format: int32
      maximum: 100
      minimum: 1
      description: |
        The number of items the list has been limited to.
      example: 1
    paginationOffset:
      type: integer
      format: int64
      maximum: 9223372036854775807
      minimum: 0
      description: |
        The number of items the start of the list has been offset from.
      example: 0
    paginationTotal:
      type: integer
      format: int64
      maximum: 9223372036854775807
      minimum: 0
      description: |
        The total number of items that are in the entire collection.
      example: 15
    date:
      type: string
      format: date
      example: '2021-06-25'
    usageLimitCode:
      type: string
      maxLength: 32
      minLength: 1
      description: |
        The code of usage limit configured in the MP's CMS. Usage limit code defines the type of usage limit.
      example: 'DAILY_TOTAL'
    CardContractCreation:
      required:
        - accountContractId
        - cardContract
      type: object
      properties:
        accountContractId:
          $ref: '#/components/schemas/accountContractId'
        clientId:
          $ref: '#/components/schemas/clientId'
        cardContract:
          $ref: '#/components/schemas/CardContractData'
        cardContractCustomData:
          type: array
          description: |
            Contract custom data allow the Issuer to pass specific contract tags during the creation request.
            The tags may represent Issuer-specific field names and values, not available as separate, dedicated fields.
            The Issuer can specify a tag name and its value.

            Custom data tags are stored in fixed containers (four containers are available) in a TAG=VALUE; format
            (for example: CATEGORY=A;GROUP=G1;).

            Each container has a length of 255 characters.
          items:
            $ref: '#/components/schemas/CustomDataTag'
    CardContractData:
      required:
        - productCode
      type: object
      description: Card basic information.
      properties:
        branchCode:
          $ref: '#/components/schemas/branchCode'
        cardContractNumber:
          $ref: '#/components/schemas/cardContractNumberForCreation'
        cardContractName:
          $ref: '#/components/schemas/cardContractName'
        cardSubtypeCode:
          $ref: '#/components/schemas/subtypeCode'
        cbsNumber:
          $ref: '#/components/schemas/cbsNumber'
        currency:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Contract currency (format according to ISO 4217, alphanumeric code).
            Must be set for a product which references several account schemes in different currencies, otherwise, it will be ignored.
          example: 'EUR'
        embossedData:
          $ref: '#/components/schemas/EmbossedData'
        cardExpiryDate:
          $ref: '#/components/schemas/cardExpiryDateForCreation'
        productCode:
          $ref: '#/components/schemas/cardProductCode'
        productionCode:
          $ref: '#/components/schemas/productionCode'
    CardContractIdentifier:
      type: object
      properties:
        cardContractId:
          $ref: '#/components/schemas/cardContractId'
    EmbossedData:
      type: object
      description: |
        Data embossing is used by the Issuer to specify what text shall be embossed on the physical card. Data embossing in the MP's CMS can be specified at the **client level** and at the **card contract level**. Once a card contract is created, the MP's CMS executes the card personalization process which produces data required for physical card production. The following rules apply:
          * If both places (client's embossed data and card's embossed data) are filled, then the personalization process takes the values from the card contract.
          * If the client's embossed data are not filled and a card contract creation request is being processed without data embossing passed, then the MP's CMS will not allow to create a card contract – a creation request will be rejected with proper information.
          * The MP's CMS creates two printed lines based on four embossing fields:
            * 1st printed line: `title` + space + `firstName` + space + `lastName`,
            * 2nd printed line: `companyName`
          * The `lastName` field must always be filled for card production. In the special case when a client wishes to store only the company name, it must be placed in the `lastName` field instead of the `companyName` field.
          * The MP's CMS validates the length of printed lines and allows only a limited number of characters:
            * 1st printed line:

                Length for the `title`, `firstName` and `lastName` combined is set by default to 26 (the system also counts the spaces between the fields, so for example `firstName`=’Adam’, `lastName`=’Smith’ will have a total length of 10, not 9).
            * 2nd printed line:

                The length for the `companyName` field is set by default to 26.

          * The MP's CMS allows to pass in data embossing only a limited set of characters (by default, only capital letters are allowed), as they have to be printed on the physical card using a standard font (default values are already configured). The MP's CMS validates the characters sent by the Issuer against the permitted ones. In case a passed character is not permitted, proper information will be returned and the request will be rejected.

          *Disclaimer: Please contact the MP representative should other embossed characters be required. The available set of characters will need to be agreed by the MP and the Issuer prior to the onboarding process as it needs to be configured on the MP's side.*
      properties:
        companyName:
          type: string
          maxLength: 32
          minLength: 0
          description: |
            Company name to be embossed.
          example: 'COMPANY'
        firstName:
          type: string
          maxLength: 32
          minLength: 0
          description: |
            First name to be embossed.
          example: 'JOHN'
        lastName:
          type: string
          maxLength: 32
          minLength: 1
          description: |
            Last name to be embossed.
          example: 'DOE'
        title:
          type: string
          maxLength: 32
          minLength: 0
          description: |
            Client's title to be embossed.

            | **Possible values (default)** 	|
            |-------------------------------	|
            | MR                            	|
            | MRS                           	|
            | MISS                          	|

            *Disclaimer: Please contact the MP representative should other values be required. Available values will need to be agreed by the MP and the Issuer prior to the onboarding process as they need to be configured on the MP's side.*
          example: 'MR'
    CustomDataTags:
      type: array
      nullable: false
      items:
        $ref: '#/components/schemas/CustomDataTag'
      minItems: 1
    CustomDataTag:
      required:
        - tagContainer
        - tagName
      type: object
      properties:
        removeTag:
          $ref: '#/components/schemas/removeTag'
        tagContainer:
          $ref: '#/components/schemas/tagContainer'
        tagName:
          $ref: '#/components/schemas/tagName'
        tagValue:
          $ref: '#/components/schemas/tagValue'
    TransactionCustomData:
      required:
        - tagName
        - tagValue
      properties:
        tagName:
          type: string
          maxLength: 32
          minLength: 1
          description: |
            Tag name. Tag name should not contain characters ['=', ';', ' ']
          example: 'TAG_NAME_1'
        tagValue:
          type: string
          maxLength: 32
          minLength: 1
          description: |
            Tag value. Tag value should not contain characters ['=', ';']
          example: 'TAG_VALUE_A'
    CustomDataTagValue:
      required:
        - tagName
        - tagContainer
      properties:
        tagContainer:
          $ref: '#/components/schemas/tagContainer'
        tagName:
          $ref: '#/components/schemas/tagName'
        tagValue:
          $ref: '#/components/schemas/tagValue'
    ErrorWrapper:
      description: A top level object of errors.
      type: object
      required:
        - Errors
      properties:
        Errors:
          $ref: '#/components/schemas/Errors'
    Errors:
      description: An object that contains a list of errors.
      type: object
      required:
        - Error
      properties:
        Error:
          $ref: '#/components/schemas/ErrorList'
    ErrorList:
      description: A list of errors.
      type: array
      minItems: 1
      items:
        $ref: '#/components/schemas/Error'
    Error:
      description: A single error.
      type: object
      properties:
        Source:
          type: string
          maxLength: 200
          minLength: 0
          description: The application/component that generated this error.
          example: MASTERCARD PROCESSING
        ReasonCode:
          type: string
          maxLength: 200
          minLength: 0
          description: |
            Reason code is a unique constant identifying the error case encountered during the request processing.
          example: OPERATION_DENIED
        Description:
          type: string
          maxLength: 10000
          minLength: 0
          description: |
            User-friendly short description of the reasonCode.
          example: 'Operation <operationId> is disabled in your API configuration.'
        Details:
          type: string
          maxLength: 10000
          minLength: 0
          description: |
            Optional detailed description provides information about the data received and calculated during the request processing, to help the user with diagnosing errors.
          example: 'You must have permission to use this operation.'
        Recoverable:
          type: boolean
          description: |
            Recoverable flag indicates whether this error will always be returned for this request or if retrying could change the outcome.
          example: false
    CardContractModification:
      type: object
      properties:
        cbsNumber:
          $ref: '#/components/schemas/cbsNumber'
        cardContractName:
          $ref: '#/components/schemas/cardContractName'
        embossedData:
          $ref: '#/components/schemas/EmbossedData'
        cardContractCustomData:
          type: array
          description: |
            Contract custom data allow the Issuer to pass specific contract tags during the creation request.
            The tags may represent Issuer-specific field names and values, not available as separate, dedicated fields.
            The Issuer can specify a tag name and its value.

            Custom data tags are stored in fixed containers (four containers are available) in a TAG=VALUE; format (for example CATEGORY=A;GROUP=G1;).

            Each container has a length of 255 characters.
          items:
            $ref: '#/components/schemas/CustomDataTag'
    AccountContractCardContracts:
      required:
        - accountContractCardContracts
        - total
        - limit
        - offset
        - count
      type: object
      properties:
        count:
          $ref: '#/components/schemas/paginationCount'
        limit:
          $ref: '#/components/schemas/paginationLimit'
        offset:
          $ref: '#/components/schemas/paginationOffset'
        total:
          $ref: '#/components/schemas/paginationTotal'
        accountContractCardContracts:
          type: array
          description: |
            List of `CardContractSummary`.
          items:
            $ref: '#/components/schemas/CardContractSummary'
    CardContractSummary:
      required:
        - accountContractId
        - cardContractNumber
        - cardContractId
        - cardholderId
      type: object
      properties:
        accountContractId:
          $ref: '#/components/schemas/accountContractId'
        accountContractNumber:
          $ref: '#/components/schemas/accountContractNumber'
        baseCardContractStatusData:
          $ref: '#/components/schemas/BaseCardContractStatusData'
        blockedAmount:
          $ref: '#/components/schemas/blockedAmount'
        cardContractId:
          $ref: '#/components/schemas/cardContractId'
        cardContractName:
          $ref: '#/components/schemas/cardContractName'
        cardContractNumber:
          $ref: '#/components/schemas/cardContractNumber'
        cardholderId:
          $ref: '#/components/schemas/cardholderId'
        cardholderShortName:
          $ref: '#/components/schemas/cardholderShortName'
        cbsNumber:
          $ref: '#/components/schemas/cbsNumber'
        creditLimit:
          $ref: '#/components/schemas/creditLimit'
        currency:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Card contract currency (format according to ISO 4217, alphanumeric code).
          example: 'EUR'
        currencyNumericCode:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Card contract currency (format according to ISO 4217, numeric code).
          example: '978'
        dateOpen:
          $ref: '#/components/schemas/dateOpen'
        liabilityCategory:
          $ref: '#/components/schemas/liabilityCategory'
        mainProductCode:
          $ref: '#/components/schemas/mainProductCode'
        parentProductCode:
          $ref: '#/components/schemas/parentProductCode'
        productCode:
          $ref: '#/components/schemas/cardProductCode'
        productName:
          $ref: '#/components/schemas/cardProductName'
    CardContractWithEncryptedCardContractNumber:
      allOf:
        - $ref: '#/components/schemas/CardContract'
        - type: object
          properties:
            encryptedCardContractNumber:
              type: string
              maxLength: 2048
              minLength: 1
              description: Unmasked card contract number (PAN) encrypted with the `Customer-Public-Rsa-Key`.  Field is returned if `Customer-Public-Rsa-Key` header is not empty.
              example: '6742858EA388164FC1C687916E9D4A8F091BA7267A57B6B2DA5B4330126EFE71F9D01A85F536994DD01DEB57AF7BBEE6A45DB5608BC68AF055D78C0DFFBAAD27C743DA8D057B9A4DA685913074E902DD2584ABEA4058BF18BFD35EA493D0A40F96D9AC914FE43180DCCCEE11387FA0C1DB2D0C12E9D41796495A946EEE13A728470C1013DD4FB147841FC0D8622400F983E3AB78F0FA2EDF890A4AF99178A296A8B0E4C31BDB73929D445FE56AEFC16B6D30DA0A01ADB34768C66EE567026259B8745B7DEC9B0AF4C4EBB744EE5CCBA0D277461AA1DFE6557ABAA2C2DD67B1A02DF712C3B24B1745717B526FE753A7AEABE10088A1FAD9B7D946E41766F1F769'
    CardContract:
      required:
        - accountContractId
        - cardContractNumber
        - cardContractId
        - cardholderId
      type: object
      properties:
        accountContractId:
          $ref: '#/components/schemas/accountContractId'
        accountContractNumber:
          $ref: '#/components/schemas/accountContractNumber'
        amendmentDate:
          $ref: '#/components/schemas/amendmentDate'
        amendmentOfficerId:
          $ref: '#/components/schemas/amendmentOfficerId'
        amendmentOfficerName:
          $ref: '#/components/schemas/amendmentOfficerName'
        availableBalance:
          type: number
          maximum: 1000000000000000000
          exclusiveMaximum: true
          minimum: -1000000000000000000
          exclusiveMinimum: true
          description: |
            Available card balance.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 1401.21
        blockedAmount:
          $ref: '#/components/schemas/blockedAmount'
        branchCode:
          $ref: '#/components/schemas/branchCode'
        branchName:
          $ref: '#/components/schemas/branchName'
        cardExpiryDate:
          $ref: '#/components/schemas/cardExpiryDate'
        cardContractId:
          $ref: '#/components/schemas/cardContractId'
        cardContractName:
          $ref: '#/components/schemas/cardContractName'
        cardContractNumber:
          $ref: '#/components/schemas/cardContractNumber'
        cardContractStatusData:
          $ref: '#/components/schemas/CardContractStatusData'
        cardholderId:
          $ref: '#/components/schemas/cardholderId'
        cardholderShortName:
          $ref: '#/components/schemas/cardholderShortName'
        cbsNumber:
          $ref: '#/components/schemas/cbsNumber'
        creditLimit:
          $ref: '#/components/schemas/creditLimit'
        currency:
          type: string
          maxLength: 3
          minLength: 0
          description: |
            Card contract currency (format according to ISO 4217, alphanumeric code).
          example: 'EUR'
        currencyNumericCode:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Card contract currency (format according to ISO 4217, numeric code).
          example: '978'
        dateOpen:
          $ref: '#/components/schemas/dateOpen'
        embossedData:
          $ref: '#/components/schemas/EmbossedData'
        liabilityCategory:
          $ref: '#/components/schemas/liabilityCategory'
        maxPinAttempts:
          $ref: '#/components/schemas/maxPinAttempts'
        parentProductCode:
          $ref: '#/components/schemas/parentProductCode'
        pinAttemptsCounter:
          $ref: '#/components/schemas/pinAttemptsCounter'
        previousCardContractId:
          $ref: '#/components/schemas/previousCardContractId'
        previousCardContractNumber:
          $ref: '#/components/schemas/previousCardContractNumber'
        productCode:
          $ref: '#/components/schemas/cardProductCode'
        productName:
          $ref: '#/components/schemas/cardProductName'
        sequenceNumber:
          $ref: '#/components/schemas/plasticSequenceNumber'
    previousCardContractId:
      type: integer
      format: int64
      maximum: 999999999999999999
      minimum: 1
      description: |
        Unique technical identifier of the previous card contract, generated for the current card contract by the MP's CMS.
        The identifier is generated when the previous card contract creation is successfully completed and is returned in a new card contract creation response. (`POST /cards`).
      example: 77691090
    previousCardContractNumber:
      type: string
      maxLength: 32
      minLength: 1
      description: |
        The previous card contract number for the current card contract represents the Primary Account Number (PAN). PAN is usually composed of 16 digits:
          * The first six digits are the Bank Identification Number (BIN): a unique number within a payment organization (Mastercard, VISA)
          * The following nine digits: contract identification number, which can be generated randomly
          * The last digit is a Luhn check digit.

        The card contract number can be returned:
          * unmasked - with a full PAN visible
          * masked - with a full PAN masked according to the defined mask (a mask pattern is agreed with the Issuer and configured in the MP API)
      example: '535773______2767'
    BaseCardContractStatusData:
      type: object
      properties:
        externalStatusCode:
          $ref: '#/components/schemas/externalStatusCode'
        externalStatusName:
          $ref: '#/components/schemas/cardContractExternalStatusName'
        statusCode:
          $ref: '#/components/schemas/cardContractStatusCode'
        statusName:
          $ref: '#/components/schemas/cardContractStatusName'
    CardContractStatusData:
      allOf:
        - type: object
          properties:
            productionStatus:
              type: string
              maxLength: 255
              minLength: 0
              description: |
                Card plastic production status.

                | **Possible values**  	| **Description**                                                                                                           	|
                |----------------------	|---------------------------------------------------------------------------------------------------------------------------	|
                | Marked               	| The card is marked for production                                                                                         	|
                | Sent                 	| The card's data has been exported to the PIN Management module                                                            	|
                | Ready                	| The card's data has been imported from the PIN Management module                                                          	|
                | Locked               	| The card is locked; this corresponds to an issued but not activated card                                                  	|
                | Marked Applet        	| The smart card applet has been marked for production                                                                      	|
                | To Close             	| Do not issue plastic for this card contract. This status is used, for example, if the previous plastic was stolen or lost 	|
                | To Request           	| The smart card applet is ready to be sent to a third-party vendor                                                         	|
                | Waiting for Response 	| The smart card applet is waiting for a response from a third-party vendor                                                 	|
                | Waiting for Subs     	| The smart card is waiting for a response from a third-party vendor                                                        	|
              example: 'Ready'
        - $ref: '#/components/schemas/BaseCardContractStatusData'
    CardContractStatusWithReason:
      required:
        - statusCode
      type: object
      properties:
        reason:
          $ref: '#/components/schemas/statusChangeReason'
        statusCode:
          type: string
          maxLength: 32
          minLength: 1
          description: |
            Card status code. The codes are configured in the MP's CMS for each Issuer.

            | **Possible values** 	| **Description**                                                                  	|
            |---------------------	|----------------------------------------------------------------------------------	|
            | 00                  	| Card is active and ready for use                                                 	|
            | 04                  	| Used for cards blocked due to Issuer's reasons (permanent status)                	|
            | 05                  	| Card does not honour (temporary status)                                          	|
            | 41                  	| Card was lost (permanent status)                                                 	|
            | 43                  	| Card was stolen (permanent status)                                               	|
            | 57                  	| Card was deactivated on Issuer's request (permanent status)                      	|
            | 59                  	| Suspected fraud (temporary status). Usually set on Issuer's request              	|

             *Disclaimer: Please contact the MP representative in case other status codes are necessary.*
          example: '00'
    CardContractActivation:
      type: object
      required:
        - activated
      properties:
        activated:
          type: boolean
          description: |
            This field must be always `true`. Executing this action will unblock the `Plastic` of the card contract and allow the card to be used for transactions.
            Card contract will be activated (status of the `Plastic` will be changed to `Active`).
          example: true
    ClientCardContracts:
      required:
        - clientCardContracts
        - total
        - limit
        - offset
        - count
      type: object
      properties:
        count:
          $ref: '#/components/schemas/paginationCount'
        limit:
          $ref: '#/components/schemas/paginationLimit'
        offset:
          $ref: '#/components/schemas/paginationOffset'
        total:
          $ref: '#/components/schemas/paginationTotal'
        clientCardContracts:
          type: array
          description: |
            List of `CardContract`.
          items:
            $ref: '#/components/schemas/CardContract'
    Plastic:
      required:
        - cardContractId
        - cardContractNumber
        - plasticId
        - sequenceNumber
        - status
      type: object
      properties:
        cardContractId:
          $ref: '#/components/schemas/cardContractId'
        cardContractNumber:
          $ref: '#/components/schemas/cardContractNumber'
        cardExpiryDate:
          $ref: '#/components/schemas/cardExpiryDate'
        chipScheme:
          type: string
          maxLength: 255
          minLength: 0
          description: |
            Name of a chip scheme used to create a physical card. For smart cards (cards with a chip), the chip scheme defines a set of transaction limiters saved in the chip memory during the card personalization (physical production).
          example: 'BNK ADVANCE DEBIT'
        companyName:
          type: string
          maxLength: 255
          minLength: 0
          description: |
            Client company name (free text field).
          example: 'Company'
        effectiveDate:
          type: string
          format: date
          description: |
            Start date of a card's effective period (YYYY-MM-DD format).
          example: '2021-06-25'
        embossedName:
          type: string
          maxLength: 32
          minLength: 0
          description: |
            Value embossed on a physical card.
          example: 'MR JOHN DOE'
        orderSource:
          type: string
          maxLength: 32
          minLength: 0
          description: |
            Issuer's office that sent the card production order.
          example: 'Office A'
        orderTarget:
          type: string
          maxLength: 32
          minLength: 0
          description: |
            Issuer's office to which the issued card and a PIN mailer will be sent.
          example: 'Target Office'
        personalizationFileName:
          type: string
          maxLength: 255
          minLength: 0
          description: |
            The name of a personalization file (a file sent to the personalization bureau).

            Personalization files are generated by the MP. The process of file generation is executed by the MP several times per day, according to a defined schedule. All created cards marked for production are processed and placed in a personalization file.
          example: 'PM_REQ_0018__20200129_000003MDSDEU.xml'
        plasticId:
          $ref: '#/components/schemas/plasticId'
        productionCode:
          $ref: '#/components/schemas/cardContractProductionCode'
        productionDate:
          type: string
          format: date
          description: |
            Date of generating a card plastic personalization file (YYYY-MM-DD format).
          example: '2021-06-25'
        productionEvent:
          type: string
          maxLength: 50
          minLength: 0
          description: |
            | **Possible values** 	|
            |---------------------	|
            | Produce Card        	|
            | Replace Card        	|
          example: 'Produce Card'
        productionReason:
          type: string
          maxLength: 32
          minLength: 0
          description: Free text describing `productionCode`.
          example: Replace All - Renew
        productionType:
          type: string
          maxLength: 50
          minLength: 0
          description: |
            Card issuing method.

            | **Possible values** 	| **Description**                                                                                                                    	|
            |---------------------	|------------------------------------------------------------------------------------------------------------------------------------	|
            | Replace All         	| A new card will be issued and a PIN mailer will be printed, e.g. when a new card is issued or a stolen card is replaced.           	|
            | Replace Plastic     	| Only a card will be issued, e.g. to replace an expired card.                                                                       	|
            | Reorder PIN         	| A new PIN will be issued.                                                                                                          	|
            | Replace CVV         	| A card with a new CVV value will be issued.                                                                                        	|
            | Replace PIN         	| The same PIN mailer will be printed again (this action is only allowed by a special agreement between the Issuer and the MP's CMS) 	|
            | Replace Add Parms   	| In the current system version, this production type is used to issue a PIN2.                                                       	|
            | Replace Chip Data   	| Calculation of encryption values for smart cards (no PIN code is generated and no PIN mailer is printed).                          	|
            | REPRINT_PIN         	| Obsolete.                                                                                                                          	|
          example: 'Replace All'
        sequenceNumber:
          $ref: '#/components/schemas/plasticSequenceNumber'
        status:
          type: string
          maxLength: 50
          minLength: 0
          description: |
            Card status determines whether transactions may be performed with the card.

            | **Possible values** 	| **Description**                                                                                                                   	|
            |---------------------	|-----------------------------------------------------------------------------------------------------------------------------------	|
            | Active              	| The card is active and may be used to perform transactions                                                                        	|
            | Inactive            	| The card has been marked                                                                                                          	|
            | Closed              	| Status of an old card after a new card is issued; transactions with the old card may be performed until the new card is activated 	|
            | Locked              	| The card is locked; this corresponds to an issued but not activated card                                                          	|
            | Rejected            	| An error occurred at the data preparation and personalization step                                                                	|
            | From File           	| The request to reissue the card (received via batch file) is being processed by the MP's CMS                                      	|
            | Locked for Online   	|                                                                                                                                   	|
            | Deferred            	|                                                                                                                                   	|
          example: 'Closed'
    CardContractPlastics:
      required:
        - cardContractPlastics
      type: object
      properties:
        cardContractPlastics:
          type: array
          description: |
            Object contains list of `Plastic` records for the given card contract.
          items:
            $ref: '#/components/schemas/Plastic'
    CardContractReissue:
      required:
        - reissueType
      type: object
      properties:
        newCardContractNumber:
          type: string
          maxLength: 20
          minLength: 0
          description: |
            Primary Account Number (PAN) of a new card contract, which shall be created in the MP's CMS.
          example: '5355840352135312'
        newCardExpiryDate:
          $ref: '#/components/schemas/newCardExpiryDate'
        newCbsNumber:
          type: string
          maxLength: 64
          minLength: 1
          description: |
            Card contract identifier generated on the Issuer's side and passed to the MP's CMS.
            The value will be stored on a newly created card contract in the CMS.
          example: 'CBS15863242747061'
        reissueType:
          type: string
          maxLength: 32
          minLength: 1
          description: |
            Reissue type defines how a new card plastic should be produced and determines the value of the card plastic's `productionCode`.

            Possible values according to the default configuration:

            | **Possible values**          	| **Description**                                                           	|
            |------------------------------	|---------------------------------------------------------------------------	|
            | REISSUE                      	| Issue a new card plastic for an existing card contract                    	|
            | RENEW                        	| Renew an existing card plastic                                            	|
            | RENEW_D                      	| Renew an existing card without physical card creation                     	|
            | REPLACE                      	| Replace an existing card plastic                                          	|
            | REPLACE_D                    	| Replace an existing card without physical card creation                   	|
            | REPLACE_WITH_PIN_INHERITANCE 	| Replace an existing card without physical card creation with the same PIN 	|
            | REPRINT                       | Order a PIN reprint for a physical card                                       |

            | **Possible values**          	| **Physical card** 	| **PAN** 	|       **Expiry date**       	|                    **PIN**                    	|
            |------------------------------	|:-----------------:	|:-------:	|:---------------------------:	|:---------------------------------------------:	|
            | REISSUE                      	|        YES        	|   Same  	| Set by the MP or the Issuer 	| Same (if previously set) or set by the Issuer 	|
            | RENEW                        	|        YES        	|   Same  	| Set by the MP or the Issuer 	|                      Same                     	|
            | RENEW_D                      	|         NO        	|   Same  	| Set by the MP or the Issuer 	|                  Not required                 	|
            | REPLACE                      	|        YES        	|   New   	| Set by the MP or the Issuer 	|                      New                      	|
            | REPLACE_D                    	|         NO        	|   New   	| Set by the MP or the Issuer 	|                  Not required                 	|
            | REPLACE_WITH_PIN_INHERITANCE 	|         NO        	|   New   	| Set by the MP or the Issuer 	|                      Same                     	|
            | REPRINT                       |        N/A          |   N/A     | N/A                           |                      Same                       |

            *Disclaimer: `reissueType` is configured in the MP's CMS and the Issuer is allowed to use only the values configured by the MP.*
          example: 'REISSUE'
    ReissuedCardContract:
      required:
        - newCardContractId
        - newCardContractNumber
        - newCardExpiryDate
        - newSequenceNumber
        - plasticId
      type: object
      properties:
        newCardContractId:
          $ref: '#/components/schemas/cardContractId'
        newCardContractNumber:
          $ref: '#/components/schemas/cardContractNumberForReissue'
        newCardExpiryDate:
          $ref: '#/components/schemas/newCardExpiryDate'
        newSequenceNumber:
          $ref: '#/components/schemas/plasticSequenceNumber'
        plasticId:
          $ref: '#/components/schemas/plasticId'
    ReverseTransactionId:
      required:
        - transactionId
      type: object
      properties:
        transactionId:
          type: integer
          format: int64
          maximum: 999999999999999999
          minimum: 1
          description: |
            Unique identifier of the document record in the CMS database.
          example: 2829673
    TransactionId:
      required:
        - transactionId
      type: object
      properties:
        transactionId:
          $ref: '#/components/schemas/transactionId'
    AccountContractStatus:
      type: object
      properties:
        changeDate:
          type: string
          format: date-time
          description: |
            The date and time of setting the status (YYYY-MM-DDThh:mm:ssZ format).
          example: '2020-09-21T12:14:01Z'
        externalStatusCode:
          $ref: '#/components/schemas/externalStatusCode'
        externalStatusName:
          $ref: '#/components/schemas/accountContractExternalStatusName'
        officerId:
          type: integer
          format: int64
          maximum: 1E+18
          minimum: 1
          description: |
            The system user ID assigned the status value.
          example: 27051
        officerName:
          type: string
          maxLength: 255
          minLength: 0
          description: |
            The system user name who assigned the status value.
          example: 'OfficerName'
        previousStatusCode:
          type: string
          maxLength: 32
          minLength: 0
          description: |
            Previous status code. The full list will be defined by the Issuer and MP during the onboarding process as they must be configured in the CMS.

            The generic solution allows the following account contract statuses:
            | **Possible values** 	| **Description**                                                                     	|
            |---------------------	|-------------------------------------------------------------------------------------	|
            | 00                  	| Account contract is active and ready for use                                        	|
            | 00c                 	| Account contract closure procedure was initiated and is ongoing (transition period) 	|
            | 14                  	| Final stats of account contract's lifecycle. Set automatically by the CMS           	|

            *Disclaimer: please contact the MP representative should other codes be necessary.*
          example: '00'
        previousStatusName:
          type: string
          maxLength: 255
          minLength: 0
          description:
            Previous status name.
          example: 'Account OK'
        statusChangeReason:
          type: string
          maxLength: 3900
          minLength: 0
          description: |
            The reason comment for status change.
          example: 'COMMENT'
        statusCode:
          type: string
          maxLength: 32
          minLength: 0
          description: |
            Current status code. The full list will be defined by the Issuer and MP during the onboarding process as they must be configured in the CMS.

            The generic solution allows the following account contract statuses:
            | **Possible values** 	| **Description**                                                                     	|
            |---------------------	|-------------------------------------------------------------------------------------	|
            | 00                  	| Account contract is active and ready for use                                        	|
            | 00c                 	| Account contract closure procedure was initiated and is ongoing (transition period) 	|
            | 14                  	| Final stats of account contract's lifecycle. Set automatically by the CMS           	|

            *Disclaimer: please contact the MP representative should other codes be necessary.*
          example: '00'
        statusName:
          $ref: '#/components/schemas/accountContractStatusName'
    CardContractStatus:
      type: object
      properties:
        changeDate:
          type: string
          format: date-time
          description: |
            The date and time of setting the status (YYYY-MM-DDThh:mm:ssZ format).
          example: '2020-09-21T12:14:01Z'
        externalStatusCode:
          $ref: '#/components/schemas/externalStatusCode'
        externalStatusName:
          $ref: '#/components/schemas/cardContractExternalStatusName'
        officerId:
          type: integer
          format: int64
          maximum: 1E+18
          minimum: 1
          description: |
            The system user ID assigned the status value.
          example: 27051
        officerName:
          type: string
          maxLength: 255
          minLength: 0
          description: |
            The system user name who assigned the status value.
          example: 'OfficerName'
        previousStatusCode:
          type: string
          maxLength: 32
          minLength: 0
          description: |
            Previous status code. The codes are configured in the MP's CMS for each Issuer.

            Generic solution allows the following codes:
            | **Possible values** 	| **Description**                                                                  	|
            |---------------------	|----------------------------------------------------------------------------------	|
            | 00                  	| Card is active and ready for use                                                 	|
            | 04                  	| Used for cards blocked due to Issuer's reasons (permanent status)                	|
            | 05                  	| Card does not honour (temporary status)                                          	|
            | 14                  	| Final state of card's lifecycle (permanent status). Set automatically by the CMS 	|
            | 41                  	| Card was lost (permanent status)                                                 	|
            | 43                  	| Card was stolen (permanent status)                                               	|
            | 57                  	| Card was deactivated on Issuer's request (permanent status)                      	|
            | 59                  	| Suspected fraud (temporary status). Usually set on Issuer's request              	|

            *Disclaimer: please contact the MP representative should other codes be necessary.*
          example: '00'
        previousStatusName:
          type: string
          maxLength: 255
          minLength: 0
          description:
            Previous status name.
          example: 'Card OK'
        statusChangeReason:
          type: string
          maxLength: 3900
          minLength: 0
          description: |
            The reason comment for status change.
          example: 'COMMENT'
        statusCode:
          type: string
          maxLength: 32
          minLength: 0
          description: |
            Current status code. The codes are configured in the MP's CMS for each Issuer.

            Generic solution allows the following codes:
            | **Possible values** 	| **Description**                                                                  	|
            |---------------------	|----------------------------------------------------------------------------------	|
            | 00                  	| Card is active and ready for use                                                 	|
            | 04                  	| Used for cards blocked due to Issuer's reasons (permanent status)                	|
            | 05                  	| Card does not honour (temporary status)                                          	|
            | 14                  	| Final state of card's lifecycle (permanent status). Set automatically by the CMS 	|
            | 41                  	| Card was lost (permanent status)                                                 	|
            | 43                  	| Card was stolen (permanent status)                                               	|
            | 57                  	| Card was deactivated on Issuer's request (permanent status)                      	|
            | 59                  	| Suspected fraud (temporary status). Usually set on Issuer's request              	|

            *Disclaimer: please contact the MP representative should other codes be necessary.*
          example: '00'
        statusName:
          $ref: '#/components/schemas/cardContractStatusName'
    ContractTariffs:
      required:
        - contractTariffs
        - count
        - offset
        - total
        - limit
      type: object
      properties:
        count:
          $ref: '#/components/schemas/paginationCount'
        limit:
          $ref: '#/components/schemas/paginationLimit'
        offset:
          $ref: '#/components/schemas/paginationOffset'
        total:
          $ref: '#/components/schemas/paginationTotal'
        contractTariffs:
          type: array
          description: |
            List of `ContractTariff`.
          items:
            $ref: '#/components/schemas/ContractTariff'
    BaseClient:
      type: object
      properties:
        additionalDate01:
          $ref: '#/components/schemas/additionalDate01'
        additionalDate02:
          $ref: '#/components/schemas/additionalDate02'
        clientBaseAddressData:
          $ref: '#/components/schemas/ClientBaseAddressData'
        clientCompanyData:
          $ref: '#/components/schemas/ClientCompanyData'
        clientContactData:
          $ref: '#/components/schemas/ClientContactData'
        clientIdentificationData:
          $ref: '#/components/schemas/ClientIdentificationData'
        clientPersonalData:
          $ref: '#/components/schemas/ClientPersonalData'
        clientExpiryDate:
          $ref: '#/components/schemas/clientExpiryDate'
        embossedData:
          $ref: '#/components/schemas/EmbossedData'
    Client:
      allOf:
        - type: object
          required:
            - clientId
            - clientNumber
          properties:
            amendmentDate:
              $ref: '#/components/schemas/amendmentDate'
            amendmentOfficerId:
              $ref: '#/components/schemas/amendmentOfficerId'
            amendmentOfficerName:
              $ref: '#/components/schemas/amendmentOfficerName'
            clientId:
              $ref: '#/components/schemas/clientId'
            clientNumber:
              $ref: '#/components/schemas/clientNumber'
            clientType:
              $ref: '#/components/schemas/clientType'
            dateOpen:
              $ref: '#/components/schemas/dateOpen'
            orderDepartment:
              $ref: '#/components/schemas/orderDepartment'
            serviceGroupCode:
              $ref: '#/components/schemas/serviceGroupCode'
        - $ref: '#/components/schemas/BaseClient'
    ClientCreation:
      allOf:
        - type: object
          required:
            - clientNumber
            - clientType
          properties:
            clientCustomData:
              type: array
              description: |
                Client custom data allow the Issuer to pass specific client tags during the creation request.
                The tags may represent Issuer-specific field names and values, not available as separate, dedicated fields.
                The Issuer can specify a tag name and its value.

                Custom data tags are stored in fixed containers (four containers are available) in a TAG=VALUE; format
                (for example: CATEGORY=A;GROUP=G1;).

                Each container has a length of 3900 characters.
              items:
                $ref: '#/components/schemas/CustomDataTag'
            clientNumber:
              $ref: '#/components/schemas/clientNumber'
            clientType:
              $ref: '#/components/schemas/clientType'
            orderDepartment:
              $ref: '#/components/schemas/orderDepartment'
            serviceGroupCode:
              $ref: '#/components/schemas/serviceGroupCode'
        - $ref: '#/components/schemas/BaseClient'
    ClientIdentifier:
      required:
        - clientId
      type: object
      properties:
        clientId:
          $ref: '#/components/schemas/clientId'
    additionalDate01:
      type: string
      format: date-time
      description: |
        Additional date to meet the Issuer's individual needs.
        It can be any date which the Issuer wants to store on the client record - for example, the date when the client signed the agreement. (YYYY-MM-DDThh:mm:ssZ format).
      example: '2021-01-27T09:59:44Z'
    additionalDate02:
      type: string
      format: date-time
      description: |
        Additional date to meet the Issuer's individual needs.
        It can be any date which the Issuer wants to store on the client record - for example, the date when the client signed the agreement. (YYYY-MM-DDThh:mm:ssZ format).
      example: '2021-02-15T20:58:39Z'
    ClientBaseAddressData:
      type: object
      description: |
        Client's base address stored in the MP's CMS at the client level.
      properties:
        addressLine1:
          $ref: '#/components/schemas/addressLine1'
        addressLine2:
          $ref: '#/components/schemas/addressLine2'
        addressLine3:
          $ref: '#/components/schemas/addressLine3'
        addressLine4:
          $ref: '#/components/schemas/addressLine4'
        city:
          $ref: '#/components/schemas/city'
        country:
          $ref: '#/components/schemas/country'
        postalCode:
          $ref: '#/components/schemas/postalCode'
        state:
          $ref: '#/components/schemas/state'
    ClientCompanyData:
      type: object
      description: |
        The client's company object represents a repository where the Issuer can store information on what company the client belongs to.
      properties:
        companyDepartment:
          type: string
          maxLength: 255
          minLength: 0
          description: |
            Company department name.
          example: 'Department'
        companyName:
          type: string
          maxLength: 255
          minLength: 0
          description: |
            Company name.
          example: 'Company'
        companyTradeName:
          type: string
          maxLength: 255
          minLength: 0
          description: |
            Company trade name.
          example: 'Company Trade'
        position:
          type: string
          maxLength: 255
          minLength: 0
          description: |
            Client's position in their company.
          example: 'Employee'
    ClientContactData:
      type: object
      description: |
        Client's contact data.
      properties:
        email:
          $ref: '#/components/schemas/email'
        fax:
          type: string
          maxLength: 32
          minLength: 0
          description: |
            Fax number.

            Note: The pattern for this field is configured in the MP's API during the onboarding process.
          example: '0048123456777'
        faxHome:
          type: string
          maxLength: 32
          minLength: 0
          description: |
            Home fax number.

            Note: The pattern for this field is configured in the MP's API during the onboarding process.
          example: '0048123456888'
        phoneNumberHome:
          type: string
          maxLength: 32
          minLength: 0
          description: |
            Home phone number.

            Note: The pattern for this field is configured in the MP's API during the onboarding process.
          example: '0048123456999'
        phoneNumberMobile:
          type: string
          maxLength: 32
          minLength: 0
          description: |
            Mobile phone number (i.e. used for SMS notifications).

            Note: The pattern for this field is configured in the MP's API during the onboarding process.
          example: '0048123456778'
        phoneNumberWork:
          type: string
          maxLength: 32
          minLength: 0
          description: |
            Work phone number.

            Note: The pattern for this field is configured in the MP's API during the onboarding process.
          example: '0048123456789'
    ClientIdentificationData:
      type: object
      description: |
        Client's identification data.
      properties:
        identificationDocumentDetails:
          type: string
          maxLength: 255
          minLength: 0
          description: |
            Client identification document details. Free text field, could be the document's date of issue.
          example: '161235698529429'
        identificationDocumentNumber:
          type: string
          maxLength: 32
          minLength: 0
          description: |
            Client's identification document number e.g. national ID document, passport number.
            Free text field. The MP's CMS will not validate the correctness of the identification number.
          example: '161235698529328'
        identificationDocumentType:
          type: string
          maxLength: 32
          minLength: 0
          description: |
            Client's identification document type. Free text, e.g. National ID, Passport.
          example: 'Passport'
        socialNumber:
          type: string
          maxLength: 32
          minLength: 0
          description: |
            Client's social security number. The MP's CMS will not validate the correctness of the social security number.
          example: '161235698529227'
        taxPosition:
          type: string
          maxLength: 32
          minLength: 0
          description: |
            Additional information related to tax purposes. Free text field.
          example: 'Tax position'
        taxpayerIdentifier:
          type: string
          maxLength: 32
          minLength: 0
          description: |
            Identification number used for tax purposes.
          example: '161235698529531'
    ClientPersonalData:
      type: object
      description: |
        Client's personal data.
      properties:
        birthDate:
          type: string
          format: date
          description: |
            Date of birth (format: YYYY-MM-DD).
          example: '2021-06-25'
        birthName:
          type: string
          maxLength: 255
          minLength: 0
          description: |
            Birth name.
          example: 'Doe'
        birthPlace:
          type: string
          maxLength: 255
          minLength: 0
          description: |
            Place of birth.
          example: 'Warsaw'
        citizenship:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Client's citizenship. The allowed format is ISO 3166-1 alfa-3 country code (3-letter country designation).
          example: 'USA'
        firstName:
          $ref: '#/components/schemas/firstName'
        gender:
          type: string
          pattern: '^(M|F|N)'
          maxLength: 1
          minLength: 0
          description: |
            Gender.

            | **Possible values** 	| **Description** 	|
            |---------------------	|-----------------	|
            | F                   	| Female          	|
            | M                   	| Male            	|
            | N                   	| Not specified   	|
          example: 'M'
        language:
          type: string
          pattern: '[a-z]{2}'
          maxLength: 2
          minLength: 2
          description: |
            Language symbol.
            It follows the Internet Engineering Task Force (IETF) [BCP 47](https://tools.ietf.org/html/bcp47#appendix-A) standard.

            *Disclaimer: Please contact the MP representative should the language code be used. Available values will need to be agreed upon by the MP and the Issuer prior to the onboarding process as they need to be configured on the MP's side and have an impact on different areas of configuration (e.g. statement file generating, workbench screens, etc.).*
          example: 'en'
        lastName:
          $ref: '#/components/schemas/lastName'
        maritalStatus:
          type: string
          maxLength: 32
          minLength: 1
          description: |
            Client's marital status.

            | **Possible values** 	| **Description** 	|
            |---------------------	|-----------------	|
            | DD                    | Divorced          |
            | DM                    | Married           |
            | DS                    | Single            |
            | DX                    | Miscellaneous     |

            *Disclaimer: Please contact the MP representative should other values be required. Available values will need to be agreed upon by the MP and the Issuer prior to the onboarding process as they need to be configured on the MP's side.*
          example: 'DS'
        middleName:
          type: string
          maxLength: 255
          minLength: 0
          description: |
            Middle name.
          example: 'Carl'
        secretPhrase:
          type: string
          maxLength: 255
          minLength: 0
          description: |
            Secret phrase can be used by the Issuer to authenticate a client.
            E.g. mother's maiden name used for authentication process between the client and the call center.
          example: 'secret'
        shortName:
          type: string
          maxLength: 255
          minLength: 0
          description: |
            Client's short name.
          example: 'Madley'
        suffix:
          type: string
          maxLength: 32
          minLength: 0
          description: |
            Client's name suffix. May be used in formal correspondence with the client.
            The Issuer can choose any text the client wishes, e.g. PhD, Dr.

            *Disclaimer: Please contact the MP representative should the suffix be used. Available values will need to be agreed upon by the MP and the Issuer prior to the onboarding process as they need to be configured on the MP's side.*
          example: 'PhD'
        title:
          type: string
          maxLength: 32
          minLength: 0
          description: |
            Client's title.

            | **Possible values (default)** 	|
            |-------------------------------	|
            | MR                            	|
            | MRS                           	|
            | MISS                          	|

            *Disclaimer: Please contact the MP representative should other values be required. Available values will need to be agreed upon by the MP and the Issuer prior to the onboarding process as they need to be configured on the MP's side.*
          example: 'MR'
    ClientModification:
      allOf:
        - type: object
          properties:
            clientCustomData:
              type: array
              description: |
                Client custom data allow the Issuer to pass specific client tags during the creation request.
                The tags may represent Issuer-specific field names and values, not available as separate, dedicated fields.
                The Issuer can specify a tag name and its value.

                Custom data tags are stored in fixed containers (four containers are available) in a TAG=VALUE; format
                (for example: CATEGORY=A;GROUP=G1;).

                Each container has a length of 3900 characters.
              items:
                $ref: '#/components/schemas/CustomDataTag'
        - $ref: '#/components/schemas/BaseClient'
    PinSearchCriteria:
      required:
        - cardExpiryDate
      type: object
      properties:
        cardExpiryDate:
          $ref: '#/components/schemas/cardExpiryDate'
        cardSequenceNumber:
          $ref: '#/components/schemas/plasticSequenceNumber'
    EncryptedPin:
      required:
        - encryptedCardContractNumber
        - encryptedPinBlock
        - encryptedZpk
      type: object
      properties:
        encryptedCardContractNumber:
          type: string
          maxLength: 2048
          minLength: 1
          description: |
            Card contract number - PAN encrypted with `Customer-Public-Rsa-Key`.
          example: '43165173F6A016EDF4075FFBC4F38DD8C1F59C0ACE3BC35853AB91A2A93AC20FC166C26723CCD261CCE41AE142D0AB0CF08CD1996CA6499D8301ABD9964EAE00B932786357FEF1DD7425D8D332980ABE18642438864CB3313CCFA4A5C4490F6A3D4348037295E9957309757E8D18835F7616869DB4692665EF765948A3D3C61B6B75C0CA130A80AFB8A937B203E009A8FC26BB8FBBFEA4E41FC186416D58129FDADC1F80AB88458A8212551CD874157C3F19F876D1E747D525E534885709906647AF017F0EC7662FD76F886EBAFDB9EF558C1ED5AC3B1A38CB5A34D70FF1517C819CCE26054798E40F9FFECC3B37146D4A3F4AF5B25A4D4554C1B08AA14FAD8B'
        encryptedPinBlock:
          type: string
          maxLength: 2048
          minLength: 1
          description: |
            PIN block encrypted with ZPK (Zone PIN Key) returned in `encryptedZpk`.
          example: '0B8315C81719E9CA'
        encryptedZpk:
          type: string
          maxLength: 4096
          minLength: 1
          description: |
            Hex-encoded Zone PIN Key encrypted with `Customer-Public-Rsa-Key`.

            Before encrypting with `Customer-Public-Rsa-Key`, ZPK is wrapped under Standard Key Block type.

            The standard key block format is a TLV (Type-Length-Value) encoding scheme with length as represented in Hexadecimal.

          example: '21CB78205C03CC9DEF06497F3DCC413DA9C25C51473F3BDADCA61F56184B0D199E9E0C175A5E082A4ED9044C5F2D21A930A255203D4A051EF6108B496FAA5ABFCFA146CF76A61DA330F84BEF2F2701BC17282FB6BC542F0E3F50AC3C4D27FC32E7009E5C8D406D019E7D6679DEEF09463CFCDB7957263597D65C1D31472B5E1B72252CE491BE0C67415A8D4F935F11F6CA2909511FAE7B9D453FEE102AD8BF0CD69C34CAC4028627855221AD381FD1376F6AB99F0C6693B384089C1ACEB5ED63ACB3ED0B644CFDC39EEC87887D8D5C60B5EF50CF29041F19C91FF84F677F27108D6FC0DEC9FB6575A36C65C630C20D3DA2D071135B3F829674493799C64F908B'
    ClientAddresses:
      required:
        - clientAddresses
      type: object
      properties:
        clientAddresses:
          type: array
          description: |
            List of `Address` for the client.
          items:
            $ref: '#/components/schemas/Address'
    ContractAddresses:
      required:
        - contractAddresses
      type: object
      properties:
        contractAddresses:
          type: array
          description: |
            List of `Address` for the contract.
          items:
            $ref: '#/components/schemas/Address'
    BaseAddress:
      type: object
      properties:
        addressLine1:
          $ref: '#/components/schemas/addressLine1'
        addressLine2:
          $ref: '#/components/schemas/addressLine2'
        addressLine3:
          $ref: '#/components/schemas/addressLine3'
        addressLine4:
          $ref: '#/components/schemas/addressLine4'
        city:
          $ref: '#/components/schemas/city'
        country:
          $ref: '#/components/schemas/country'
        email:
          $ref: '#/components/schemas/email'
        firstName:
          $ref: '#/components/schemas/firstName'
        lastName:
          $ref: '#/components/schemas/lastName'
        postalCode:
          $ref: '#/components/schemas/postalCode'
        state:
          $ref: '#/components/schemas/state'
    AddressCreation:
      allOf:
        - type: object
          required:
            - addressType
          properties:
            addressType:
              $ref: '#/components/schemas/addressType'
        - $ref: '#/components/schemas/BaseAddress'
    Address:
      allOf:
        - type: object
          required:
            - addressType
            - enabled
          properties:
            addressType:
              $ref: '#/components/schemas/addressType'
            enabled:
              type: boolean
              description: |
                Flag informing about the status of the address. The address can be enabled or disabled.
              example: true
        - $ref: '#/components/schemas/BaseAddress'
    AddressModification:
      allOf:
        - type: object
          properties:
            enabled:
              type: boolean
              description: |
                Flag informing about the status of the address. The address can be enabled or disabled.
              example: true
        - $ref: '#/components/schemas/BaseAddress'
    AccountContractCreation:
      required:
        - accountContractData
      type: object
      properties:
        accountContractClassifiers:
          type: array
          description: |
            A contract classifier is an additional system configuration allowing the MP platform to execute specific flows in the system.

            *Disclaimer: possible values of contract classifiers shall be provided by the MP.*
          items:
            $ref: '#/components/schemas/AccountContractClassifier'
        accountContractData:
          $ref: '#/components/schemas/AccountContractData'
        accountContractParameters:
          type: array
          description: |
            A contract parameters allow the MP platform to execute specific flows in the system.

            *Disclaimer: possible values of contract parameters shall be provided by the MP.*
          items:
            $ref: '#/components/schemas/AccountContractParameter'
        creditData:
          $ref: '#/components/schemas/CreditData'
        liabilityContract:
          $ref: '#/components/schemas/LiabilityContract'
    LiabilityContract:
      type: object
      description: |
        Liability defines the type of relation between the current product and its parent product in a "Liability" hierarchy.

        Liability information allows the Issuer to define how the MP's CMS shall check the 'Open To Buy' amount when a transaction is performed by the cardholder.

        A liability link is set between two account contracts during the account contract creation request (`POST /accounts`).
      required:
        - liabilityContractId
        - liabilityCategory
      properties:
        liabilityCategory:
          type: string
          maxLength: 1
          minLength: 1
          description: |
            Type of link between an upper-level liability account contract and the account contract being created. Usually, the link is created to indicate one corporate headquarter account and many corporate branch accounts.

            Possible values are:
            * Y - Full Liability

              * Every corporate branch is independently responsible for the repayment of its loans and loan interest.
              * All branches as a whole should not exceed the general corporate credit limit.
              * Transactions executed in any corporate branch are regulated by usage limiters set for the entire corporation.
              * Product parameters available when opening a corporate client's contract depend on the product parameters set for the corporate branch.

            * N - Affiliated

              * Every corporate branch is independently responsible for the repayment of its loans and loan interest.
              * All branches as a whole should not exceed the general corporate credit limit.
              * Transactions executed in any corporate branch are regulated by usage limiters set for the entire corporation.

            * A - Only Check Balance

              * Every corporate client has an independent credit limit and is independently responsible for the repayment of their loan and its interest.
              * Product parameters available when opening a corporate client's account depend on the product parameters for the corporate branch.

            * R - Reporting
              * This link type is used to gather statistical data on account activity within its tree. The data are required for generating "non-financial" reports, such as statements on all corporate accounts – without their consolidated totals.
          enum:
            - Y
            - N
            - A
            - R
          example: 'Y'
        liabilityContractId:
          type: string
          maxLength: 64
          minLength: 1
          description: |
            Technical identifier of an upper-level liability account contract to which a liability link is set for the account contract being created.
          example: '125879812'
    AccountContractData:
      required:
        - accountContractNumber
        - productCode
      type: object
      description: |
        Account contract data represents basic account information for any account: is it a top account or a sub-account, a debit or a credit account.
      properties:
        accountContractName:
          $ref: '#/components/schemas/accountContractName'
        accountContractNumber:
          $ref: '#/components/schemas/accountContractNumber'
        accountContractSubtypeCode:
          $ref: '#/components/schemas/subtypeCode'
        branchCode:
          $ref: '#/components/schemas/branchCode'
        cbsNumber:
          $ref: '#/components/schemas/cbsNumber'
        clientId:
          $ref: '#/components/schemas/clientId'
        currency:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Account currency (format according to ISO 4217, alphanumeric code).
          example: 'EUR'
        customData:
          type: array
          description: |
            Contract custom data allow the Issuer to pass specific contract tags during the creation request.
            The tags may represent Issuer-specific field names and values, not available as separate, dedicated fields.
            The Issuer can specify a tag name and its value.

            Custom data tags are stored in fixed containers (four containers are available) in a TAG=VALUE; format
            (for example: CATEGORY=A;GROUP=G1;).

            Each container has a length of 255 characters.
          items:
            $ref: '#/components/schemas/CustomDataTag'
        parentAccountContractId:
          $ref: '#/components/schemas/parentAccountContractId'
        productCode:
          $ref: '#/components/schemas/accountProductCode'
        serviceGroupCode:
          $ref: '#/components/schemas/serviceGroupCode'
    CreditData:
      type: object
      properties:
        billingDay:
          type: string
          maxLength: 2
          minLength: 0
          description: |
            The day when a billing cycle for the credit account ends. As a result:
             * billing is closed
             * interest may be charged for the outstanding balance
             * a Minimum To Pay amount is calculated
             * a statement is generated

            In the generic solution, the possible values are integers between 1 and 31. If value 31 is chosen, `billingDay` is set to the end of the month.
          example: '10'
        creditLimitAmount:
          type: number
          maximum: 1000000000000000000
          exclusiveMaximum: true
          minimum: 0
          exclusiveMinimum: true
          description: |
            Information on the amount of granted credit limit assigned to the account.
            Credit limit must be provided in the account currency.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 20
    AccountContractClassifier:
      required:
        - classifierCode
        - classifierValue
      type: object
      properties:
        classifierCode:
          $ref: '#/components/schemas/classifierCode'
        classifierValue:
          $ref: '#/components/schemas/classifierValue'
    AccountContractParameter:
      required:
        - parameterCode
        - parameterValue
      type: object
      properties:
        parameterCode:
          $ref: '#/components/schemas/parameterCode'
        parameterValue:
          $ref: '#/components/schemas/parameterValue'
    AccountContractModification:
      type: object
      properties:
        accountContractName:
          $ref: '#/components/schemas/accountContractName'
        cbsNumber:
          $ref: '#/components/schemas/cbsNumber'
        customData:
          type: array
          description: |
            Contract custom data allow the Issuer to pass specific contract tags during the creation request.
            The tags may represent Issuer-specific field names and values, not available as separate, dedicated fields.
            The Issuer can specify the tag name and its value.

            Custom data tags are stored in fixed containers (four containers are available) in TAG=VALUE; format
            (for example: CATEGORY=A;GROUP=G1;).

            Each container has length 255 characters.
          items:
            $ref: '#/components/schemas/CustomDataTag'
    AccountContractStatusWithReason:
      required:
        - statusCode
      type: object
      properties:
        reason:
          $ref: '#/components/schemas/statusChangeReason'
        statusCode:
          type: string
          maxLength: 32
          minLength: 1
          description: |
            Account contract status. The full list will be defined by the Issuer and MP during the onboarding process as they must be configured in the CMS.

            The generic solution allows the following account contract statuses:
            | **Possible values** 	| **Description**                                                                     	|
            |---------------------	|-------------------------------------------------------------------------------------	|
            | 00                  	| Account contract is active and ready for use                                        	|
            | 00c                 	| Account contract closure procedure was initiated and is ongoing (transition period) 	|
          example: '00'
    SubAccountContracts:
      required:
        - subAccountContracts
        - count
        - offset
        - total
        - limit
      type: object
      properties:
        count:
          $ref: '#/components/schemas/paginationCount'
        limit:
          $ref: '#/components/schemas/paginationLimit'
        offset:
          $ref: '#/components/schemas/paginationOffset'
        total:
          $ref: '#/components/schemas/paginationTotal'
        subAccountContracts:
          type: array
          description: |
            List of `AccountContract`.
          items:
            $ref: '#/components/schemas/AccountContract'
    ContractSummaryTree:
      required:
        - contractSummaries
        - count
        - offset
        - total
        - limit
      type: object
      properties:
        count:
          $ref: '#/components/schemas/paginationCount'
        limit:
          $ref: '#/components/schemas/paginationLimit'
        offset:
          $ref: '#/components/schemas/paginationOffset'
        total:
          $ref: '#/components/schemas/paginationTotal'
        contractSummaries:
          type: array
          description: |
            List of `ContractSummary`.
          items:
            $ref: '#/components/schemas/ContractSummary'
    ContractSummary:
      required:
        - contractId
      type: object
      properties:
        contractCategory:
          type: string
          maxLength: 7
          minLength: 1
          description: |
            Contract's contract category.

            | **Possible values** 	|
            |---------------------	|
            | Account             	|
            | Card                	|
            | Device              	|
          example: 'Card'
        contractId:
          $ref: '#/components/schemas/contractId'
        contractLevel:
          $ref: '#/components/schemas/contractLevel'
        contractName:
          $ref: '#/components/schemas/contractName'
        contractNumber:
          type: string
          maxLength: 64
          minLength: 0
          description: |
            Contract number (can be masked if PAN present).
          example: '915555______0017'
        leaf:
          $ref: '#/components/schemas/leaf'
        liabilityCategory:
          type: string
          maxLength: 1
          minLength: 1
          description: |
            Type of link between upper-level liability account contract and account contract being created. Usually, the link is created to
            indicate one corporate headquarter account and many corporate branches accounts.

            Possible values are:
            * Y - Full Liability

              * Every corporate branch is independently responsible for the repayment of its loans and loan interest.
              * All branches as a whole should not exceed the general corporate credit limit.
              * Transactions executed in any corporate branch are regulated by usage limiters set for the entire corporation.
              * Product parameters available when opening a corporate client's contract depend on the product parameters set for the corporate branch.

            * N - Affiliated
              * Every corporate branch is independently responsible for the repayment of its loans and loan interest.
              * All branches as a whole should not exceed the general corporate credit limit.
              * Transactions executed in any corporate branch are regulated by usage limiters set for the entire corporation.

            * A - Only Check Balance
              * Every corporate client has an independent credit limit and is independently responsible for the repayment of his/her loan and its interest.
              * Product parameters available when opening a corporate client's accounts depend on the product parameters for the corporate branch.

            * R - Reporting
              * This link type is used to gather statistical data on account activity within its tree. This data is needed for generating "non-financial" reports, such as statements on all corporate accounts – without their consolidated totals.
          example: 'Y'
        liabilityContractId:
          type: integer
          format: int64
          maximum: 999999999999999999
          minimum: 1
          description: |
            Liability contract record id from the CMS database.
          example: 4124881
        liabilityContractNumber:
          type: string
          maxLength: 64
          minLength: 0
          description: |
            Liability contract number.
          example: '3219843718'
    ContractBalances:
      required:
        - contractBalances
      type: object
      properties:
        contractBalances:
          type: array
          description: |
            List of `ContractBalance`.
          items:
            $ref: '#/components/schemas/ContractBalance'
    ContractBalance:
      required:
        - balanceCode
        - balanceId
      type: object
      properties:
        balanceCode:
          $ref: '#/components/schemas/contractBalanceCode'
        balanceCurrency:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Currency in which the balance amount is expressed (format according to ISO 4217, alphanumeric code).
          example: 'EUR'
        balanceId:
          type: integer
          format: int64
          maximum: 999999999999999999
          minimum: 1
          description: |
            Balance record ID.
          example: 89516416
        balanceValue:
          type: number
          maximum: 1E+18
          exclusiveMaximum: true
          minimum: -1E+18
          exclusiveMinimum: true
          description: |
            The current amount of the contract balance specified by the `balanceCode` attribute.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 9811.31
    Event:
      required:
        - eventCode
      type: object
      properties:
        amount:
          type: number
          maximum: 1E+18
          exclusiveMaximum: true
          minimum: -1E+18
          exclusiveMinimum: true
          description: |
            The amount parameter for the event. Only one of 2 options: (`amount` and `currency`) or (`parameterString`) may be input in `POST /contracts/{contract_id}/events`.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 100
        currency:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            The currency parameter for the event (format according to ISO 4217, alphanumeric code).
            Only one of 2 options: (`amount` and `currency`) or (`parameterString`) may be input in `POST /contracts/{contract_id}/events`.
          example: 'EUR'
        endDate:
          type: string
          format: date
          description: |
            Event closing date (YYYY-MM-DD format).
          example: '2031-06-25'
        eventCode:
          type: string
          maxLength: 32
          minLength: 1
          description: |
            Event code which will be executed in the MP's CMS. A list of possible codes will be defined by the MP during the project based on Issuer requirements.
          example: 'MDES_TKN_DEACTIVATE'
        parameterString:
          type: string
          maxLength: 255
          minLength: 0
          description: |
            The parameter string for the event. Only one of 2 options: (`amount` and `currency`) or (`parameterString`) may be input in `POST /contracts/{contract_id}/events`.
          example: 'VALUE'
        reason:
          type: string
          maxLength: 255
          minLength: 1
          description: |
            Reason of the Event.
          example: 'MP_API_OPEN_EVENT'
        startDate:
          type: string
          format: date
          description: |
            Event opening date (YYYY-MM-DD format).
          example: '2031-06-25'
    ClientAccountContracts:
      required:
        - clientAccountContracts
        - total
        - limit
        - offset
        - count
      type: object
      properties:
        count:
          $ref: '#/components/schemas/paginationCount'
        limit:
          $ref: '#/components/schemas/paginationLimit'
        offset:
          $ref: '#/components/schemas/paginationOffset'
        total:
          $ref: '#/components/schemas/paginationTotal'
        clientAccountContracts:
          type: array
          description: |
            List of `AccountContract`.
          items:
            $ref: '#/components/schemas/AccountContract'
    AccountContract:
      required:
        - accountContractId
        - accountContractBalances
        - accountContractNumber
        - accountContractOwner
        - accountContractStatusData
        - billingAccountContractId
        - billingAccountContractNumber
        - accountContractLevel
        - dateOpen
        - productName
        - topAccountContractId
        - topAccountContractNumber
      type: object
      properties:
        accountContractBalances:
          $ref: '#/components/schemas/AccountContractBalances'
        accountContractId:
          type: integer
          format: int64
          maximum: 999999999999999999
          minimum: 1
          description: |
            Unique technical identifier for an account contract generated by the MP's CMS.
            The identifier is generated when the account contract creation finishes successfully and is returned in the account contract creation response (`POST /accounts`).
          example: 60002
        accountContractLevel:
          type: string
          maxLength: 255
          minLength: 1
          description: |
            Contract level in the contract hierarchy. This field informs about the contract level and about the sequential number of the contract within that level.

            For example, if there is one account with two cards, the system will assign:
              * . - for the account contract
              * .1. - for the first card contract
              * .2. - for the second card contract

            If there is one account with two subaccounts with cards created
            under subaccounts, the system will assign:
              * . - for the account
              * .1. - for the first subaccount contract
              * .1.1. - for the first card contract
              * .1.2. - for the second card contract
              * .2. - for the second subaccount contract
              * .2.1. - for the first card contract
              * .2.2. - for the second card contract
              * .2.3. - for the third card contract
          example: '.1.'
        accountContractName:
          $ref: '#/components/schemas/accountContractName'
        accountContractNumber:
          $ref: '#/components/schemas/accountContractNumber'
        accountContractOwner:
          $ref: '#/components/schemas/AccountContractOwner'
        accountContractStatusData:
          $ref: '#/components/schemas/AccountContractStatusData'
        accountContractSubtype:
          type: string
          maxLength: 255
          minLength: 0
          description: |
            Name of an account contract's subtype code which has been used during the account creation.
            The name may be returned even when a subtype code has not been passed by the Issuer in an account creation request.
          example: '018-Private Client Account'
        additionalParameters:
          type: string
          maxLength: 4000
          minLength: 0
          description: |
            Additional tagged specified field.
          example: 'FIRST_CYCLE=2020-01-01;AS=&lt;ASV160927172745>&lt;SOV160927172745>;SP=&lt;SPV180802100310>&lt;SPA1002>;INIT_EVNT;'
        amendmentDate:
          $ref: '#/components/schemas/amendmentDate'
        amendmentOfficerId:
          $ref: '#/components/schemas/amendmentOfficerId'
        amendmentOfficerName:
          $ref: '#/components/schemas/amendmentOfficerName'
        billingAccountContractId:
          type: integer
          format: int64
          maximum: 999999999999999999
          minimum: 1
          description: |
            Technical identifier of a billing account (the value is set by the MP's CMS).
            A billing account contract defines the account used for settlements and the main account in the account hierarchy.
          example: 60002
        billingAccountContractNumber:
          type: string
          maxLength: 64
          minLength: 1
          description: |
            Account contract identifier of a billing account. The value is defined in the Issuer's system and is passed to the MP's CMS during the billing account creation request (`POST /accounts`).
          example: 'ABC_121235694296313'
        branchCode:
          $ref: '#/components/schemas/branchCode'
        branchName:
          $ref: '#/components/schemas/branchName'
        cbsNumber:
          $ref: '#/components/schemas/cbsNumber'
        currency:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Account contract currency (format according to ISO 4217, alphanumeric code).
          example: 'EUR'
        currencyNumericCode:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Account contract currency (format according to ISO 4217, numeric code).
          example: '978'
        dateClose:
          type: string
          format: date
          description: |
            Date of contract closure (YYYY-MM-DD format).
          example: '2021-12-31'
        dateOpen:
          $ref: '#/components/schemas/dateOpen'
        dueDate:
          type: string
          format: date
          description: |
            Payment due date for the billing cycle (YYYY-MM-DD format).

            Date by which a cardholder has to repay the **Minimum To Pay** amount to avoid excess charges and delinquency processing.
            This date is usually printed on the cardholder's statement.

            The date is calculated by the MP's CMS when a billing cycle is closed, according to the Issuer-specific configuration.
            Possible configuration:
              * First day of the cycle (no grace days)
              * Number of days (X days) after the first day of the cycle.
          example: '2021-06-25'
        lastBillingDate:
          type: string
          format: date
          description: |
            Contract's last billing date (the date when the last cycle was closed) (YYYY-MM-DD format).
          example: '2021-12-28'
        leaf:
          $ref: '#/components/schemas/leaf'
        liabilityAccountContractId:
          type: integer
          format: int64
          maximum: 999999999999999999
          minimum: 1
          description: |
            Technical identifier (set by the MP's CMS) of a liability account contract linked to a specific account contract.
            An empty value means that the given account contract has not been created with liability information.
          example: 60001
        liabilityAccountContractNumber:
          type: string
          maxLength: 64
          minLength: 0
          description: |
            Account contract number (set by the Issuer) of a liability account contract linked to a specific account contract.

            An empty value means that the given account contract has not been created with liability information.
          example: 'ABC_35697292146'
        liabilityCategory:
          type: string
          maxLength: 1
          minLength: 1
          description: |
            Type of relation with an upper-level Liability contract (if any).

            | **Possible values** 	| **Description**    	|
            |---------------------	|--------------------	|
            | A                   	| Only Check Balance 	|
            | N                   	| Affiliated         	|
            | R                   	| Reporting          	|
            | Y                   	| Full Liability     	|
          example: 'Y'
        mainProductCode:
          $ref: '#/components/schemas/mainProductCode'
        nextBillingDate:
          type: string
          description: |
            Contract's nearest billing date (in the future) (YYYY-MM-DD format).
          format: date
          example: '2021-06-25'
        parentAccountContractId:
          $ref: '#/components/schemas/parentAccountContractId'
        parentAccountContractNumber:
          type: string
          maxLength: 64
          minLength: 0
          description: |
            Account contract number (set by the Issuer) which represents a parent account contract.
            The field is empty in case a specific account contract is a top account contract.
            A non-empty value means that the given account contract has been created as a sub-account.
          example: 'ABC_35697292146'
        parentProductCode:
          $ref: '#/components/schemas/parentProductCode'
        pastDueDate:
          type: string
          format: date
          description: |
            The date on which the delinquency arose. It is set when funds are transferred from a standard account to a delinquency account.

            The field is filled only when a past due balance exists (past due amount is not repaid).
            The date on which delinquency arises is set in the Past Due Date field when funds are transferred from a standard account to a delinquency account (format: YYYY-MM-DD)
          example: '2021-06-25'
        pastDueDays:
          type: integer
          format: int64
          maximum: 999999999
          minimum: -999999999
          description: |
            The total number of days is calculated from `pastDueDate`.
            The field is filled only when a past due balance exists (past due amount is not repaid).

            For example, delinquency arose on 01 March. This date is shown in the `pastDueDate` field. On 15 March, the total number of past due days shown in the Past Due Days field is 15 days.
          example: 233
        productCode:
          $ref: '#/components/schemas/accountProductCode'
        productName:
          $ref: '#/components/schemas/accountProductName'
        serviceGroupCode:
          $ref: '#/components/schemas/serviceGroupCode'
        serviceGroupName:
          type: string
          maxLength: 255
          minLength: 0
          description: |
            Name of a service group code which has been passed by the Issuer in an account creation request.
          example: GROUP1
        topAccountContractId:
          type: integer
          format: int64
          maximum: 999999999999999999
          minimum: 1
          description: |
            Technical identifier from the MP's CMS which represents the top account contract of a specific account contract.

            When an account contract is created as a top account, the value returned is the same as the technical identifier from the MP's CMS of the given account contract.
          example: 60001
        topAccountContractNumber:
          type: string
          maxLength: 64
          minLength: 1
          description: |
            Contract number (set by the Issuer) which represents the top account contract of a specific account contract.

            When an account contract is created as a top account, the value returned is the same as the contract name of the given account.
          example: 'ABC_35697292146'
    AccountContractOwner:
      required:
        - accountContractOwnerId
        - accountContractOwnerNumber
      type: object
      description: |
        This section is returned for every account and it contains information on the account owner.
        In case when an account has been created as a sub-account, the MP's CMS assigns a client owner taken from the parent account.
      properties:
        accountContractOwnerId:
          type: integer
          format: int64
          maximum: 999999999999999999
          minimum: 1
          description: |
            Technical identifier of a client which is the owner of an account contract.
            The identifier is created by the MP's CMS during the client creation request (`POST /clients`).
          example: 453135
        accountContractOwnerNumber:
          type: string
          maxLength: 32
          minLength: 0
          description: |
            Client number of the account owner, set by the Issuer in a client creation request (`POST /clients`).
          example: 'ABC_685400081'
        accountContractOwnerName:
          type: string
          maxLength: 255
          minLength: 0
          description: |
            Client's full name.
          example: 'John Doe'
    AccountContractBalances:
      type: object
      properties:
        additionalLimit:
          type: number
          maximum: 1000000000000000000
          exclusiveMaximum: true
          minimum: -1000000000000000000
          exclusiveMinimum: true
          description: |
            An additional authorization limit is used to increase the contract's available amount during the authorization.
            If the authorization amount is greater than the available amount but smaller than the available amount and the additional authorization limit combined, the authorization will be permitted. The amount exceeding the granted credit limit will be reflected in an over-limit account.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 123.12
        available:
          type: number
          maximum: 1000000000000000000
          exclusiveMaximum: true
          minimum: -1000000000000000000
          exclusiveMinimum: true
          description: |
            Open To Buy: amount available for a client to perform transactions.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 1401.21
        balance:
          type: number
          maximum: 1000000000000000000
          exclusiveMaximum: true
          minimum: -1000000000000000000
          exclusiveMinimum: true
          description: |
            The amount used by a client, without contract blockages. For debit cards, the amount represents posted transactions, for credit cards it represents the amount owed to the Issuer.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 15123.56
        blockedAmount:
          type: number
          maximum: 1000000000000000000
          exclusiveMaximum: true
          minimum: -1000000000000000000
          exclusiveMinimum: true
          description: |
            The amount resulting from a transaction approval on the MP's side, when the transaction is not yet posted to a client contract.
            The purpose of amount blocking is to decrease the Open To Buy amount so that the client will not use more money than is available at the account contract level.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 751.28
        creditLimit:
          type: number
          maximum: 1000000000000000000
          exclusiveMaximum: true
          minimum: -1000000000000000000
          exclusiveMinimum: true
          description: |
            Granted credit limit (applicable to credit cards only) is the amount the Issuer grants a client for their expenditures.
            Used to calculate the available amount each time the cardholder performs a transaction, a fee or interest is posted.

            By default, the amount is presented as a positive number (without a minus sign) but can be a negative number depending on CMS configuration.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 1231.78
        pastDue:
          type: number
          maximum: 1000000000000000000
          exclusiveMaximum: true
          minimum: -1000000000000000000
          exclusiveMinimum: true
          description: |
            Amount, which is owed to the Issuer and which the client was obliged to repay by a certain due date but failed to repay.
            A past due amount is also known as a **past due Minimum To Pay amount**.

            By default, the amount is presented as a negative number (with a minus sign) but can be a positive number depending on CMS configuration.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 241.21
        totalDue:
          type: number
          maximum: 1000000000000000000
          exclusiveMaximum: true
          minimum: -1000000000000000000
          exclusiveMinimum: true
          description: |
            Amount, which is owed to the Issuer and which a client is obliged to repay by the nearest due date.
            When the client fails to do so, they may be subject to extra charges and the contract becomes delinquent. At that moment, the total due amount becomes the past due amount.

            By default, the amount is presented as a negative number (with a minus sign) but can be a positive number depending on CMS configuration.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 381.14
    AccountContractStatusData:
      type: object
      properties:
        statusCode:
          $ref: '#/components/schemas/accountContractStatusCode'
        statusName:
          $ref: '#/components/schemas/accountContractStatusName'
        externalStatusCode:
          $ref: '#/components/schemas/externalStatusCode'
        externalStatusName:
          $ref: '#/components/schemas/accountContractExternalStatusName'
    ContractTariff:
      type: object
      properties:
        applyMode:
          type: string
          maxLength: 1
          minLength: 1
          description: |
            Apply mode.

            | **Possible values** 	| **Description** 	|
            |---------------------	|-----------------	|
            | D                   	| Skip            	|
            | N                   	| Inactive        	|
            | Y                   	| From tariff     	|
          example: 'D'
        activeTariffDataId:
          type: integer
          format: int64
          maximum: 1E+18
          minimum: 1
          description: |
            Tariff data identifier.
          example: 17960
        baseAmount:
          type: number
          maximum: 1E+18
          exclusiveMaximum: true
          minimum: -1E+18
          exclusiveMinimum: true
          description: |
            Additional minimum allowed amount, e.g. minimum loan payment.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 765
        contractId:
          type: integer
          format: int64
          maximum: 999999999999999999
          minimum: 1
          description: |
            Contract technical identifier.
          example: 70001
        currency:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Currency of the fee (format according to ISO 4217, alphanumeric code).
          example: 'EUR'
        currencyNumericCode:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Currency of the fee (format according to ISO 4217, numeric code).
          example: '978'
        domainFrom:
          type: string
          maxLength: 1
          minLength: 1
          description: |
            Tariff domain organization.

            | **Possible values** 	|     **Description**    	|
            |:-------------------:	|:----------------------:	|
            |          F          	|  Financial Institution 	|
            |          A          	|      Account Scheme    	|
            |          S          	|       Service Pack     	|
            |          P          	|         Product        	|
            |          T          	|     Product Template   	|
            |          O          	|         Personal       	|
            |          E          	|          Event         	|
            |          G          	|          Group         	|
            |          C          	|       Counterparty     	|
            |          M          	|         Grouped        	|
          example: 'P'
        domainLevel:
          type: integer
          format: int32
          maximum: 999
          minimum: -999
          description: |
            Tariff domain level in tariff hierarchy.
          example: 14
        domainName:
          type: string
          maxLength: 255
          minLength: 0
          description: |
            Tariff domain name.
          example: 'INB Acc general tariffs'
        duePeriod:
          type: integer
          format: int32
          maximum: 1E+9
          minimum: -1E+9
          description: |
            Due period value.
          example: 12
        feeRateValue:
          type: number
          maximum: 1E+7
          exclusiveMaximum: true
          minimum: -1E+7
          exclusiveMinimum: true
          description: |
            Additional interest rate, e.g. fee rate charged on revenue from account interest.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 1223311
        fxRateType:
          type: string
          maxLength: 1
          minLength: 1
          description: |
            Type of currency exchange rate.

            | **Possible values** 	| **Description** 	|
            |---------------------	|-----------------	|
            | B                   	| Buy/Sell        	|
            | M                   	| Middle          	|
          example: 'B'
        generalLedgerNumber:
          type: string
          maxLength: 64
          minLength: 0
          description: |
            Account number in the general ledger, used for synthetic accounting.
          example: '110101'
        generalLedgerNumberName:
          type: string
          maxLength: 128
          minLength: 0
          description: |
            General ledger number name.
          example: 'Accounts receivables - households-110101'
        globalTariffId:
          type: integer
          format: int64
          maximum: 1E+18
          minimum: 1
          description: |
            Global tariff identifier.
          example: 7564
        gracePeriod:
          type: integer
          format: int32
          maximum: 1E+9
          minimum: -1E+9
          description: |
            The time interval used, for example, to specify a time shift for merchant reimbursement or to specify a loan grace period.
          example: 5634
        minCount:
          type: integer
          format: int32
          maximum: 999999999
          minimum: 0
          description: |
            Minimum allowed counter value.
          example: 43
        maxCount:
          type: integer
          format: int32
          maximum: 999999999
          minimum: 0
          description: |
            Maximum allowed counter value.
          example: 34
        maxAmount:
          type: number
          maximum: 1E+18
          exclusiveMaximum: true
          minimum: -1E+18
          exclusiveMinimum: true
          description: |
            Maximum allowed amount, e.g. maximum fee or maximum transaction amount.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 8444
        minAmount:
          type: number
          maximum: 1E+18
          exclusiveMaximum: true
          minimum: -1E+18
          exclusiveMinimum: true
          description: |
            Minimum allowed amount, e.g. minimum fee or minimum transaction amount.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 6543
        personalisationType:
          type: string
          maxLength: 1
          minLength: 1
          description: |
            Personalisation type.

            | **Possible values** 	|      **Description**      	|
            |:-------------------:	|:-------------------------:	|
            |          G          	|           Global          	|
            |          P          	|          Personal         	|
            |          D          	|        Personalised       	|
            |          T          	| Personal (Template Based) 	|
            |          L          	|          Template         	|
          example: 'G'
        personalTariffId:
          type: integer
          format: int64
          maximum: 1E+18
          minimum: 1
          description: |
            Personal tariff identifier.
          example: 8112
        rateValue:
          type: number
          maximum: 1E+7
          exclusiveMaximum: true
          minimum: -1E+7
          exclusiveMinimum: true
          description: |
            The interest rate on an account or fee rate.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 433111
        singleAmount:
          type: number
          maximum: 1E+18
          exclusiveMaximum: true
          minimum: -1E+18
          exclusiveMinimum: true
          description: |
            Additional allowed amount, e.g. maximum payment in installment schedule.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 7444312
        startDate:
          type: string
          format: date
          description: |
            Date from which tariff data is active (YYYY-MM-DD format).
          example: '2021-06-25'
        tariffCode:
          type: string
          maxLength: 255
          minLength: 0
          description: |
            Tariff code.
          example: 'MTP_CALC_RULE'
        tariffDomainId:
          type: integer
          format: int64
          maximum: 1E+18
          minimum: 1
          description: |
            Tariff domain identifier.
          example: 11460
        tariffDomainCode:
          type: string
          maxLength: 32
          minLength: 0
          description: |
            Tariff domain code.
          example: 'GL'
        tariffId:
          type: integer
          format: int64
          maximum: 1E+18
          minimum: 1
          description: |
            Tariff identifier.
          example: 16270
        tariffName:
          type: string
          maxLength: 255
          minLength: 0
          description: |
            Tariff name.
          example: 'INB MTP Calculation Rule 1'
        tariffRole:
          type: string
          maxLength: 32
          minLength: 1
          description: |
            Tariff role.

            | **Possible values** 	| **Description**            	|
            |---------------------	|----------------------------	|
            | SERVICE             	|  Service                   	|
            | SERVICE_LIMIT       	|  Service Limit             	|
            | SERVICE_VD          	|  Service Value Days        	|
            | INTEREST            	|  Interest                  	|
            | AGEING              	|  Ageing                    	|
            | USAGE               	|  Usage                     	|
            | INTEREST_TAX        	|  Interest Tax              	|
            | BILLING             	|  Billing Scheme            	|
            | GL                  	|  General Ledger Numeration 	|
            | INST_FEE            	|  Installment Fee           	|
            | INSTALLMENT         	|  Installment Scheme        	|
            | THRESHOLD           	|  Threshold                 	|
            | TECHNICAL           	|  Technical                 	|
            | FX                  	|  Conversion                	|
            | REDEFINITION        	|  Redefinition              	|
          example: 'AGEING'
        tariffStartDate:
          type: string
          format: date
          description: |
            Date from which tariff data is active (YYYY-MM-DD format).
          example: '2021-06-25'
        tariffTypeCode:
          type: string
          maxLength: 64
          minLength: 0
          description: |
            Tariff type code.
          example: 'MTP_CALC_RULE'
        tariffTypeName:
          type: string
          maxLength: 128
          minLength: 0
          description: |
            Tariff type name.
          example: 'BCC MTP Calculation Rule'
        tariffValue:
          type: string
          maxLength: 255
          minLength: 0
          description: |
            Tariff value.
          example: 'Zero tariff'
        volumeBased:
          type: string
          maxLength: 1
          minLength: 1
          description: |
            A flag that indicates whether the tariff is volume-based.

            | **Possible values** 	|
            |---------------------	|
            | N                   	|
            | Y                   	|
          example: 'Y'
    ContractFinancial:
      type: object
      required:
        - amendmentDate
        - clientId
        - contractId
        - currency
      properties:
        additionalCreditLimit:
          type: number
          maximum: 1000000000000000000
          exclusiveMaximum: true
          minimum: -1000000000000000000
          exclusiveMinimum: true
          description: |
            Amount of additional credit limit assigned to the contract. Amount expressed in the contract currency.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 172.23
        additionalCreditLimitEffectiveDate:
          type: string
          format: date
          description: |
            Additional credit limit effective date (YYYY-MM-DD format). Defines when additional credit limit becomes effective.
          example: '2021-06-25'
        additionalCreditLimitExpiryDate:
          type: string
          format: date
          description: |
            Additional credit limit expiration date (YYYY-MM-DD format). Defines when additional credit limit expires.
          example: '2021-06-25'
        amendmentDate:
          $ref: '#/components/schemas/amendmentDate'
        availableAmount:
          type: number
          maximum: 1000000000000000000
          exclusiveMaximum: true
          minimum: -1000000000000000000
          exclusiveMinimum: true
          description: |
            Contract's available amount. Amount expressed in the contract currency.

            Presented as a positive amount (without a minus sign) but can be a negative number depending on the CMS configuration.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 12114.21
        balance:
          type: number
          maximum: 1000000000000000000
          exclusiveMaximum: true
          minimum: -1000000000000000000
          exclusiveMinimum: true
          description: |
            Contract's balance. Amount expressed in the contract currency.

            Presented as a negative amount (with a minus sign) but can be a positive number depending on CMS configuration.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 15123.56
        blockedAmount:
          type: number
          maximum: 1000000000000000000
          exclusiveMaximum: true
          minimum: -1000000000000000000
          exclusiveMinimum: true
          description: |
            The amount of contract's blocked funds. Amount expressed in the contract currency.

            Presented as a positive amount (without a minus sign) but can be a negative number depending on CMS configuration.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 301.19
        clientId:
          $ref: '#/components/schemas/clientId'
        contractId:
          $ref: '#/components/schemas/contractId'
        creditLimit:
          type: number
          maximum: 1000000000000000000
          exclusiveMaximum: true
          minimum: -1000000000000000000
          exclusiveMinimum: true
          description: |
            Credit limit assigned to the contract. Amount expressed in the contract currency.

            Presented as a positive amount (without a minus sign) but can be a negative number depending on CMS configuration.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 1231.78
        creditLimitEffectiveDate:
          type: string
          format: date
          description: |
            Date when the credit limit becomes effective (YYYY-MM-DD format).
          example: '2021-06-25'
        currency:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Currency of the due amount (format according to ISO 4217, alphanumeric code).
          example: 'EUR'
        currencyNumericCode:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Currency of the due amount (format according to ISO 4217, numeric code).
          example: '978'
        currentDueAmount:
          type: number
          maximum: 1000000000000000000
          minimum: -1000000000000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          description: |
            Due amount for the current billing cycle. Amount expressed in the contract currency.

            Presented as a negative amount (with a minus sign) but can be a positive number depending on CMS configuration.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 165.99
        delinquencyHistory:
          type: string
          maxLength: 255
          minLength: 0
          description: |
            Delinquency history.
            24-digit field showing the cardholder's short delinquency history of the last 24 billing cycles,
            each digit corresponds to a single billing cycle and may take on these values:
              * Digits 1, 2, 3, ... etc. extended by '+' symbol - the value of delinquency level in given cycle.
                * 0 - monthly payment was made on time
                * 1 - monthly payment was overdue one month
                * 2 - monthly payment was overdue for two months, etc.
              * '+' symbol - funds on Due balance.
              * '_' symbol - there is no history for the billing cycle.
              * 'E' symbol - no debt in the billing cycle

            The field should be read from right to left. The first character represents the recent billing cycle.

            Examples:

            1) The value 321+E___________________ means the following:
              - 3 - funds are on OVD_03 balance in the current cycle
              - 2 - funds were on OVD_02 balance in the previous cycle
              - 1 - funds were on OVD_01 balance
              - '+' - funds on Due balance
              - E - there was no debt in this cycle
              - All the rest 19 characters are indicated as '_' since there are only 5 billing cycles in the contract history.

            2) Let's have a contract, which has monthly billing and which is 10 months old by today. The contract has a debit transaction right after its creation and has never been paid. We will see the following history: E654321+++______________

            That should be read as follows. From right to left: from 10 to 7 months ago the funds were on Due balance (+), 6 months ago funds were on OVD_01 balance (1), 5 months ago funds were on OVD_02 balance (2), ..., 1 month ago funds were on OVD_06 balance (6), the current period is not closed, so it's marked as 'E' - no debt.

            Then client repaid and does not have any debts for the next 10 months. The history will change as follows: EEEEEEEEEEE654321+++____
          example: '888887654321++E_________'
        disputeAmount:
          type: number
          maximum: 1000000000000000000
          exclusiveMaximum: true
          minimum: -1000000000000000000
          exclusiveMinimum: true
          description: |
            Contract's disputed amount. Amount expressed in the contract currency.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 230.30
        dueDate:
          type: string
          format: date
          description: |
            Payment due date for the billing cycle (YYYY-MM-DD format).

            Date by which cardholder has to repay **Minimum To Pay** amount to avoid excess charges and delinquency processing.
            This date is usually printed on the cardholder's statement.

            The date is calculated by the CMS when the billing cycle is closed, according to Issuer-specific configuration.
            Possible configuration:
              * First day of the cycle (no grace days)
              * Number of days (X days) after the first day of the cycle.
          example: '2021-04-28'
        graceDate:
          type: string
          format: date
          description: |
            Contract's last billing grace date (YYYY-MM-DD format).
          example: '2021-06-25'
        lastPaymentAmount:
          type: number
          maximum: 1000000000000000000
          exclusiveMaximum: true
          minimum: -1000000000000000000
          exclusiveMinimum: true
          description: |
            Amount expressed in the contract currency.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 49.30
        lastPaymentDate:
          type: string
          format: date
          description: |
            Date the last payment was made (YYYY-MM-DD format).
          example: '2021-06-25'
        mainContractId:
          type: integer
          format: int64
          maximum: 999999999999999999
          minimum: 1
          description: |
            Main contract record id from the CMS database.
          example: 541984165419
        mainContractNumber:
          type: string
          maxLength: 32
          minLength: 0
          description: |
            The contract number of the main contract.
          example: '915555______0017'
        overlimitAmount:
          type: number
          maximum: 1000000000000000000
          exclusiveMaximum: true
          minimum: -1000000000000000000
          exclusiveMinimum: true
          description: |
            Contract's overlimit amount.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 689.90
        parentContractId:
          type: integer
          format: int64
          maximum: 999999999999999999
          minimum: 1
          description: |
            Parent contract record id from the CMS database.
          example: 67038174
        parentContractNumber:
          type: string
          maxLength: 32
          minLength: 0
          description: |
            The contract number of the parent contract number.
          example: 'ABC_11810015631'
        pastDueAmount:
          type: number
          maximum: 1000000000000000000
          exclusiveMaximum: true
          minimum: -1000000000000000000
          exclusiveMinimum: true
          description: |
            Contract's overdue amount. Amount expressed in the contract currency.

            Presented as a negative amount (with a minus sign) but can be a positive number depending on CMS configuration.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 140.11
        pastDueDate:
          type: string
          format: date
          description: |
            The date on which the delinquency arose (format: YYYY-MM-DD). It is set when funds are transferred from a standard account to a delinquency account.

            The field is filled only when a past due balance exists (past due amount is not repaid).
            The date on which delinquency arises is set in the Past Due Date field when funds are transferred from a standard account to a delinquency account
          example: '2021-06-25'
        pastDueDays:
          type: integer
          format: int32
          maximum: 999999999
          minimum: -999999999
          description: |
            The total number of days is calculated from `pastDueDate`.
            The field is filled only when a past due balance exists (past due amount is not repaid).

            For example, delinquency arose on 01 March. This date is shown in the `pastDueDate` field. On 15 March, the total number of past due days shown in the Past Due Days field is 15 days.
          example: 233
        previousCreditLimit:
          type: number
          maximum: 1000000000000000000
          exclusiveMaximum: true
          minimum: -1000000000000000000
          exclusiveMinimum: true
          description: |
            Previous credit limit assigned to the contract. Amount expressed in the contract currency.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 1240.10
        previousCreditLimitEffectiveDate:
          type: string
          format: date
          description: |
            Previous credit limit effective date. The date when the previous credit limit became effective (YYYY-MM-DD format).
          example: '2021-06-25'
        temporaryCreditLimit:
          type: number
          maximum: 1000000000000000000
          exclusiveMaximum: true
          minimum: -1000000000000000000
          exclusiveMinimum: true
          description: |
            Temporary credit limit assigned to the contract. Amount expressed in the contract currency.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 1000.00
        temporaryCreditLimitEffectiveDate:
          type: string
          format: date
          description: |
            Temporary credit limit effective date. Defines when temporary credit limit becomes effective for the contract (YYYY-MM-DD format).
          example: '2030-06-25'
        temporaryCreditLimitExpiryDate:
          type: string
          format: date
          description: |
            Temporary credit limit expiration date. Defines when temporary credit limit expires (YYYY-MM-DD format).
          example: '2030-07-25'
        totalDueAmount:
          type: number
          maximum: 1000000000000000000
          exclusiveMaximum: true
          minimum: -1000000000000000000
          exclusiveMinimum: true
          description: |
            Contract's total due amount. Amount expressed in the contract currency.

            Presented as a negative amount (with a minus sign) but can be a positive number depending on CMS configuration.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 1500.00
    AccountContractIdentifierWithClientIdentifier:
      required:
        - accountContractId
      type: object
      properties:
        accountContractId:
          $ref: '#/components/schemas/accountContractId'
        clientId:
          $ref: '#/components/schemas/clientId'
    AccountContractIdentifier:
      required:
        - accountContractId
      type: object
      properties:
        accountContractId:
          $ref: '#/components/schemas/accountContractId'
    ClientIdentifierWithRelinkType:
      required:
        - clientId
      type: object
      properties:
        clientId:
          $ref: '#/components/schemas/clientId'
        relinkType:
          type: string
          maxLength: 4
          minLength: 1
          description: |
            The field is used to choose the mode for changing a client for a contract tree.

            | **Possible values** 	| **Description**                                                                                                     	|
            |---------------------	|---------------------------------------------------------------------------------------------------------------------	|
            | ALL                 	| the client will be changed for the entire account contract tree                                                     	|
            | THIS                	| the client will be changed only for the specified account contract                                                  	|
            | DOWN                	| the client will be changed for all contracts (including cards) in the hierarchy that are under the account contract 	|

            The default value is "ALL".
          enum:
            - ALL
            - THIS
            - DOWN
          default: 'ALL'
          example: 'ALL'
    TechnicalAccounts:
      required:
        - technicalAccounts
      type: object
      properties:
        technicalAccounts:
          type: array
          description: |
            List of `TechnicalAccount`.
          items:
            $ref: '#/components/schemas/TechnicalAccount'
    TechnicalAccount:
      type: object
      properties:
        accountTemplateId:
          type: string
          maxLength: 64
          minLength: 0
          description: |
            Identification number of the account template the account is based on.
          example: '203040'
        accountTemplateName:
          type: string
          maxLength: 64
          minLength: 0
          description: |
            Alphanumeric description of the account template the account is based on.
          example: 'BCC Current Retail'
        ageingPriority:
          type: integer
          format: int64
          maximum: 999
          minimum: -999
          description: |
            Technical account priority, which influences the order of account interest accrual and the order of repayments to loan accounts.
          example: 67
        ageingTechnicalAccountId:
          type: string
          maxLength: 90
          minLength: 0
          description: |
            Identification number of the technical account to which funds are transferred when due normalization is performed.
          example: '21611840'
        ageingTechnicalAccountName:
          type: string
          maxLength: 90
          minLength: 0
          description: |
            Alphanumeric description of the technical account to which funds are transferred when due normalization is performed.
          example: 'BCC Billed Grace Retail'
        analyticNumber:
          type: string
          maxLength: 64
          minLength: 0
          description: |
            General ledger account number used for analytic accounting.
          example: 'CCREUR-LOAN-978'
        balance:
          type: number
          maximum: 1E+15
          exclusiveMaximum: true
          minimum: -1E+15
          exclusiveMinimum: true
          description: |
            Current technical account balance.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 1240.10
        billingCycleNumber:
          $ref: '#/components/schemas/billingCycleNumber'
        category:
          type: string
          maxLength: 1
          minLength: 1
          description: |
            Technical account category.

            | **Possible values** 	|      **Description**      	|
            |:-------------------:	|:-------------------------:	|
            |          C          	|       Personal Limit      	|
            |          S          	|        Shared Limit       	|
            |          D          	|           Dispute         	|
            |          I          	|        Pay Immediate      	|
            |          P          	|         Payment Due       	|
            |          O          	|            Other          	|
            |          T          	|       Transit To ...      	|
            |          X          	|           Primary         	|
            |          p          	|  Credit Limit Payment Due 	|
            |          i          	|    Credit Limit Overdue   	|
          example: 'O'
        contractId:
          type: integer
          format: int64
          maximum: 999999999999999999
          minimum: 1
          description: |
            Contract record id from the CMS database of contract for which technical account is created.
          example: 984621965
        contractNumber:
          type: string
          maxLength: 64
          minLength: 0
          description: |
            Contract number for which technical account is created.
          example: '111235697296337'
        currency:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Technical account currency (format according to ISO 4217, alphanumeric code).
          example: 'EUR'
        currencyNumericCode:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Technical account currency (format according to ISO 4217, numeric code).
          example: '978'
        dueType:
          type: string
          maxLength: 1
          minLength: 1
          description: |
            Rule for calculating due normalization dates for the technical account.

            | **Possible values** 	| **Description**  	|
            |---------------------	|------------------	|
            | S                   	|  Sliding         	|
            | s                   	|  Sliding + Clear 	|
            | O                   	|  Value Date Due  	|
            | E                   	|  End Cycle Due   	|
            | C                   	|  Contract Due    	|
            | P                   	|  Payment Due     	|
            | L                   	|  Long Payment Due	|
            | F                   	|  Fixed Day Due   	|
            | Q                   	|  Quarter         	|
            | N                   	|  None            	|
          example: 'S'
        endDate:
          type: string
          format: date
          description: |
            Technical cycle end date (YYYY-MM-DD format).
          example: '2021-06-25'
        inAmountAvailable:
          type: boolean
          description: |
            Shows whether the technical account balance is considered during the amount available calculation.
          example: true
        interestFeeRate:
          type: number
          maximum: 1E+7
          exclusiveMaximum: true
          minimum: -1E+7
          exclusiveMinimum: true
          description: |
            Interest fee rate for the technical account.

            The field can contain values up to 2 decimal places. A dot is used as a decimal separator.
          example: 156.56
        interestRate:
          type: number
          maximum: 1E+7
          exclusiveMaximum: true
          minimum: -1E+7
          exclusiveMinimum: true
          description: |
            Interest rate for the technical account.

            The field can contain values up to 2 decimal places. A dot is used as a decimal separator.
          example: 10
        interestTechnicalAccountId:
          type: string
          maxLength: 90
          minLength: 0
          description: |
            Identification number of the technical account to which interest accrued for the account is transferred.
          example: '21611750'
        interestTechnicalAccountName:
          type: string
          maxLength: 90
          minLength: 0
          description: |
            Alphanumeric description of the technical account to which interest accrued for the account is transferred.
          example: 'Cl Loan Int'
        lowerLimit:
          type: number
          maximum: 1E+15
          exclusiveMaximum: true
          minimum: -1E+15
          exclusiveMinimum: true
          description: |
            Minimum technical account balance.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 100.00
        overLimitTechnicalAccountId:
          type: string
          maxLength: 64
          minLength: 0
          description: |
            Identification number of the technical account to which excessive funds will be transferred if the account balance exceeds the value of the `upperLimit` field.
          example: '21611760'
        overLimitTechnicalAccountName:
          type: string
          maxLength: 64
          minLength: 0
          description: |
            Alphanumeric description of the technical account to which excessive funds will be transferred if the account balance exceeds the value of the `upperLiimit` field.
          example: 'CH Current/Credits'
        ownBlockedAmount:
          type: number
          maximum: 1E+15
          exclusiveMaximum: true
          minimum: -1E+15
          exclusiveMinimum: true
          description: |
            Technical account's blocked amount not considering blocked amounts of the subcontracts.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 150.90
        paymentPriority:
          type: integer
          format: int64
          maximum: 999
          minimum: -999
          description: |
            Technical account priority, which influences the order of account interest accrual and the order of repayments to loan accounts.
          example: 67
        startBalance:
          $ref: '#/components/schemas/billingStartBalance'
        startDate:
          type: string
          format: date
          description: |
            Technical cycle start date (YYYY-MM-DD format).
          example: '2021-06-25'
        syntheticNumber:
          type: string
          maxLength: 64
          minLength: 0
          description: |
            General ledger account number used for synthetic accounting.
          example: 'CCREUR-LOAN-978'
        technicalAccountId:
          type: integer
          format: int64
          maximum: 999999999999999999
          minimum: 1
          description: |
            Unique identifier of the technical account record in the database.
          example: 2156184
        technicalAccountCode:
          type: string
          maxLength: 32
          minLength: 0
          description: |
            Technical account code.
          example: 'BF'
        technicalAccountName:
          type: string
          maxLength: 255
          minLength: 0
          description: |
            Technical account name.
          example: 'Cl Loan Int'
        technicalAccountType:
          type: string
          maxLength: 32
          minLength: 0
          description: |
            Technical account type.
          example: 'BCC Current Retail'
        totalBlockedAmount:
          type: number
          maximum: 1E+15
          exclusiveMaximum: true
          minimum: -1E+15
          exclusiveMinimum: true
          description: |
            Technical account's blocked amount considering blocked amounts of the subcontracts.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 199.90
        upperLimit:
          type: number
          maximum: 1E+15
          exclusiveMaximum: true
          minimum: -1E+15
          exclusiveMinimum: true
          description: |
            Maximum technical account balance.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 5000.00
    ClassifierCreation:
      required:
        - classifierValue
      type: object
      properties:
        classifierValue:
          $ref: '#/components/schemas/classifierValue'
        endDate:
          type: string
          format: date
          description: |
            Date until which the classifier should obtain new value (YYYY-MM-DD format).
          example: '2031-06-25'
        startDate:
          type: string
          format: date
          description: |
            Date from which the classifier should obtain new value (YYYY-MM-DD format).
          example: '2031-06-25'
    ClientClassifiers:
      required:
        - clientClassifiers
      type: object
      properties:
        clientClassifiers:
          type: array
          description: |
            List of `Classifier` for the client.
          items:
            $ref: '#/components/schemas/Classifier'
    ContractClassifiers:
      required:
        - contractClassifiers
      type: object
      properties:
        contractClassifiers:
          type: array
          description: |
            List of `Classifier` for the contract.
          items:
            $ref: '#/components/schemas/Classifier'
    Classifier:
      required:
        - classifierCode
        - status
      type: object
      properties:
        classifierCode:
          $ref: '#/components/schemas/classifierCode'
        classifierName:
          type: string
          maxLength: 255
          minLength: 0
          description: |
            Classifier name.
          example: 'ABU'
        classifierValue:
          $ref: '#/components/schemas/classifierValue'
        classifierValueName:
          type: string
          maxLength: 255
          minLength: 0
          description: |
            Classifier value name.
          example: 'Yes'
        status:
          type: string
          maxLength: 50
          minLength: 0
          description: |
            Classifier status. Shows whether the classifier value is currently active or not.

            | **Possible values** 	|
            |---------------------	|
            | Active              	|
            | Inactive            	|
            | Closed              	|
          example: 'Active'
    CvcVerificationResult:
      type: object
      required:
        - verificationResult
      properties:
        verificationResult:
          type: string
          maxLength: 50
          minLength: 0
          description: |
            Verification results.

            | **Possible values** 	|
            |---------------------	|
            | CVC2_CORRECT        	|
            | CVC2_NOT_CORRECT    	|
          example: 'CVC2_CORRECT'
    CvcVerification:
      type: object
      required:
        - cardVerificationCode
        - cardExpiryDate
      properties:
        cardExpiryDate:
          $ref: '#/components/schemas/cardExpiryDate'
        cardVerificationCode:
          type: string
          maxLength: 4
          minLength: 1
          description: |
            Card Verification Code 2 (CVC2). Other names: Card Security Code (CSC), Card Verification Value 2 (CVV2).
          example: '347'
    PinVerification:
      type: object
      required:
        - cardExpiryDate
        - pinBlock
      properties:
        cardExpiryDate:
          $ref: '#/components/schemas/cardExpiryDate'
        cardSequenceNumber:
          $ref: '#/components/schemas/plasticSequenceNumber'
        pinBlock:
          type: string
          maxLength: 2048
          minLength: 1
          description: |
            PIN block in encrypted form.
            The Issuer is allowed to use only the following formats of the PIN block:
              * ISO-0 format
              * ISO-1 format

            If the PIN block is encrypted with asymmetric encryption using a public RSA key then:
              * Key-Index field must be provided
              * MP must configure in API the ISO format used by the Issuer.

            If the PIN block is encrypted with symmetric encryption using ZPK (Zone Pin Key) then:
              * Key-Index field shouldn't be provided
              * only ISO-0 format is allowed.
          example: '69DF3BAA5CAF165A940FC1F8AE68573B8AF93F5EDB20E208953E87CC50C19F0BB11A448AE76FA87A8940EE290FEBC2518DDAAB85BF4AA393FAE060F4CD30CC73AAFF3755680E59FC59BF8D2303B7990C1EC648A0D24D66D57DAB0147434B54955FEA38890C1AFDE6C60EE6D9174BC567D151669576D0395A1B235AF4CD7C581EF238FD26E1DF53085B09DDA9A81EE9DA02D7C7C9E0C266B60C7E9BAC046DCF704EC6CA31486CF6B562C28D47CD6ED124CAE28D3A2E590CFBAA90604090F601B16423E375D6CC01FAC5E0125F7BCC735ED53F88CB7D34FDEFBB19A0EE09F156E337150CE96B2A16419D0F0981CCE44EC8A946CEA69A238AA04EC46FDFFE91A03D'
    PinVerificationResult:
      type: object
      required:
        - verificationResult
      properties:
        verificationResult:
          type: string
          maxLength: 50
          minLength: 0
          description: |
            Verification result.

            | **Possible values** 	|
            |---------------------	|
            | PIN_CORRECT         	|
            | PIN_NOT_CORRECT     	|
            | VERIFICATION_ERROR  	|
          example: 'PIN_CORRECT'
    PinCreation:
      type: object
      required:
        - newPinBlock
        - cardExpiryDate
      properties:
        cardExpiryDate:
          $ref: '#/components/schemas/cardExpiryDate'
        cardSequenceNumber:
          $ref: '#/components/schemas/plasticSequenceNumber'
        newPinBlock:
          type: string
          maxLength: 2048
          minLength: 1
          description: |
            PIN block in encrypted form.
            The Issuer is allowed to use only the following formats of the PIN block:
              * ISO-0 format
              * ISO-1 format

            If the PIN block is encrypted with asymmetric encryption using a public RSA key, then:
              * `Key-Index` field must be provided
              * The MP must configure in an API configuration the ISO format used by the Issuer.

            If the PIN block is encrypted with symmetric encryption using a ZPK (Zone Pin Key), then:
              * The `Key-Index` field should not be provided.
              * Only the ISO-0 format is allowed.
          example: '69DF3BAA5CAF165A940FC1F8AE68573B8AF93F5EDB20E208953E87CC50C19F0BB11A448AE76FA87A8940EE290FEBC2518DDAAB85BF4AA393FAE060F4CD30CC73AAFF3755680E59FC59BF8D2303B7990C1EC648A0D24D66D57DAB0147434B54955FEA38890C1AFDE6C60EE6D9174BC567D151669576D0395A1B235AF4CD7C581EF238FD26E1DF53085B09DDA9A81EE9DA02D7C7C9E0C266B60C7E9BAC046DCF704EC6CA31486CF6B562C28D47CD6ED124CAE28D3A2E590CFBAA90604090F601B16423E375D6CC01FAC5E0125F7BCC735ED53F88CB7D34FDEFBB19A0EE09F156E337150CE96B2A16419D0F0981CCE44EC8A946CEA69A238AA04EC46FDFFE91A03D'
    ParameterModification:
      type: object
      required:
        - parameterValue
      properties:
        parameterValue:
          $ref: '#/components/schemas/parameterValue'
    ContractParameters:
      required:
        - contractParameters
      type: object
      properties:
        contractParameters:
          description: |
            List of `ContractParameter`
          type: array
          items:
            $ref: '#/components/schemas/ContractParameter'
    ContractParameter:
      type: object
      required:
        - parameterCode
      properties:
        parameterCode:
          type: string
          maxLength: 32
          minLength: 1
          description: |
            Contract parameter code.
          example: 'MTP_CALC_RULE'
        parameterName:
          type: string
          maxLength: 255
          minLength: 0
          description: |
            Contract parameter name.
          example: 'MTP Calculation rule'
        parameterValue:
          type: string
          maxLength: 3900
          minLength: 0
          description: |
            Contract parameter value.
          example: '45'
    ChargeFee:
      type: object
      required:
        - feeTypeId
        - uniqueReferenceNumber
      properties:
        amount:
          type: number
          maximum: 1E+18
          exclusiveMaximum: true
          minimum: 0
          exclusiveMinimum: true
          description: |
            Amount to charge a fee. If the field is not passed in the request, the amount is taken from the tariff level.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 1200.00
        currency:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Transaction currency (format according to ISO 4217, alphanumeric code).
          example: 'EUR'
        feeTypeId:
          type: string
          maxLength: 32
          minLength: 1
          description: |
            Identifier of the fee type in the MP's CMS system.
          example: 'MB_1'
        postingDate:
          type: string
          format: date
          description: |
            Posting date (YYYY-MM-DD format). If empty, current banking date will be used.
            If future date, fee record will stay in `Waiting` status and will be posted only when banking date reaches defined `postingDate`. Past date not recommended.
          example: '2031-06-25'
        uniqueReferenceNumber:
          type: string
          maxLength: 32
          minLength: 0
          description: |
            Unique reference number for fee transaction record.
            If filled system will check the uniqueness of this value. It will not be possible to create two records with the same value.
            Exported as SRN (Source Reference Number).
          example: '122357012766'
    Transactions:
      required:
        - transactions
        - count
        - offset
        - total
        - limit
      type: object
      properties:
        count:
          $ref: '#/components/schemas/paginationCount'
        limit:
          $ref: '#/components/schemas/paginationLimit'
        offset:
          $ref: '#/components/schemas/paginationOffset'
        total:
          $ref: '#/components/schemas/paginationTotal'
        transactions:
          type: array
          description: |
            List of `Transaction`.
          items:
            $ref: '#/components/schemas/Transaction'
    Transaction:
      type: object
      properties:
        accountCurrency:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Currency of account which was debited/credited for base amount and fee amount. (format according to ISO 4217, alphanumeric code).
          example: 'EUR'
        accountCurrencyNumericCode:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Currency of account which was debited/credited for base amount and fee amount. (format according to ISO 4217, numeric code).
          example: '978'
        arn:
          type: string
          maxLength: 32
          minLength: 0
          description: |
            Acquirer Reference Number.
          example: '06116638346121300000317'
        authorizationCode:
          $ref: '#/components/schemas/authorizationCode'
        authorized:
          type: boolean
          description: |
            Determines whether the transaction was authorized.
          example: true
        authorizationId:
          type: integer
          format: int64
          maximum: 999999999999999999
          minimum: 1
          description: |
            Unique identifier of the authorization document record in the MP's CMS database.
          example: 3177523
        baseAmount:
          type: number
          maximum: 1000000000000000000
          exclusiveMaximum: true
          minimum: -1000000000000000000
          exclusiveMinimum: true
          description: |
            Amount which contract is debited/credited for, not including fee amount.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 1567.23
        customTransactionData:
          description: |
            List of `TransactionCustomData`.
          type: array
          items:
            $ref: '#/components/schemas/TransactionCustomData'
        customTransactionCondition:
          type: string
          maxLength: 3900
          minLength: 0
          description: |
            Custom Transaction Condition Code.
          example: 'ATMC'
        customTransactionTypeCode:
          type: string
          maxLength: 32
          minLength: 0
          description: |
            Custom transaction type code.
          example: 'IBF'
        feeAmount:
          type: number
          maximum: 1000000000000000000
          exclusiveMaximum: true
          minimum: -1000000000000000000
          exclusiveMinimum: true
          description: |
            Fee amount for which the contract is debited for, associated with the transaction.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 910.18
        feeDescription:
          type: string
          maxLength: 3900
          minLength: 0
          description: |
            Description of fees included in the total `feeAmount`.
            Final format of the field depends on the product setup. Typical presentation format: [`feeCode` `feeAmount` `feeCurrency`], [`feeCode` `feeAmount` `feeCurrency`]
          example: '2.00 (EUR)'
        financialDocumentId:
          type: integer
          format: int64
          maximum: 999999999999999999
          minimum: 1
          description: |
            Unique identifier of the financial document record in the MP's CMS database.
          example: 1254151
        fxRate:
          type: string
          maxLength: 3900
          minLength: 0
          description: |
            Description of FX Rates used in the transaction. It shows details related to currency conversion applied during the transaction posting.
            The format varies on several factors, first of all, whether this is a cross-rate or not.
              * In case of '1 step conversion (direct)':
                [<FX rate type>:] <FX rate> (<From currency> -> <To currency>)
              * For '2-step conversion (via intermediate currency)':
                [<FX rate type>:] <FX rate1> (<From currency1> -> <To currency1>); <FX rate2> (<From currency2> -> <To currency3>)
              * In case of cross-rate ('2-steps conversion (with no intermediate currency)'):
                [<FX rate type>:] <FX rate> (<From currency> -> <To currency>) (cross rate)

            Examples:
              * 0.8 (USD -> EUR)
              * PS Rate: 0.801 (EUR -> GBP)
              * PS Rate: 0.8009 (EUR -> GBP)
              * PS Rate: 0.832468 (USD -> EUR); 1.5 (EUR -> GBP)
          example: 'PS Rate: 0.203 (PLN -> EUR)'
        installmentChainId:
          $ref: '#/components/schemas/installmentChainId'
        installmentPlanStatus:
          $ref: '#/components/schemas/installmentPlanStatus'
        mcc:
          $ref: '#/components/schemas/mcc'
        mccDescription:
          $ref: '#/components/schemas/mccDescription'
        merchantCountry:
          $ref: '#/components/schemas/merchantCountry'
        merchantLocation:
          $ref: '#/components/schemas/merchantLocation'
        merchantName:
          $ref: '#/components/schemas/merchantName'
        postingDate:
          $ref: '#/components/schemas/postingDate'
        responseCode:
          $ref: '#/components/schemas/responseCode'
        responseCodeDescription:
          $ref: '#/components/schemas/responseCodeDescription'
        rrn:
          $ref: '#/components/schemas/rrn'
        serviceClassCode:
          $ref: '#/components/schemas/serviceClassCode'
        settlementAmount:
          type: number
          maximum: 1000000000000000000
          exclusiveMaximum: true
          minimum: -1000000000000000000
          exclusiveMinimum: true
          description: |
            Settlement Amount:
            - for transactions from Payment Scheme contains amount which Payment Scheme sent to debit/credit card for;
            - for on-us transactions contains the amount which the CMS is debiting/crediting on the contract;
            - for internal transactions (like due normalizations or interest accruals) has the same value as the transaction amount.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 128
        settlementCurrency:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Settlement currency (format according to ISO 4217, alphanumeric code).
          example: 'EUR'
        settlementCurrencyNumericCode:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Settlement currency (format according to ISO 4217, numeric code).
          example: '978'
        sourceContractCbsNumber:
          $ref: '#/components/schemas/cbsNumber'
        sourceContractId:
          $ref: '#/components/schemas/sourceContractId'
        sourceContractNumber:
          $ref: '#/components/schemas/sourceContractNumber'
        srn:
          $ref: '#/components/schemas/srn'
        targetContractCbsNumber:
          $ref: '#/components/schemas/cbsNumber'
        targetContractId:
          $ref: '#/components/schemas/targetContractId'
        targetContractNumber:
          $ref: '#/components/schemas/targetContractNumber'
        tokenNumberSafe:
          type: string
          description: |
            Masked token number.
          maxLength: 255
          minLength: 0
          example: '161212______0128'
        transactionAmount:
          type: number
          maximum: 1000000000000000000
          exclusiveMaximum: true
          minimum: -1000000000000000000
          exclusiveMinimum: true
          description: |
            Transaction amount.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 471.90
        transactionCurrency:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Transaction currency (format according to ISO 4217, alphanumeric code).
          example: 'EUR'
        transactionCurrencyNumericCode:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Transaction currency (format according to ISO 4217, numeric code).
          example: '978'
        transactionDate:
          type: string
          format: date-time
          description: |
            Transaction date. Timestamp (format: YYYY-MM-DDThh:mm:ssZ).
          example: '2031-06-25T12:00:00Z'
        transactionDescription:
          type: string
          maxLength: 255
          minLength: 0
          description: |
            Description of the transaction from the CMS system.
          example: 'Fee Posting'
        transactionId:
          $ref: '#/components/schemas/transactionId'
        transactionStatus:
          type: string
          maxLength: 255
          minLength: 0
          description: |
            Transaction status. May contains the following values:

            | **Possible values**    	| **Description**                                                     	|
            |------------------------	|---------------------------------------------------------------------	|
            | Funds blocked          	| Funds were blocked as a result of the authorization                 	|
            | Authorisation reversed 	| Funds were unblocked as a result of a reverse authorization         	|
            | Authorisation expired  	| Funds were unblocked as financial documents have not been processed 	|
            | Processed              	| The document has been successfully posted                           	|
            | Reversed               	| Reversal document was successfully posted                           	|

            In case of an unsuccessful transaction, field will contain `responseCodeDescription`.
          example: 'Reversed'
        transactionType:
          $ref: '#/components/schemas/transactionType'
        transactionTypeCode:
          $ref: '#/components/schemas/transactionTypeCode'
        walletId:
          type: string
          description: |
            Wallet identifier.

             | **Sample values**   | **Description**                                                                                   |
             |-------------------  |-------------------------------------------------------------------------------------------------- |
             | 103                 | Apple Pay                                                                                         |
             | 216                 | Android Pay                                                                                       |
             | 217                 | Samsung Pay                                                                                       |
             | 327                 | Remote Commerce Programs (e.g. MDES for Merchants, Mastercard Secure Card on File, Click to Pay)  |
             | 337                 | Garmin Pay                                                                                        |

             Other values possible.
          maxLength: 255
          minLength: 0
          example: '103'
    CvcSearchCriteria:
      type: object
      required:
        - cardExpiryDate
      properties:
        cardExpiryDate:
          $ref: '#/components/schemas/cardExpiryDate'
    Cvc:
      type: object
      properties:
        cardVerificationCode:
          type: string
          maxLength: 3
          minLength: 1
          description: |
            Card Verification Code 2 (CVC2), known also as a Card Security Code (CSC) or a Card Verification Value 2 (CVV2).

            Field is returned if `Customer-Public-Rsa-Key` header is empty.
          example: '347'
        encryptedCardVerificationCode:
          type: string
          maxLength: 2048
          minLength: 1
          description: |
            Card verification code encrypted with the `Customer-Public-Rsa-Key`.

            Field is returned if `Customer-Public-Rsa-Key` header is not empty.
          example: '87D039805B7EDBF7CFD3E72658355A3855C0CB6F1456D6B10498AD63B06904D0282ECCBB5B6A59775C78B9373C13BF53629096451CD3B66501CF198D48A755AC2EC8EC2F204A1E0C29994E14A816300A75791743B82C3C8884EFF363A8CF6D64BF88CD507ADEEA2112734FDAD0E73588FE3CE3D89469A819A9BE807D2C87BCEC3F868DAFF4B27CD213A9E1D60FF8A05CD0EB2EA551D75A38650E926BB79283FBA469642C88FEE332B02C58860EFEF41DB0D2866DE44C8F89573EB2B7C99EBAE994E0AF16F8C8E9839DFCA4C21D2CDB08B8D35456C46113546B0EE3DDF1F329A7939E6EF77C3BD213A02BB47F4DAFD74314AAE020FA0C390E908658A669517A7A'
    TransactionFees:
      required:
        - transactionFees
      type: object
      properties:
        transactionFees:
          type: array
          description: |
            List of `TransactionFee`.
          items:
            $ref: '#/components/schemas/TransactionFee'
    TransactionFee:
      required:
        - feeCode
        - feeId
        - transactionId
      type: object
      properties:
        amount:
          type: number
          maximum: 1E+15
          exclusiveMaximum: true
          minimum: -1E+15
          exclusiveMinimum: true
          description: |
            Fee amount.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 199.90
        currency:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Currency of the fee (format according to ISO 4217, alphanumeric code).
          example: 'EUR'
        currencyNumericCode:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Currency of the fee (format according to ISO 4217, numeric code).
          example: '978'
        feeCode:
          type: string
          maxLength: 32
          minLength: 1
          description: |
            Fee code of the fee which should be applied for the transaction. The fee code which can be used must be configured in the MP's CMS.
          example: 'FX_FEE'
        feeId:
          type: integer
          format: int64
          maximum: 999999999999999999
          minimum: 1
          description: |
            Fee record id from the CMS system.
          example: 84650468
        feeName:
          type: string
          maxLength: 255
          minLength: 0
          description: |
            Name of the fee from the CMS system.
          example: 'Retail (EuroCard Acq)'
        transactionId:
          type: integer
          format: int64
          maximum: 999999999999999999
          minimum: 1
          description: |
            Transaction record id to which the given fee was generated.
          example: 900001
    OnlinePinAttemptsClearance:
      type: object
      required:
        - cleared
      properties:
        cleared:
          type: boolean
          description: |
            This field must be always `true`. Flag informing if Online PIN Try Counter should be cleared.
          example: true
    OnlinePinAttemptsClearanceForClient:
      type: object
      required:
        - clearAttemptsOnClientCards
      properties:
        clearAttemptsOnClientCards:
          type: boolean
          description: |
            This field must be always `true`. Flag determines if the reset of PIN attempts will happen only on the client or also on all client cards.
          example: true
    TransactionDocuments:
      required:
        - transactionDocuments
        - count
        - offset
        - total
        - limit
      type: object
      properties:
        count:
          $ref: '#/components/schemas/paginationCount'
        limit:
          $ref: '#/components/schemas/paginationLimit'
        offset:
          $ref: '#/components/schemas/paginationOffset'
        total:
          $ref: '#/components/schemas/paginationTotal'
        transactionDocuments:
          type: array
          description: |
            List of `TransactionDocument`.
          items:
            $ref: '#/components/schemas/TransactionDocument'
    TransactionDocument:
      type: object
      required:
        - transactionBaseInfo
        - transactionTypeInfo
        - transactionIdentifiers
      properties:
        transactionBaseInfo:
          $ref: '#/components/schemas/TransactionBaseInfo'
        transactionTypeInfo:
          $ref: '#/components/schemas/TransactionTypeInfo'
        transactionIdentifiers:
          $ref: '#/components/schemas/TransactionIdentifiers'
        transactionAddInfo:
          $ref: '#/components/schemas/TransactionAddInfo'
        transactionMerchantInfo:
          $ref: '#/components/schemas/TransactionMerchantInfo'
        transactionValues:
          $ref: '#/components/schemas/TransactionValues'
    TransactionAddInfo:
      type: object
      properties:
        addInfo:
          type: string
          maxLength: 3900
          minLength: 0
          description: |
            Additional transaction data (TAG=VALUE; format)
          example: 'PSCR=Y0;CVR=204000044000'
        attributes1:
          type: string
          maxLength: 3900
          minLength: 0
          description: |
            Transaction attributes. Attributes which determine the value of `transactionCondition` field.
          example: '67;,ATM,TERM_UNATT,TERM,TERM_CHIP,TERM_KEY_ENTRY,AUTHENTICATED;'
        attributes2:
          type: string
          maxLength: 3900
          minLength: 0
          description: |
            Secondary transaction attributes.
          example: 'CARD_CHIP,CHIP_SVC,READ_CHIP,DATA_TRACK,DATA_CHIP'
        transactionCondition:
          type: string
          maxLength: 50
          minLength: 0
          description: |
            Transaction conditions. The transaction condition value is specified at financial document (transaction) record creation.
            MP's CMS creates the value based on the transaction message received from the device.
            The type of transaction condition depends on the executed transaction type.
            Transaction conditions define the document processing method.
          example: 'ATMC'
    TransactionBaseInfo:
      type: object
      properties:
        cardExpiryDate:
          $ref: '#/components/schemas/cardExpiryDate'
        cardSequenceNumber:
          $ref: '#/components/schemas/plasticSequenceNumber'
        postingDate:
          $ref: '#/components/schemas/postingDate'
        postingStatus:
          type: string
          maxLength: 15
          minLength: 1
          description: |
            Document processing status.

            | **Possible values** 	| **Description**                                                                                                                                                                                                                                                                                                                                 	|
            |---------------------	|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	|
            | Closed              	| Reversal (document) has been successfully posted.                                                                                                                                                                                                                                                                                               	|
            | Decline             	| Document was rejected when it was processed.                                                                                                                                                                                                                                                                                                    	|
            | Decline Service     	| Document has been posted with the dispute contract.                                                                                                                                                                                                                                                                                             	|
            | From Stand-In       	| Obsolete status.                                                                                                                                                                                                                                                                                                                                	|
            | InActive            	| Document status after its reversal document was successfully posted, or authorization document status after its financial document was successfully posted.                                                                                                                                                                                     	|
            | Posted              	| Document has been successfully posted.                                                                                                                                                                                                                                                                                                          	|
            | PostPone            	| Status used for documents in specific chains on acquiring side.                                                                                                                                                                                                                                                                                 	|
            | Processed           	| Intermediary status of a document during processing. This status is often given for example, to a financial document in the "When available" category during the processing stage if the required amount is not available on contract accounts.                                                                                                 	|
            | Rejected            	| Document was rejected when it was loaded (for authorization documents).                                                                                                                                                                                                                                                                         	|
            | Suspended           	| Authorization document is waiting to be posted.                                                                                                                                                                                                                                                                                                 	|
            | System              	| Status assigned to Product Inspector technical docs.                                                                                                                                                                                                                                                                                            	|
            | Under Workflow      	| The document is being processed in the Workflow Management module. This status is assigned to documents when it is necessary to stop standard processing of documents for additional checks (manual review). For example, when manually entering a batch of documents, or if the corresponding documents were not found during reconciliation.” 	|
            | Waiting             	| Document is waiting.                                                                                                                                                                                                                                                                                                                            	|
          example: 'Decline Service'
        responseCode:
          $ref: '#/components/schemas/responseCode'
        responseCodeDescription:
          $ref: '#/components/schemas/responseCodeDescription'
        settlementDate:
          type: string
          format: date
          description: |
            Date when the transaction amount was converted from the settlement currency of the source bank into the settlement currency of the target bank (YYYY-MM-DD format).
          example: '2031-06-25'
        sourceContractId:
          $ref: '#/components/schemas/sourceContractId'
        sourceContractNumber:
          $ref: '#/components/schemas/sourceContractNumber'
        targetContractId:
          $ref: '#/components/schemas/targetContractId'
        targetContractNumber:
          $ref: '#/components/schemas/targetContractNumber'
        transactionDate:
          type: string
          format: date-time
          description: |
            Transaction date and time. (format: YYYY-MM-DDThh:mm:ssZ)
          example: '2031-06-25T12:00:00Z'
    TransactionIdentifiers:
      type: object
      properties:
        arn:
          type: string
          maxLength: 32
          minLength: 0
          description: |
            ARN - Acquiring Reference Number.
          example: '06116638346121300000317'
        authorizationCode:
          type: string
          maxLength: 32
          minLength: 0
          description: |
            Original authorization number which, in case of annulation or devolution transaction, allows identifying the original transaction.
          example: '981561'
        originalTransactionDocumentId:
          type: integer
          format: int64
          maximum: 999999999999999999
          minimum: 1
          description: |
            Identifier of the original transaction document in a document chain.
          example: 12479
        previousTransactionDocumentId:
          type: integer
          format: int64
          maximum: 999999999999999999
          minimum: 1
          description: |
            Identifier of the previous transaction document in a document chain.
          example: 8494
        paymentSchemeReferenceNumber:
          type: string
          maxLength: 255
          minLength: 0
          description: |
            Payment scheme reference number.
          example: '17167'
        rrn:
          $ref: '#/components/schemas/rrn'
        srn:
          $ref: '#/components/schemas/srn'
        transactionId:
          $ref: '#/components/schemas/transactionId'
    TransactionMerchantInfo:
      type: object
      properties:
        mcc:
          $ref: '#/components/schemas/mcc'
        mccDescription:
          $ref: '#/components/schemas/mccDescription'
        merchantCountry:
          $ref: '#/components/schemas/merchantCountry'
        merchantLocation:
          $ref: '#/components/schemas/merchantLocation'
        merchantName:
          $ref: '#/components/schemas/merchantName'
    TransactionTypeInfo:
      type: object
      properties:
        direction:
          type: string
          maxLength: 32
          minLength: 0
          description: |
            Transaction type's direction.

            | **Possible values** 	|
            |---------------------	|
            | Credit              	|
            | Debit               	|
            | None                	|
          example: 'Credit'
        requestCategory:
          type: string
          maxLength: 11
          minLength: 1
          description: |
            Transaction document request category name.

            | **Possible values** 	|
            |---------------------	|
            | Adjustment          	|
            | Advice              	|
            | Part Advice         	|
            | Request             	|
            | Reversal            	|
          example: 'Request'
        serviceClassCode:
          $ref: '#/components/schemas/serviceClassCode'
        sourceCategory:
          type: string
          maxLength: 256
          minLength: 1
          description: |
            Source contract category.

            | **Possible values** 	|
            |---------------------	|
            | Account             	|
            | Card                	|
            | Device              	|
          example: 'Device'
        sourceCode:
          type: string
          maxLength: 32
          minLength: 0
          description: |
            Transaction message code for incoming documents.
          example: 'CHANGE_PIN'
        targetCategory:
          type: string
          maxLength: 7
          minLength: 1
          description: |
            Target contract category.

            | **Possible values** 	|
            |---------------------	|
            | Account             	|
            | Card                	|
            | Device              	|
          example: 'Account'
        transactionDocumentCategory:
          type: string
          maxLength: 256
          minLength: 1
          description: |
            Transaction document category.

            | **Possible values** 	|
            |---------------------	|
            | Auth                	|
            | Fin                 	|
            | DataCapture         	|
            | PreAuth             	|
            | Transit Auth        	|
            | Transit Preauth     	|
            | Auth Check          	|
            | Auth Check Transit  	|
            | PostAuth            	|
          example: 'PreAuth'
        transactionType:
          $ref: '#/components/schemas/transactionType'
        transactionTypeCode:
          $ref: '#/components/schemas/transactionTypeCode'
    TransactionValues:
      type: object
      properties:
        interchangeFee:
          type: number
          maximum: 1000000000000000000
          exclusiveMaximum: true
          minimum: -1000000000000000000
          exclusiveMinimum: true
          description: |
            Amount of interchange fee.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 49.90
        interchangeFeeCurrency:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Interchange fee currency (format according to ISO 4217, alphanumeric code).
          example: 'EUR'
        interchangeFeeCurrencyNumericCode:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Interchange fee currency (format according to ISO 4217, numeric code).
          example: '978'
        reconciliationAmount:
          type: number
          maximum: 1000000000000000000
          exclusiveMaximum: true
          minimum: -1000000000000000000
          exclusiveMinimum: true
          description: |
            Transaction amount in the currency specified in the `reconciliationCurrency` field.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 209.90
        reconciliationCurrency:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Currency used by the source bank to present transaction data to the payment scheme (format according to ISO 4217, alphanumeric code).
          example: 'EUR'
        reconciliationCurrencyNumericCode:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Currency code defining currency of the amount in the field `reconciliationAmount` (format according to ISO 4217, numeric code).
          example: '978'
        settlementAmount:
          type: number
          maximum: 1000000000000000000
          exclusiveMaximum: true
          minimum: -1000000000000000000
          exclusiveMinimum: true
          description: |
            Transaction settlement amount if present or otherwise transaction cardholder billing amount.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 140.90
        settlementCurrency:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Currency code defining currency of the amount in the field `settlementAmount` (format according to ISO 4217, alphanumeric code).
          example: 'EUR'
        settlementCurrencyNumericCode:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Currency code defining currency of the amount in the field `settlementAmount` (format according to ISO 4217, numeric code).
          example: '978'
        sourceAmount:
          type: number
          maximum: 1000000000000000000
          exclusiveMaximum: true
          minimum: -1000000000000000000
          exclusiveMinimum: true
          description: |
            Amount of transaction in original currency.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 130.90
        sourceCurrency:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Currency code defining currency of the amount in the field `sourceAmount` (format according to ISO 4217, alphanumeric code).
          example: 'EUR'
        sourceCurrencyNumericCode:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Currency code defining currency of the amount in the field `sourceAmount` (format according to ISO 4217, numeric code).
          example: '978'
        transactionFeeAmount:
          type: number
          maximum: 1000000000000000000
          exclusiveMaximum: true
          minimum: -1000000000000000000
          exclusiveMinimum: true
          description: |
            Amount of any additional fee transaction related in account currency. Fees applied by the MP.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 123.10
        transactionFeeCurrency:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Currency code defining currency of the fee in the field `transactionFeeAmount` (format according to ISO 4217, alphanumeric code).
          example: 'EUR'
        transactionFeeCurrencyNumericCode:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Currency code defining currency of the fee in the field `transactionFeeAmount` (format according to ISO 4217, numeric code).
          example: '978'
    TransactionContractDebit:
      type: object
      required:
        - transactionTypeCode
        - amount
        - currency
        - description
      properties:
        amount:
          type: number
          maximum: 1000000000000000000
          exclusiveMaximum: true
          minimum: 0
          exclusiveMinimum: true
          description: |
            Transaction amount to be deducted from the contract’s balance.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.

            Note: For some specific `transactionTypeCode` values (for example, `APSF` - paper statement fee) transaction amount is taken from the tariff level configured in the CMS (the `amount` value from the request is ignored, and cannot override the amount defined in the CMS for the tariff).
          example: 1254.00
        currency:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Transaction currency (format according to ISO 4217, alphanumeric code).
          example: 'EUR'
        customData:
          description: |
            An array that allows passing additional information to the created transaction record.
            Maximum length of all `tagName` and `tagValue` amounts to 255 characters.
          type: array
          items:
            $ref: '#/components/schemas/TransactionCustomData'
          maxItems: 50
          minItems: 0
        description:
          type: string
          maxLength: 255
          minLength: 0
          description: |
            Transaction description.
          example: 'Payment From Client Contract'
        feeCode:
          type: string
          maxLength: 32
          minLength: 1
          description: |
            Fee code of the fee which should be applied for the transaction. The fee code which can be used must be configured in the MP's CMS.
          example: 'FX_FEE'
        postingDate:
          type: string
          format: date
          description: |
            Transaction posting date (YYYY-MM-DD format). If not filled the sysdate will be placed in the field.
          example: '2031-06-25'
        transactionTypeCode:
          type: string
          maxLength: 32
          minLength: 1
          description: |
            Transaction type code. Transaction type code which can be used must be configured in the MP's CMS.
          example: 'FP'
        transactionTypeExtension:
          type: string
          maxLength: 255
          minLength: 0
          description: |
            Transaction type extensions make it possible to more exactly determine the service that should be used to process a transaction.
            Transaction type extension is defined on transaction type configuration.
          example: 'Ext'
        uniqueReferenceNumber:
          type: string
          maxLength: 32
          minLength: 0
          description: |
            Unique reference number for the transaction. If filled system will check the uniqueness of this value.
            It will not be possible to create two records with the same value. Exported as SRN (Source Reference Number).
          example: '122357012766'
    UsageLimitModification:
      type: object
      properties:
        activityPeriodStartDate:
          type: string
          format: date-time
          description: |
            Effective date and time of the usage limit. (YYYY-MM-DDThh:mm:ssZ format)
          example: '2031-06-25T12:51:30Z'
        activityPeriodEndDate:
          type: string
          format: date-time
          description: |
            Expiration date and time of the usage limit. Date must be greater or equal to `activityPeriodStartDate`. (YYYY-MM-DDThh:mm:ssZ format)
          example: '2031-07-25T12:51:30Z'
        addInfo:
          type: string
          maxLength: 3900
          minLength: 0
          description: |
            Additional information (TAG=VALUE; format). Can be used to pass additional parameters for usage limit definition.

            *Disclaimer: Possible usage of additional information should be agreed upon with the MP representative for each additional parameter (tag) passed to the CMS system.*
          example: 'EXC_SIC_LIST=0004;'
        currency:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            The currency of the maximum total amount of all transactions (`maxAmount`) and of a single transaction (`maxSingleAmount`) (format according to ISO 4217, alphanumeric code).

            **Conditional mandatory field** - required if `maxAmount`, `maxSingleAmount` are passed.
          example: 'EUR'
        maxAmount:
          type: number
          maximum: 1000000000000000
          exclusiveMaximum: true
          minimum: -1000000000000000
          exclusiveMinimum: true
          description: |
            Maximum transaction amount permitted for the specific limit period. Zero amount indicates no restrictions.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 1851.10
        maxNumber:
          type: integer
          format: int64
          maximum: 999999999
          minimum: 0
          description: |
            Maximum number of transactions permitted for the specific limit period.
          example: 10
        maxPercent:
          type: number
          maximum: 10000000
          exclusiveMaximum: true
          minimum: -10000000
          exclusiveMinimum: true
          description: |
            This field (if it is filled in) is used in calculating threshold values for the amount or number of transactions, depending on the value of the Algorithm field in the CMS.
            For example, for algorithms related to calculating the average or total value for the amount of transactions, the limit is calculated as a set percentage of the average or total calculated amount of transactions.
            If the algorithm is related to calculating the average or the total number of transactions, a set percentage is applied to the calculated number of transactions.
            For the 'Fixed' algorithm, a percentage is only applied to the `maxAmount` amount.
            I.e. if this field is filled in, the value received with it redefines the value of the `maxAmount` or `maxNumber` field (depending on the algorithm).

            For a specific balance type, this field determines the maximum permissible total transaction amount for a set period, as a percentage of the available funds (amount available) of the corresponding balance type.
            If the balance type for a limiter is not specified, the maximum permissible transaction amount is calculated as a percentage of the contract credit limit.

            A null value in this field means that no limits are set.

            The field can contain values up to 2 decimal places. A dot is used as a decimal separator.
          example: 4
        maxSingleAmount:
          type: number
          maximum: 1000000000000000
          exclusiveMaximum: true
          minimum: -1000000000000000
          exclusiveMinimum: true
          description: |
            The maximum amount permitted for one transaction. Zero amount indicates no restrictions.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 1000.00
    UsageLimitOriginalValue:
      type: object
      required:
        - restore
      properties:
        restore:
          type: boolean
          description: |
            This field must be always `true`. This is an action that restores usage limit parameters specified in the CMS (Service Package).
          example: true
    UsageLimitResetting:
      type: object
      required:
        - reset
      properties:
        reset:
          type: boolean
          description: |
            This field must be always `true`. This is an action that resets counters for a usage limit.
          example: true
    UsageLimits:
      required:
        - usageLimits
      type: object
      properties:
        usageLimits:
          type: array
          description: |
            List of `UsageLimit`
          items:
            $ref: '#/components/schemas/UsageLimit'
    UsageLimit:
      required:
        - status
        - usageLimitCode
      type: object
      properties:
        activityPeriodStartDate:
          type: string
          format: date-time
          description: |
            Effective date and time of the usage limit (YYYY-MM-DDThh:mm:ssZ format).
          example: '2031-06-25T12:51:30Z'
        activityPeriodEndDate:
          type: string
          format: date-time
          description: |
            Expiration date and time of the usage limit (YYYY-MM-DDThh:mm:ssZ format).
            Date must be greater or equal to `activityPeriodStartDateDate`.
          example: '2031-07-25T12:51:30Z'
        addInfo:
          type: string
          maxLength: 3900
          minLength: 0
          description: |
            Additional Information (TAG=VALUE; format).
          example: 'EXC_SIC_LIST=0004;'
        currency:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            The currency of the maximum total amount of all transactions (`maxAmount`) and of a single transaction (`maxSingleAmount`) (format according to ISO 4217, alphanumeric code).
          example: 'EUR'
        currencyNumericCode:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            The currency of the maximum total amount of all transactions (`maxAmount`) and of a single transaction (`maxSingleAmount`) (format according to ISO 4217, numeric code).
          example: '978'
        currentUsage:
          $ref: '#/components/schemas/CurrentUsage'
        maxAmount:
          type: number
          maximum: 1E+15
          exclusiveMaximum: true
          minimum: -1E+15
          exclusiveMinimum: true
          description: |
            Maximum transaction amount permitted for the specific limit period. Zero amount indicates no restrictions.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 3000.00
        maxNumber:
          type: integer
          format: int64
          maximum: 999999999
          minimum: 0
          description: |
            Maximum number of transactions permitted for the specific limit period.
          example: 30
        maxPercent:
          type: number
          maximum: 1E+7
          exclusiveMaximum: true
          minimum: -1E+7
          exclusiveMinimum: true
          description: |
            This field (if it is filled in) is used in calculating threshold values for the amount or number of transactions, depending on the value of the Algorithm field.
            For example, for algorithms related to calculating the average or total value for the amount of transactions, the limit is calculated as a set percentage of the average or total calculated amount of transactions.
            If the algorithm is related to calculating the average or total number of transactions, a set percentage is applied to the calculated number of transactions.
            For the 'Fixed' algorithm, a percentage is only applied to the `maxAmount` amount.
            I.e. if this field is filled in, the value received with it redefines the value of the `maxAmount` or `maxNumber` field (depending on the algorithm).
            For a specific balance type, this field determines the maximum permissible total transaction amount for a set period, as a percentage of the available funds (amount available) of the corresponding balance type.
            If the balance type for a limiter is not specified, the maximum permissible transaction amount is calculated as a percentage of the contract credit limit.

            A null value in this field means that no limits are set.

            The field can contain values up to 2 decimal places. A dot is used as a decimal separator.
          example: 10.00
        maxSingleAmount:
          type: number
          maximum: 1E+15
          exclusiveMaximum: true
          minimum: -1E+15
          exclusiveMinimum: true
          description: |
            Maximum amount permitted for one transaction. Zero amount indicates no restrictions.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 500.00
        status:
          type: string
          maxLength: 32
          minLength: 0
          description: |
            Usage limit status.

            | **Possible values** 	|
            |---------------------	|
            | Active              	|
            | Closed              	|
            | Temporarily Active  	|
            | Temporarily Closed  	|
            | Expired             	|
            | Template Closed     	|
            | Service Deactivated 	|
            | Redefined           	|
          example: 'Active'
        usageLimitCode:
          $ref: '#/components/schemas/usageLimitCode'
    CurrentUsage:
      type: object
      properties:
        availableAmount:
          type: number
          maximum: 1E+18
          exclusiveMaximum: true
          minimum: -1E+18
          exclusiveMinimum: true
          description: |
            The current state of limit usage - the amount of transactions to perform.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 1250.6
        availableNumber:
          type: integer
          maximum: 9999999999
          minimum: -9999999999
          description: |
            The current state of limit usage - number of transactions to perform.
          format: int64
          example: 18
        usedAmount:
          type: number
          maximum: 1E+18
          exclusiveMaximum: true
          minimum: -1E+18
          exclusiveMinimum: true
          description: |
            The current state of limit usage - the amount of already performed transactions.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 1749.40
        usedNumber:
          type: integer
          format: int64
          maximum: 9999999999
          minimum: 0
          description: |
            The current state of limit usage - number of already performed transactions.
          example: 12
    UsageLimitStatus:
      required:
        - status
      type: object
      properties:
        activationDate:
          type: string
          format: date-time
          description: |
            Activation date and time of the usage limit (YYYY-MM-DDThh:mm:ssZ format).
          example: '2031-05-18T12:00:00Z'
        deactivationDate:
          type: string
          format: date-time
          description: |
            Deactivation date and time of the usage limit (YYYY-MM-DDThh:mm:ssZ format).
          example: '2031-05-18T12:00:00Z'
        status:
          type: string
          maxLength: 7
          minLength: 1
          description: |
            Status of usage limit.
            Only two actions on usage limit are possible to be set from the external system - Activation and Suspending
              * ACTIVE - will activate the usage limit
              * SUSPEND - will suspend the usage limit
          enum:
            - ACTIVE
            - SUSPEND
          example: 'ACTIVE'
    PublicRsaKeyData:
      required:
        - keyIndex
        - publicRsaKey
      type: object
      properties:
        keyIndex:
          type: string
          maxLength: 16
          minLength: 1
          description: Index of a public RSA key.
          example: A1564386531162
        publicRsaKey:
          type: string
          maxLength: 4096
          minLength: 1
          description: |
            Public RSA key generated by the MP. ASCII/UTF-8 string of characters 0-9,A-F (ASN.1 DER Public hex unpacked to string) or PEM concatenated Base64 without BEGIN and END lines.
            The Issuer should use this key to encrypt sensitive data which requires secure transfer to the MP.
          example: '30820122300D06092A864886F70D01010105000382010F003082010A0282010100A7D079A8769BCD340574E8E6C0A2810C377279E5EA0B422B9132F955860730E7637DFAB0A1C6F117B25E3DB3D2A5A9F2691BBC7E0178ADFD12908C3E6E6D3A77AA26E25A6570FCC423561628879E918DC0C798527318308C70BBE2BC4597B83B96CB3680FE6F8E60D68B465E2B30558712A2D63A544239BE7B5F2A49C82FB3388A22644741A945EC9ACB3F219C3B6826241BE1706EF384100EC83D0D7FAE6CCF4E69E0EE02BF84C21553FA1999A8DB91C4193D1E671D5A22B1876E1DC81F1ED7033F3A26FF62E492A63ADA58AAE248D5E47896592CB9A7023CB8B8700882B4DCBF34C16F7FA00DF4C3931A4612E0E2A09586780E89D28FAAA195C07ADE88286F0203010001'
    ServiceLimitTariff:
      type: object
      required:
        - tariffCode
      properties:
        currency:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Tariff's currency (format according to ISO 4217, alphanumeric code).
          example: 'EUR'
        endDate:
          type: string
          format: date
          description: |
            Tariff's end date (YYYY-MM-DD format).
          example: '2031-06-25'
        floorLimit:
          type: number
          maximum: 1000000000000000
          exclusiveMaximum: true
          minimum: -1000000000000000
          exclusiveMinimum: true
          description: |
            The maximum amount of a transaction that can be made without authorization.

            The field can contain values up to 2 decimal places. A dot is used as a decimal separator.
          example: 30
        minTransactionAmount:
          type: number
          maximum: 1000000000000000
          exclusiveMaximum: true
          minimum: -1000000000000000
          exclusiveMinimum: true
          description: |
            Minimum allowed transaction amount or account balance or minimum threshold value of an Event related to balance type value changes.
            A zero value in the field means that there are no limitations.

            The field can contain values up to 2 decimal places. A dot is used as a decimal separator.
          example: 10
        maxTransactionAmount:
          type: number
          maximum: 1000000000000000
          exclusiveMaximum: true
          minimum: -1000000000000000
          exclusiveMinimum: true
          description: |
            Maximum allowed transaction amount or account balance, or maximum threshold value of an Event related to balance type value changes.
            A zero value in the field means that there are no limitations.

            The field can contain values up to 2 decimal places. A dot is used as a decimal separator.
          example: 200
        startDate:
          type: string
          format: date
          description: |
            Tariff's effective date (YYYY-MM-DD format).

            If the value is not transmitted in the request the local date is used.
          example: '2031-06-25'
        tariffCode:
          type: string
          maxLength: 255
          minLength: 1
          description: |
            Tariff code from the CMS system. Uniquely identify service limit tariff which must be defined in the CMS during the onboarding process.
          example: 'INT_R'
    AccountContractIdentifierSearch:
      required:
        - accountContractIdentifier
        - accountContractIdentifierType
      type: object
      properties:
        accountContractIdentifier:
          type: string
          maxLength: 64
          minLength: 1
          description: |
            This field must contain an identifier value according to the type specified by `accountContractIdentifierType` field (`ACCOUNT_CONTRACT_NUMBER` or `CBS_NUMBER`).
          example: 'CBS83863371812033'
        accountContractIdentifierType:
          type: string
          maxLength: 23
          minLength: 1
          description: |
            Type of account contract identifier, corresponding to the value sent in `accountContractIdentifier` field.

            | **Possible values**      	| **Description**                                                                                                                    	|
            |--------------------------	|------------------------------------------------------------------------------------------------------------------------------------	|
            | CBS_NUMBER               	| Search will be executed based on the CBS Number (Core Banking System Number)                                                       	|
            | ACCOUNT_CONTRACT_NUMBER  	| Search will be executed based on the account contract number assigned by the Issuer during the account creation (`POST /accounts`)  |
          enum:
            - CBS_NUMBER
            - ACCOUNT_CONTRACT_NUMBER
          example: 'CBS_NUMBER'
    CardContractIdentifierSearch:
      required:
        - cardContractIdentifier
        - cardContractIdentifierType
      type: object
      properties:
        cardContractIdentifier:
          type: string
          maxLength: 64
          minLength: 1
          description: |
            This field must contain an identifier value according to the type specified by `cardContractIdentifierType` field (`CARD_CONTRACT_NUMBER` or `CBS_NUMBER`).
          example: 'CBS83863371812034'
        cardContractIdentifierType:
          type: string
          maxLength: 20
          minLength: 1
          description: |
            Type of card contract identifier, corresponding to the value sent in `cardContractIdentifier` field.

            | **Possible values**   	| **Description**                                                                                                              	|
            |-----------------------	|------------------------------------------------------------------------------------------------------------------------------	|
            | CBS_NUMBER            	| Search will be executed based on the CBS Number (Core Banking System Number)                                                 	|
            | CARD_CONTRACT_NUMBER  	| Search will be executed based on the card contract number assigned by the Issuer during the card creation (`POST /cards`)   	|
          enum:
            - CBS_NUMBER
            - CARD_CONTRACT_NUMBER
          example: 'CBS_NUMBER'
    ClientIdentifierSearch:
      required:
        - clientIdentifier
        - clientIdentifierType
      type: object
      properties:
        clientIdentifier:
          type: string
          maxLength: 64
          minLength: 1
          description: |
            This field must contain an identifier value according to the type specified by `clientIdentifierType` field (`clientNumber`, `identificationDocumentNumber`, `socialNumber` or `taxpayerIdentifier`).
          example: '4718181'
        clientIdentifierType:
          type: string
          maxLength: 30
          minLength: 1
          description: |
            Type of client identifier, corresponding to the value sent in clientIdentifier field.

            | **Possible values**            	| **Description**                                                 	|
            |--------------------------------	|-----------------------------------------------------------------	|
            | CLIENT_NUMBER                  	| Search will be executed based on Client Number                  	|
            | IDENTIFICATION_DOCUMENT_NUMBER 	| Search will be executed based on registration Number            	|
            | SOCIAL_NUMBER                  	| Search will be executed based on Social Number                  	|
            | TAXPAYER_IDENTIFIER           	| Search will be executed based on Taxpayer Identification Number 	|
          enum:
            - CLIENT_NUMBER
            - IDENTIFICATION_DOCUMENT_NUMBER
            - SOCIAL_NUMBER
            - TAXPAYER_IDENTIFIER
          example: 'CLIENT_NUMBER'
    fieldSelection:
      type: string
      maxLength: 255
      minLength: 1
      description: |
        Parameter defines a field that will be returned in a response.
      example: 'cardContractNumber'
    AuthenticationMethod:
      required:
        - authenticationTypeCode
      type: object
      properties:
        authenticationParameters:
          type: array
          items:
            $ref: '#/components/schemas/AuthenticationParameter'
          minItems: 0
          description: |
            The list of `AuthenticationParameter`.

            The list can contain only those parameters which are required. The others will be created automatically with the default value (if it is set) or without value.

            To update the parameter value for the authentication method which has already been set to contract it is required to put only those pairs of parameters and values which are to be updated.

            To reset the authentication method parameter value it is required to put only the parameter name to the `authenticationParameter` list.
        authenticationTypeCode:
          $ref: '#/components/schemas/authenticationTypeCode'
        authenticationTypeName:
          type: string
          maxLength: 255
          minLength: 0
          description: |
            Contract authentication type name.
          example: 'TypeName'
    AuthenticationParameter:
      required:
        - name
      type: object
      properties:
        name:
          $ref: '#/components/schemas/authenticationParameterName'
        value:
          $ref: '#/components/schemas/authenticationParameterValue'
    TransactionContractCredit:
      required:
        - transactionTypeCode
        - amount
        - currency
        - description
      type: object
      properties:
        amount:
          type: number
          maximum: 1E+18
          exclusiveMaximum: true
          minimum: 0
          exclusiveMinimum: true
          description: |
            Transaction amount.

            The field can contain values up to 4 decimal places. A dot is used as a decimal separator.
          example: 20
        currency:
          type: string
          maxLength: 3
          minLength: 1
          description: |
            Transaction currency (format according to ISO 4217, alphanumeric code).
          example: 'EUR'
        customData:
          type: array
          description: |
            The Field allows passing additional information to the created transaction record.
            Should be sent as: TAG_01=TAG_01_VALUE;TAG_02=TAG_02_VALUE;

            Max length of tag name: 32, max length of tag value: 32. Total max length: 255
            The tag name and the tag value should not contain characters ['=', ';', ' '].
          items:
            $ref: '#/components/schemas/TransactionCustomData'
        description:
          type: string
          maxLength: 255
          minLength: 1
          description: |
            Transaction description. In the CMS system stored and exported as merchant name.
          example: 'Description'
        feeCode:
          type: string
          maxLength: 32
          minLength: 0
          description: |
            Fee code of the fee which should be applied for transaction.

            *Disclaimer: Fee code which can be used must be configured in the MP's CMS.*
          example: 'FX_FEE'
        postingDate:
          type: string
          format: date
          description: |
            Transaction posting date (YYYY-MM-DD format). If not filled the sysdate will be placed in the field.
          example: '2031-06-25'
        transactionTypeCode:
          type: string
          maxLength: 32
          minLength: 1
          description: |
            Transaction type code which can be used must be configured in the MP's CMS.
          example: 'PT_1'
        transactionTypeExtension:
          type: string
          maxLength: 255
          minLength: 0
          description: |
            Transaction type extensions make it possible to more exactly determine the service that should be used to process a transaction.
            Transaction type extension is defined on transaction type configuration.
          example: 'Description'
        uniqueReferenceNumber:
          type: string
          maxLength: 32
          minLength: 0
          description: |
            Unique reference number for the transaction. If filled system will check the uniqueness of this value.
            It will not be possible to create two records with the same value. Exported as SRN (Source Reference Number).
          example: '122357012766'
    CardContractDetailsVerification:
      type: object
      required:
        - cardContractNumber
      properties:
        cardContractNumber:
          type: string
          maxLength: 19
          minLength: 1
          description: |
            A card contract number represents a Primary Account Number (PAN). A PAN usually consists of 16 digits:
              * The first six digits are the Bank Identification Number (BIN): a unique number within the payment organization (Mastercard, VISA)
              * The following nine digits are the contract identification number, which can be generated randomly
              * The last digit is a Luhn check digit.
          example: '5355848943515330'
        cardExpiryDate:
          $ref: '#/components/schemas/cardExpiryDate'
        cardVerificationCode:
          type: string
          maxLength: 3
          minLength: 0
          description: |
            Card Verification Code 2 (CVC2), known also as a Card Security Code (CSC) or a Card Verification Value 2 (CVV2).
          example: '347'
    CardContractDetailsVerificationResult:
      type: object
      required:
        - cardContractNumberVerificationResult
        - cardExpiryDateVerificationResult
        - cvc2VerificationResult
      properties:
        cardContractId:
          $ref: '#/components/schemas/cardContractId'
        cardContractNumberVerificationResult:
          type: string
          maxLength: 18
          minLength: 1
          description: |
            Card contract number verification result.

            | **Possible values** 	|
            |---------------------	|
            | PAN_CORRECT         	|
            | PAN_CANCELLED       	|
          example: 'PAN_CORRECT'
        cardExpiryDateVerificationResult:
          type: string
          maxLength: 24
          minLength: 1
          description: |
            Expiry date verification result.

            | **Possible values**      	|
            |--------------------------	|
            | EXPIRY_DATE_CORRECT      	|
            | EXPIRY_DATE_NOT_CORRECT  	|
            | EXPIRY_DATE_NOT_PROVIDED 	|
          example: 'EXPIRY_DATE_CORRECT'
        cbsNumber:
          $ref: '#/components/schemas/cbsNumber'
        cvc2VerificationResult:
          type: string
          maxLength: 17
          minLength: 1
          description: |
            CVC2 verification result.

            | **Possible values** 	|
            |---------------------	|
            | CVC2_CORRECT        	|
            | CVC2_NOT_CORRECT    	|
            | CVC2_NOT_PROVIDED   	|
          example: 'CVC2_CORRECT'
    ClientCustomDataTagValues:
      required:
        - clientCustomDataTagValues
      type: object
      properties:
        clientCustomDataTagValues:
          description: |
            List of `CustomDataTagValue` for the client.
          type: array
          items:
            $ref: '#/components/schemas/CustomDataTagValue'
    ContractCustomDataTagValues:
      required:
        - contractCustomDataTagValues
      type: object
      properties:
        contractCustomDataTagValues:
          description: |
            List of `CustomDataTagValue` for the contract.
          type: array
          items:
            $ref: '#/components/schemas/CustomDataTagValue'
  responses:
    AuthenticationParameterValue:
      description: |
        The authentication parameter value has been fetched successfully.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/AuthenticationParameterValue'
    BlockedFundsReleaseResult:
      description: |
        The result of the release of the funds.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/BlockedFundsReleaseResult'
    ClientUpdated:
      headers:
        ETag:
          schema:
            type: string
            maxLength: 64
            minLength: 1
          description: |
            A hash of a response body used to uniquely identify a particular version of a client.
            This value needs to be passed as an `If-Match` header to the PATCH methods of the same resource to ensure idempotency.
            See [RFC7232](https://datatracker.ietf.org/doc/html/rfc7232) for details.
          example: '7fedf39c3c2952a62821de4b480d1d6f'
      description: A client has been successfully updated.
    AccountRelinked:
      description: |
        The account contract has been successfully relinked to another client.
    SubAccountRelinked:
      description: |
        The contract has been successfully relinked.
    AccountUpdated:
      headers:
        ETag:
          schema:
            type: string
            maxLength: 64
            minLength: 1
          description: |
            A hash of a response body used to uniquely identify a particular version of a client.
            This value needs to be passed as an `If-Match` header to the PATCH methods of the same resource to ensure idempotency.
            See [RFC7232](https://datatracker.ietf.org/doc/html/rfc7232) for details.
          example: '7fedf39c3c2952a62821de4b480d1d6f'
      description: |
        The account contract has been successfully updated.
    AccountStatusChanged:
      description: |
        The server has successfully changed an account contract status.
    CardRelinkedToAnotherClient:
      description: |
        The card contract has been successfully relinked to another client.
    CardRelinkedToAnotherAccount:
      description: |
        The card contract has been successfully relinked to another account contract.
    CardUpdated:
      headers:
        ETag:
          schema:
            type: string
            maxLength: 64
            minLength: 1
          description: |
            A hash of a response body used to uniquely identify a particular version of a card.
            This value needs to be passed as an `If-Match` header to the PATCH methods of the same resource to ensure idempotency.
            See [RFC7232](https://datatracker.ietf.org/doc/html/rfc7232) for details.
          example: '7fedf39c3c2952a62821de4b480d1d6f'
      description: |
        The card contract has been successfully updated.
    CardStatusChanged:
      description: |
        The card contract status has been successfully managed.
    OnlinePinTryCounterReset:
      description: |
        The online PIN try counter has been successfully reset.
    CardPlasticUnlocked:
      description: The card has been unlocked.
    ClientAddressUpdated:
      description: |
        The address of a selected type for a client has been successfully updated.
    ContractAddressUpdated:
      description: |
        The address of a selected type for a contract has been successfully updated.
    ContractParameterSetOrChanged:
      description: |
        The contract parameter value has been successfully set up or changed.
    ContractUsageLimitAddedOrUpdated:
      description: |
        The usage limit for a contract has been successfully added or updated.
    ContractUsageLimitRestored:
      description: |
        The usage limit for a contract has been successfully restored.
    ContractUsageLimitCounterReset:
      description: |
        The counters for the specified usage limit has been successfully reset.
    ContractUsageLimitStatusChanged:
      description: |
        The usage limit status has been successfully changed.
    ServiceLimitTariffSetUp:
      description: |
        The individual service limit tariff has been successfully set up.
    ContractCustomDataSetUp:
      description: |
        The custom data for a contract has been successfully set up.
    ClientCustomDataSetUp:
      description: |
        The custom data for a client has been successfully set up.
    ContractClassifierSetUp:
      description: |
        The Contract classifier has been successfully set up.
    ClientClassifierSetUp:
      description: |
        The client classifier has been successfully set up.
    ContractAddressCreated:
      description: |
        The address for a contract has been successfully created.
    ClientAddressCreated:
      description: |
        The address for a client has been successfully created.
    CardPlasticNewPinSetUp:
      description: A new PIN has been successfully set up.
    ContractEventCreated:
      description: |
        The event for the specified contract has been successfully opened.
    BadRequestInvalidContractTypeError:
      description: |
        The server cannot process the request due to bad request.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ErrorWrapper'
          examples:
            BadRequestInvalidContractTypeExample:
              $ref: '#/components/examples/BadRequestInvalidContractTypeExample'
    BadRequestInvalidTransactionTypeError:
      description: |
        The server cannot process the request due to bad request.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ErrorWrapper'
          examples:
            BadRequestInvalidTransactionTypeExample:
              $ref: '#/components/examples/BadRequestInvalidTransactionTypeExample'
    BadRequestInvalidClientTypeError:
      description: |
        The server cannot process the request due to bad request.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ErrorWrapper'
          examples:
            BadRequestInvalidClientTypeExample:
              $ref: '#/components/examples/BadRequestInvalidClientTypeExample'
    BadRequestInvalidCardContractTypeError:
      description: |
        The server cannot process the request due to bad request.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ErrorWrapper'
          examples:
            BadRequestInvalidCardContractTypeExample:
              $ref: '#/components/examples/BadRequestInvalidCardContractTypeExample'
    BadRequestInvalidAccountContractTypeError:
      description: |
        The server cannot process the request due to bad request.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ErrorWrapper'
          examples:
            BadRequestInvalidAccountContractTypeExample:
              $ref: '#/components/examples/BadRequestInvalidAccountContractTypeExample'
    BadRequestNullCardContractIdentifierError:
      description: |
        The server cannot process the request due to bad request.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ErrorWrapper'
          examples:
            BadRequestNullCardContractIdentifierExample:
              $ref: '#/components/examples/BadRequestNullCardContractIdentifierExample'
    BadRequestNullAccountContractIdentifierError:
      description: |
        The server cannot process the request due to bad request.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ErrorWrapper'
          examples:
            BadRequestNullAccountContractIdentifierExample:
              $ref: '#/components/examples/BadRequestNullAccountContractIdentifierExample'
    BadRequestNullClientIdentifierError:
      description: |
        The server cannot process the request due to bad request.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ErrorWrapper'
          examples:
            BadRequestNullClientIdentifierExample:
              $ref: '#/components/examples/BadRequestNullClientIdentifierExample'
    BadRequestNullClientNumberError:
      description: |
        The server cannot process the request due to bad request.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ErrorWrapper'
          examples:
            BadRequestNullClientNumberExample:
              $ref: '#/components/examples/BadRequestNullClientNumberExample'
    BadRequestNullClassifierCodeError:
      description: |
        The server cannot process the request due to bad request.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ErrorWrapper'
          examples:
            BadRequestNullClassifierCodeExample:
              $ref: '#/components/examples/BadRequestNullClassifierCodeExample'
    BadRequestNullCardContractError:
      description: |
        The server cannot process the request due to bad request.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ErrorWrapper'
          examples:
            BadRequestNullCardContractExample:
              $ref: '#/components/examples/BadRequestNullCardContractExample'
    BadRequestNullCardContractNumberError:
      description: |
        The server cannot process the request due to bad request.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ErrorWrapper'
          examples:
            BadRequestNullCardContractNumberExample:
              $ref: '#/components/examples/BadRequestNullCardContractNumberExample'
    BadRequestMissingDataTypeToSecureError:
      description: |
        The server cannot process the request due to bad request.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ErrorWrapper'
          examples:
            BadRequestMissingDataTypeToSecureExample:
              $ref: '#/components/examples/BadRequestMissingDataTypeToSecureExample'
    BadRequestMissingTransactionSelectorTypeError:
      description: |
        The server cannot process the request due to bad request.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ErrorWrapper'
          examples:
            BadRequestMissingTransactionSelectorTypeExample:
              $ref: '#/components/examples/BadRequestMissingTransactionSelectorTypeExample'

    ContractNotFoundError:
      description: |
        The URI did not match an existing resource.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ErrorWrapper'
          examples:
            NotFoundErrorExample:
              $ref: '#/components/examples/ContractNotFoundExample'
    TransactionNotFoundError:
      description: |
        The URI did not match an existing resource.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ErrorWrapper'
          examples:
            NotFoundErrorExample:
              $ref: '#/components/examples/TransactionNotFoundExample'
    CardContractNotFoundError:
      description: |
        The URI did not match an existing resource.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ErrorWrapper'
          examples:
            NotFoundErrorExample:
              $ref: '#/components/examples/CardContractNotFoundExample'
    AccountContractNotFoundError:
      description: |
        The URI did not match an existing resource.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ErrorWrapper'
          examples:
            NotFoundErrorExample:
              $ref: '#/components/examples/AccountContractNotFoundExample'
    ClientNotFoundError:
      description: |
        The URI did not match an existing resource.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ErrorWrapper'
          examples:
            NotFoundErrorExample:
              $ref: '#/components/examples/ClientNotFoundExample'
    OperationDeniedError:
      description: |
        You do not have the permission to do this operation.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ErrorWrapper'
          examples:
            OperationDeniedExample:
              $ref: '#/components/examples/OperationDeniedExample'
    PreconditionError:
      description: |
        Precondition failed. Check the description field in the response for details.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ErrorWrapper'
          examples:
            PreconditionErrorExample:
              $ref: '#/components/examples/PreconditionExample'
    ClientIdentifier:
      description: |
        The client identifier has been fetched successfully.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ClientIdentifier'
    ClientIdentifierCreated:
      description: |
        The client has been successfully created, see the `Location` header.
      headers:
        Location:
          schema:
            type: string
          description: |
            The URI of the created client.
          example: '/clients/681084084'
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ClientIdentifier'
    Client:
      description: |
        The client has been successfully fetched.
      headers:
        ETag:
          schema:
            type: string
            maxLength: 64
            minLength: 1
          description: |
            A hash of a response body used to uniquely identify a particular version of a client.
            This value needs to be passed as an `If-Match` header to the PATCH methods of the same resource to ensure idempotency.
            See [RFC7232](https://datatracker.ietf.org/doc/html/rfc7232) for details.
          example: '7fedf39c3c2952a62821de4b480d1d6f'
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/Client'
    ClientAccountContracts:
      description: |
        The list of account contracts for a specified client has been fetched successfully.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ClientAccountContracts'
    ClientCardContracts:
      description: |
        The list of card contracts has been fetched successfully.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ClientCardContracts'
    ContractFinancial:
      description: |
        The financial information has been fetched successfully.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ContractFinancial'
    ContractBalances:
      description: |
        The list of balances has been fetched successfully.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ContractBalances'
    TechnicalAccounts:
      description: |
        The list of technical accounts has been fetched successfully.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/TechnicalAccounts'
    AccountContractIdentifierCreated:
      description: |
        The account contract has been successfully created, see the `Location` header.
      headers:
        Location:
          schema:
            type: string
          description: |
            The URI of the created account contract.
          example: '/accounts/3519804984'
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/AccountContractIdentifier'
    AccountContractIdentifier:
      description: |
        The account contract identifier has been fetched successfully.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/AccountContractIdentifier'
    AccountContract:
      headers:
        ETag:
          schema:
            type: string
            maxLength: 64
            minLength: 1
          description: |
            A hash of a response body used to uniquely identify a particular version of a account contract.
            This value needs to be passed as an `If-Match` header to the PATCH methods of the same resource to ensure idempotency.
            See [RFC7232](https://datatracker.ietf.org/doc/html/rfc7232) for details.
          example: '7fedf39c3c2952a62821de4b480d1d6f'
      description: An account contract has been successfully fetched.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/AccountContract'
    SubAccountContracts:
      description: |
        The list of subaccounts has been fetched successfully.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/SubAccountContracts'
    AccountContractCardContracts:
      description: |
        The list of card contract summaries has been fetched successfully.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/AccountContractCardContracts'
    ContractSummaryTree:
      description: |
        The summary tree has been fetched successfully.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ContractSummaryTree'
    CardContractIdentifierCreated:
      description: |
        The card contract has been successfully created, see the `Location` header.
      headers:
        Location:
          schema:
            type: string
          description: |
            The URI of the created card contract.
          example: '/cards/68412281'
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/CardContractIdentifier'
    Cvc:
      description: |
        The CVC2 search was performed successfully.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/Cvc'
    CvcVerificationResult:
      description: |
        The CVC2 verification result has been fetched successfully.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/CvcVerificationResult'
    PinVerificationResult:
      description: |
        The PIN verification result has been fetched successfully.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/PinVerificationResult'
    EncryptedPin:
      description: |
        The encrypted PIN block has been fetched successfully.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/EncryptedPin'
    CardContractPlastics:
      description: |
        The list of card plastics has been successfully fetched.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/CardContractPlastics'
    ContractParameters:
      description: |
        The list of parameters has been fetched successfully.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ContractParameters'
    ClientAddresses:
      description: |
        The list of client addresses has been fetched successfully.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ClientAddresses'
    ContractAddresses:
      description: |
        The list of contract addresses has been fetched successfully.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ContractAddresses'
    ClientCustomDataTagValues:
      description: |
        The list of client custom data tags has been fetched successfully.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ClientCustomDataTagValues'
    ContractCustomDataTagValues:
      description: |
        The list of contract custom data tags has been fetched successfully.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ContractCustomDataTagValues'
    Transactions:
      description: |
        The list of transactions has been fetched successfully.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/Transactions'
    TransactionDocuments:
      description: |
        The list of transaction documents has been fetched successfully.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/TransactionDocuments'
    TransactionFees:
      description: |
        The list of transaction fees has been fetched successfully.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/TransactionFees'
    UsageLimits:
      description: |
        The list of usage limits has been fetched successfully.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/UsageLimits'
    ClientClassifiers:
      description: |
        The list of client classifiers has been fetched successfully.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ClientClassifiers'
    ContractClassifiers:
      description: |
        The list of contract classifiers has been fetched successfully.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ContractClassifiers'
    CardContractIdentifier:
      description: |
        The card contract identifier has been fetched successfully.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/CardContractIdentifier'
    PublicRsaKeyData:
      description: |
        The RSA key has been successfully fetched.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/PublicRsaKeyData'
    CardContract:
      headers:
        ETag:
          schema:
            type: string
            maxLength: 64
            minLength: 1
          description: |
            A hash of a response body used to uniquely identify a particular version of a card contract.
            This value needs to be passed as an `If-Match` header to the PATCH methods of the same resource to ensure idempotency.
            See [RFC7232](https://datatracker.ietf.org/doc/html/rfc7232) for details.
          example: '7fedf39c3c2952a62821de4b480d1d6f'
      description: A card contract has been successfully fetched.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/CardContractWithEncryptedCardContractNumber'
    ReissuedCardContract:
      description: |
        The card contract has been successfully reissued.
      headers:
        Location:
          schema:
            type: string
          description: The URI of the reissued card contract.
          example: '/cards/70001'
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ReissuedCardContract'
    AuthenticationMethodSetUp:
      description: |
        The authentication method has been set up.
    DebitTransactionId:
      description: |
        The debit transaction has been posted.
      headers:
        Location:
          schema:
            type: string
          description: The URI of the created transaction.
          example: '/transaction-documents?transaction_selector_type=ID&transaction_selector_value=90001'
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/TransactionId'
    CreditTransactionId:
      description: |
        The credit transaction has been posted.
      headers:
        Location:
          schema:
            type: string
          description: The URI of the created transaction.
          example: '/transaction-documents?transaction_selector_type=ID&transaction_selector_value=90001'
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/TransactionId'
    ChargeTransactionId:
      description: |
        The contract has been charged successfully.
      headers:
        Location:
          schema:
            type: string
          description: The URI of the created transaction.
          example: '/transaction-documents?transaction_selector_type=ID&transaction_selector_value=90001'
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/TransactionId'
    ReverseTransactionId:
      description: |
        The transaction has been successfully reversed.
      headers:
        Location:
          schema:
            type: string
          description: The URI of the created transaction.
          example: '/transaction-documents?transaction_selector_type=ID&transaction_selector_value=2829673'
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ReverseTransactionId'
    ContractTariffs:
      description: |
        The contract tariffs has been fetched successfully.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ContractTariffs'
    AccountContractStatus:
      description: |
        The account contract status has been retrieved successfully.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/AccountContractStatus'
    CardContractStatus:
      description: |
        The card contract status has been retrieved successfully.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/CardContractStatus'
    CardContractDetailsVerificationResult:
      description: |
        The card details verification result.
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/CardContractDetailsVerificationResult'
  requestBodies:
    BlockedFundsRelease:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/BlockedFundsRelease'
      required: true
    ReverseTransactionReason:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ReverseTransactionReason'
      required: true
    ClientCreation:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ClientCreation'
      required: true
    ClientIdentifierWithRelinkType:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ClientIdentifierWithRelinkType'
      required: true
    ClientIdentifier:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ClientIdentifier'
      required: true
    AccountContractIdentifierWithClientIdentifier:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/AccountContractIdentifierWithClientIdentifier'
      required: true
    AccountContractIdentifier:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/AccountContractIdentifier'
      required: true
    Event:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/Event'
      required: true
    AccountContractCreation:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/AccountContractCreation'
      required: true
    AccountContractStatusWithReason:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/AccountContractStatusWithReason'
      required: true
    CardContractCreation:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/CardContractCreation'
      required: true
    CardContractModification:
      content:
        application/merge-patch+json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/CardContractModification'
      required: true
    CvcSearchCriteria:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/CvcSearchCriteria'
      required: true
    CvcVerification:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/CvcVerification'
      required: true
    PinVerification:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/PinVerification'
      required: true
    PinCreation:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/PinCreation'
      required: true
    PinSearchCriteria:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/PinSearchCriteria'
      required: true
    CardContractActivation:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/CardContractActivation'
      required: true
    CardContractStatusWithReason:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/CardContractStatusWithReason'
      required: true
    OnlinePinAttemptsClearance:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/OnlinePinAttemptsClearance'
      required: true
    OnlinePinAttemptsClearanceForClient:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/OnlinePinAttemptsClearanceForClient'
      required: true
    AddressCreation:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/AddressCreation'
      required: true
    AddressModification:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/AddressModification'
      required: true
    ClassifierCreation:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ClassifierCreation'
      required: true
    CustomDataTags:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/CustomDataTags'
      required: true
    ParameterModification:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ParameterModification'
      required: true
    TransactionContractDebit:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/TransactionContractDebit'
      required: true
    ChargeFee:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ChargeFee'
      required: true
    ServiceLimitTariff:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ServiceLimitTariff'
      required: true
    UsageLimitModification:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/UsageLimitModification'
      required: true
    UsageLimitOriginalValue:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/UsageLimitOriginalValue'
      required: true
    UsageLimitResetting:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/UsageLimitResetting'
      required: true
    UsageLimitStatus:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/UsageLimitStatus'
      required: true
    AccountContractIdentifierSearch:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/AccountContractIdentifierSearch'
      required: true
    CardContractIdentifierSearch:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/CardContractIdentifierSearch'
      required: true
    ClientIdentifierSearch:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ClientIdentifierSearch'
      required: true
    ClientModification:
      content:
        application/merge-patch+json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/ClientModification'
      required: true
    AccountContractModification:
      content:
        application/merge-patch+json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/AccountContractModification'
      required: true
    CardContractReissue:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/CardContractReissue'
      required: true
    AuthenticationMethod:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/AuthenticationMethod'
      required: true
    TransactionContractCredit:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/TransactionContractCredit'
      required: true
    CardContractDetailsVerification:
      content:
        application/json;charset=utf-8:
          schema:
            $ref: '#/components/schemas/CardContractDetailsVerification'
      required: true
  parameters:
    authenticationTypeCode:
      name: authentication_type_code
      in: query
      description: |
        Contract authentication type code.
      required: true
      schema:
        $ref: '#/components/schemas/authenticationTypeCode'
      example: '3DS_EXT_ENROLLMENT'
    authenticationParameterName:
      name: authentication_parameter_name
      in: query
      description: |
        Contract authentication parameter name.
      required: true
      schema:
        $ref: '#/components/schemas/authenticationParameterName'
      example: 'PHONE'
    mandatoryCustomerPublicRsaKey:
      name: Customer-Public-Rsa-Key
      in: header
      description: |
        Public RSA key generated by the Issuer. ASCII/UTF-8 string of characters 0-9, A-F, ASN.1 DER Public hex unpacked to string or PEM concatenated Base64 without BEGIN and END lines.

        Key is used to encrypt sensitive data (`encryptedCardContractNumber`, `encryptedZpk`) returned by the MP in the response.
      required: true
      schema:
        $ref: '#/components/schemas/customerPublicRsaKey'
      example: '30820122300D06092A864886F70D01010105000382010F003082010A0282010100A7D079A8769BCD340574E8E6C0A2810C377279E5EA0B422B9132F955860730E7637DFAB0A1C6F117B25E3DB3D2A5A9F2691BBC7E0178ADFD12908C3E6E6D3A77AA26E25A6570FCC423561628879E918DC0C798527318308C70BBE2BC4597B83B96CB3680FE6F8E60D68B465E2B30558712A2D63A544239BE7B5F2A49C82FB3388A22644741A945EC9ACB3F219C3B6826241BE1706EF384100EC83D0D7FAE6CCF4E69E0EE02BF84C21553FA1999A8DB91C4193D1E671D5A22B1876E1DC81F1ED7033F3A26FF62E492A63ADA58AAE248D5E47896592CB9A7023CB8B8700882B4DCBF34C16F7FA00DF4C3931A4612E0E2A09586780E89D28FAAA195C07ADE88286F0203010001'
    optionalCustomerPublicRsaKey:
      name: Customer-Public-Rsa-Key
      in: header
      description: |
        Public RSA key generated by the Issuer. ASCII/UTF-8 string of characters 0-9, A-F, ASN.1 DER Public hex unpacked to string or PEM concatenated Base64 without BEGIN and END lines.

        Key is used to encrypt sensitive data returned by the MP in the response.
      required: false
      schema:
        $ref: '#/components/schemas/customerPublicRsaKey'
      example: '30820122300D06092A864886F70D01010105000382010F003082010A0282010100A7D079A8769BCD340574E8E6C0A2810C377279E5EA0B422B9132F955860730E7637DFAB0A1C6F117B25E3DB3D2A5A9F2691BBC7E0178ADFD12908C3E6E6D3A77AA26E25A6570FCC423561628879E918DC0C798527318308C70BBE2BC4597B83B96CB3680FE6F8E60D68B465E2B30558712A2D63A544239BE7B5F2A49C82FB3388A22644741A945EC9ACB3F219C3B6826241BE1706EF384100EC83D0D7FAE6CCF4E69E0EE02BF84C21553FA1999A8DB91C4193D1E671D5A22B1876E1DC81F1ED7033F3A26FF62E492A63ADA58AAE248D5E47896592CB9A7023CB8B8700882B4DCBF34C16F7FA00DF4C3931A4612E0E2A09586780E89D28FAAA195C07ADE88286F0203010001'
    clientId:
      name: client_id
      in: path
      description: |
        Unique technical client identifier, generated by the MP's CMS database engine. The identifier is generated when client creation finishes successfully and is returned in a client creation response (`POST /clients`, field `clientId`).
      required: true
      schema:
        $ref: '#/components/schemas/clientId'
      example: 40000
    accountContractId:
      name: account_contract_id
      in: path
      description: |
        Unique technical identifier for an account contract generated by the MP's CMS. The identifier is generated when account contract creation finishes successfully and is returned in an account contract creation response (`POST /accounts`).
      required: true
      schema:
        $ref: '#/components/schemas/accountContractId'
      example: 60001
    cardContractId:
      name: card_contract_id
      in: path
      description: |
        Unique technical identifier for a card contract generated by the MP's CMS. The identifier is generated when card contract creation finishes successfully and is returned in a card contract creation response (`POST /cards`).
      required: true
      schema:
        $ref: '#/components/schemas/cardContractId'
      example: 70001
    contractId:
      name: contract_id
      in: path
      description: |
        Unique technical contract identifier generated by the CMS.

        The identifier is generated when contract (account or card) creation finishes successfully and is returned in:
          * account contract creation response (`POST /accounts`, field: `accountContractId`).
          * card contract creation response (`POST /cards`, field: `cardContractId`).
      required: true
      schema:
        $ref: '#/components/schemas/contractId'
      example: 70001
    direction:
      in: query
      name: direction
      schema:
        type: string
        minLength: 0
        maxLength: 32
        enum:
          - CREDIT
          - DEBIT
          - NONE
      description: |
        Transaction type's direction.

        | **Possible values** 	|
        |---------------------	|
        | CREDIT              	|
        | DEBIT               	|
        | NONE                	|
      example: 'DEBIT'
    contractHierarchy:
      in: query
      name: contract_hierarchy
      schema:
        type: string
        minLength: 1
        maxLength: 1
        enum:
          - N
          - M
          - R
          - Y
      description: |
        Contracts hierarchy analysis mode.

        | **Possible values** 	| **Description**                                                                               	|
        |---------------------	|-----------------------------------------------------------------------------------------------	|
        | N                   	| Search for transactions without contract's hierarchy analysis (default value)                 	|
        | M                   	| Main-Sub hierarchies only                                                                     	|
        | R                   	| Related Cards only. In this mode Liability and Main-Sub contract hierarchies are not analyzed 	|
        | Y                   	| Liability and Main-Sub contract hierarchies are analyzed                                      	|
      example: 'R'
    limit:
      in: query
      name: limit
      schema:
        type: integer
        default: 10
        maximum: 100
        minimum: 1
      description: |
        The number of items you want the list to be limited to.
      example: 1
    offset:
      in: query
      name: offset
      schema:
        type: integer
        format: int64
        default: 0
        minimum: 0
      description: |
        The number of items to offset the start of the list from.
      example: 0
    fieldsSelection:
      name: fields
      in: query
      description: |
        The response message can return only the data represented by field names specified in this field.
        The Issuer can choose any field name being returned for a card contract object or can leave the field empty (in such case all data will be returned).
      explode: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/fieldSelection'
      example: 'cardContractNumber,embossedData'
    contractBalanceCodes:
      name: balance_codes
      in: query
      description: |
        List of balance codes. The response will return information about specified balances.

        Note: Response will contain only specified balance codes that does exist in the CMS. If none exists or a list does not contain any value then the response will not return any data (HTTP 200 will be returned with an empty array `[]`).

        *Disclaimer: Possible values which can be sent must be defined by MP and Issuer during the onboarding process.*
      required: true
      explode: false
      schema:
        type: array
        items:
          type: string
          maxLength: 32
          minLength: 1
        minItems: 1
        example: ['AVAILABLE','BLOCKED']
    keyIndex:
      name: Key-Index
      in: header
      description: |
        Index of the MP's public RSA key received in a `GET /public-keys` response (API operation: `getPublicRsaKey`).

        If `Key-Index` is provided, then the `newPinBlock` field must be encrypted using the MP's public RSA key received together with the `Key-Index` from the MP in `GET /public-keys` response (API operation: `getPublicRsaKey`).
      schema:
        $ref: '#/components/schemas/keyIndex'
      example: 'A1564386531162'
    ifMatch:
      name: If-Match
      in: header
      description: |
        Used to ensure idempotency for the PATCH methods.
        This header should be populated with the `ETag` received in the response header from the GET call of the same resource being updated. See [RFC7232](https://datatracker.ietf.org/doc/html/rfc7232) for more details.
      required: true
      schema:
        $ref: '#/components/schemas/ifMatch'
      example: '5c7d022061b0874200bfed735c6b9308'
    transactionDateFrom:
      name: date_from
      in: query
      description: |
        Date from (YYYY-MM-DD format).
      required: true
      schema:
        $ref: '#/components/schemas/date'
      example: '2031-06-25'
    transactionDateTo:
      name: date_to
      in: query
      description: |
        Date to (YYYY-MM-DD format).
      required: true
      schema:
        $ref: '#/components/schemas/date'
      example: '2032-06-25'
    transactionTypeCodes:
      name: transaction_type_codes
      in: query
      description: |
        The list of `transactionTypeCode` separated by commas.

        Transactions originated from the Banknet
        | `transactionTypeCode` 	| `transactionType`                     	|
        |:---------------------:	|---------------------------------------	|
        | 0512                  	| Retail with CashBack                  	|
        | 0513 1                	| CH Debit                              	|
        | 0515                  	| Retail                                	|
        | 0518                  	| Unique                                	|
        | 0522                  	| CashBack 2Prs                         	|
        | 0523 1                	| CH Debit 2Prs                         	|
        | 0525                  	| Retail 2Prs                           	|
        | 0528                  	| Unique 2Prs                           	|
        | 0614 2                	| CH Payment                            	|
        | 0616                  	| Refund                                	|
        | 0624 2                	| CH Payment 2Prs                       	|
        | 0626                  	| Credit 2Prs                           	|
        | 0717                  	| Cash Advance                          	|
        | 0719                  	| ATM Cash Withdrawal                   	|
        | 0727                  	| Cash 2Prs                             	|
        | 0729                  	| ATM Cash withdrawal - 2nd presentment 	|

        Transactions originated from the Issuer in the standard product
        | `transactionTypeCode` 	| `transactionType`             	| **Product applicability** 	|
        |-----------------------	|-------------------------------	|---------------------------	|
        | APSF                  	| Paper statement fee           	| Credit                    	|
        | BT1                   	| Balance Transfer              	| Credit                    	|
        | FP                    	| Fee posting                   	| Credit                    	|
        | I_TPC                 	| PBB Transfer posting - credit 	| Credit, Prepaid           	|
        | I_TPD                 	| PBB Transfer posting - debit  	| Credit, Prepaid           	|
        | PT_1                  	| Payment To Client Contract    	| Credit                    	|
        | TP                    	| Prepaid Top-Up                	| Prepaid                   	|
        | TPC_1                 	| Transaction posting - credit  	| Credit, Prepaid           	|
        | TPD                   	| Transaction posting - debit   	| Credit                    	|

        Fees originated from the CMS in the standard product
        | `transactionTypeCode` 	| `transactionType`                     	| **Product applicability** 	|
        |-----------------------	|---------------------------------------	|---------------------------	|
        | A1F                   	| ATM Fee                               	| Prepaid                   	|
        | AFM_1                 	| BCC CA Annual Fee Main Card           	| Prepaid                   	|
        | AUCF                  	| Urgent card fee                       	| Credit, Prepaid           	|
        | C1F                   	| Cash Fee                              	| Prepaid                   	|
        | CF1                   	| Country Fee                           	| Prepaid                   	|
        | FXF                   	| Foreign exchange (FX) fee             	| Credit                    	|
        | INFC                  	| Insurance Fixed Card                  	| Credit                    	|
        | INFS                  	| Insurance Fixed Single                	| Credit, Prepaid           	|
        | INFSC                 	| Insurance Fixed Single Card           	| Credit                    	|
        | INP                   	| Insurance Percentage                  	| Credit                    	|
        | IPP                   	| BCC Insurance fee: Payment Protection 	| Credit, Prepaid           	|
        | JFA                   	| Joining fee                           	| Prepaid                   	|
        | LC                    	| New Lost Card for PIN Set             	| Prepaid                   	|
        | LPF                   	| BCC Late Payment Fee                  	| Credit                    	|
        | M;                    	| New Card for PIN Set                  	| Prepaid                   	|
        | M0                    	| Plastic Renew Expired                 	| Prepaid                   	|
        | M19                   	| Plastic Renew Misc (no Prod)          	| Credit                    	|
        | M8                    	| Plastic Renew Misc                    	| Prepaid                   	|
        | MA_1                  	| Balance Inquiry Fee                   	| Prepaid                   	|
        | MF_1                  	| BCC Card Fee Billing                  	| Prepaid                   	|
        | MFM                   	| Misc Fee Manual                       	| Prepaid                   	|
        | MR                    	| Replaced Card for PIN Set (no Prod)   	| Credit                    	|
        | OVLF                  	| OVL Fee                               	| Credit                    	|
        | PFMCC                 	| Retail Fee based on MC                	| Prepaid                   	|
        | PZ                    	| PIN Change Fee                        	| Prepaid                   	|
        | RWCBTF                	| Retail with CB Transaction Fee        	| Credit                    	|
        | TPF                   	| Top-up fee                            	| Prepaid                   	|
        | VCP                   	| New Card for PIN Set (no Prod)        	| Credit                    	|

        Interests originated from the CMS in the standard credit product
        | `transactionTypeCode` 	| `transactionType`                 	|
        |-----------------------	|-----------------------------------	|
        | ILBT3                 	| Overdue cash interest             	|
        | ILBT5                 	| Overdue balance transfer interest 	|
        | ILC3                  	| Balance transfer interest         	|
        | ILC5                  	| Overdue retail interest           	|
        | ILR3                  	| Retail interest                   	|
        | ILR5                  	| Cash interest                     	|
      explode: false
      schema:
        type: array
        items:
          type: string
          maxLength: 32
          minLength: 1
        example: ['0719','0515']
    transactionSelectorType:
      name: transaction_selector_type
      in: query
      required: true
      description: |
        Allows defining the type of selector passed in the `transaction_selector_value`.
      schema:
        maxLength: 3
        minLength: 1
        type: string
        enum:
          - ARN
          - ID
          - RRN
          - SRN
        example: 'ARN'
    transactionSelectorValue:
      name: transaction_selector_value
      in: query
      description: |
        Allows defining the value for the transactions selector.

        * If `transaction_selector_type` is equal to `ARN` then maxLength of `transaction_selector_value` is 32

        * If `transaction_selector_type` is equal to `ID` then maxLength of `transaction_selector_value` is 18

        * If `transaction_selector_type` is equal to `RRN` then maxLength of `transaction_selector_value` is 12

        * If `transaction_selector_type` is equal to `SRN` then maxLength of `transaction_selector_value` is 32
      required: true
      schema:
        maxLength: 32
        minLength: 1
        type: string
        example: '06116638346121300000317'
    transactionCollectAuthorizations:
      name: collect_authorizations
      in: query
      description: |
        Allows collecting information about authorization documents.
        The parameter is used in combination with the `authorization_filter_mode` parameter.
      schema:
        type: string
        maxLength: 1
        minLength: 1
        enum:
          - Y
          - N
        example: 'Y'
    addressType:
      name: address_type
      in: path
      description: |
        Address type. Additional addresses allow to store any address related to the client or contract (account contract or card contract).

        | **Default possible values** 	| **Description**             	|
        |-----------------------------	|-----------------------------	|
        | PIN                         	| PIN mailer delivery address 	|
        | STMT                        	| Statement delivery address  	|

        *Disclaimer: Possible values which can be sent must be defined by MP and Issuer during the onboarding process as they are configured in the CMS system.*
      required: true
      schema:
        $ref: '#/components/schemas/addressType'
      example: 'PIN'
    parameterCode:
      name: parameter_code
      in: path
      description: |
        Code of the contract parameter for which the value will be set.

        *Disclaimer: Parameter codes are configured in the MP's CMS and the Issuer is allowed to use only the value configured by the MP (the Issuer cannot use their own values).*
      required: true
      schema:
        $ref: '#/components/schemas/parameterCode'
      example: 'MTP_CALC_RULE'
    parameterCodes:
      name: parameter_codes
      in: query
      required: true
      description: |
        The list of contract parameters which should be returned.

        Note: Response will contain only specified parameter codes that does exist in the CMS. If none exists or a list does not contain any value then the response will not return any data (HTTP 200 will be returned with an empty array `[]`).

        *Disclaimer: Possible values which can be sent must be defined by MP and Issuer during the onboarding process.*
      schema:
        type: array
        items:
          $ref: '#/components/schemas/parameterCode'
        minItems: 0
      example: 'ATM_CALC_RULE,MTP_CALC_RULE'
    classifierCode:
      name: classifier_code
      in: path
      description: |
        Code of the classifier for which the value will be set.

        *Disclaimer: Classifier codes are configured in the MP's CMS and the Issuer is allowed to use only the value configured by the MP (the Issuer cannot use their own values).*
      required: true
      schema:
        $ref: '#/components/schemas/classifierCode'
      example: 'TEST_CLASSIFIER_01'
    classifierCodes:
      name: classifier_codes
      in: query
      required: true
      description: |
        The list of classifiers which should be returned.

        Note: Response will contain only specified classifier codes that does exist in the CMS. If none exists or a list does not contain any value then the response will not return any data (HTTP 200 will be returned with an empty array `[]`).

        *Disclaimer: Possible values which can be sent must be defined by MP and Issuer during the onboarding process.*
      schema:
        type: array
        items:
          $ref: '#/components/schemas/classifierCode'
        minItems: 0
        example: ['TEST_CLASSIFIER_01','TEST_CLASSIFIER_02']
    tagName:
      name: tag_name
      in: path
      description: |
        Tag name
      required: true
      schema:
        type: string
        maxLength: 32
        minLength: 1
      example: 'TAG_01'
    transactionId:
      name: transaction_id
      in: path
      description: |
        Transaction record id from the CMS system.
      required: true
      schema:
        type: integer
        format: int64
        maximum: 999999999999999999
        minimum: 1
      example: 90001
    technicalAccountCode:
      name: technical_account_code
      in: query
      description: |
        Code of the account, which is related to the given contract.
      schema:
        type: string
        maxLength: 32
        minLength: 1
      example: 'BF'
    transactionAuthorizationFilterMode:
      name: authorization_filter_mode
      in: query
      description: |
        Specifies records filtering mode.

        | **Possible values** 	| **Description**                   	|
        |---------------------	|-----------------------------------	|
        | A                   	| Not Matched Affecting Balance     	|
        | N                   	| Not Affecting Balance             	|
        | S                   	| Successful Only Affecting Balance 	|
        | U                   	| All Records                       	|

        Depending on its value the following authorizations are output:
          * A (default value) - authorizations that lead to a contract's balance changes and haven't matched with financial documents (they are waiting for financial documents or already closed or declined).
          * N - cardholder's requests not changing a contract's balance (Balance Inquiry, Online Statement, Top Up, Additional Online Service, Verification).
          * S - active authorizations that lead to a contract's balance changes, waiting for a financial document to be matched. This option is similar to 'A' but excludes closed and declined authorizations.
          * U - authorizations that lead to a contract's balance changes and cardholder's requests that do not change a contract's balance. Closed and declined authorizations are considered too.
      schema:
        type: string
        maxLength: 1
        minLength: 1
        default: 'A'
        enum:
          - A
          - N
          - S
          - U
      example: 'A'
    transactionAuthorized:
      name: authorized
      in: query
      description: |
        Determines whether the transaction was authorized.
      schema:
        type: string
        maxLength: 1
        minLength: 1
        enum:
          - Y
          - N
      example: 'Y'
    usageLimitCodes:
      name: usage_limit_codes
      in: query
      required: true
      description: |
        The list of usage limit codes which should be returned.

        Note: Response will contain only specified limit codes that does exist in the CMS. If none exists or a list does not contain any value then the response will not return any data (HTTP 200 will be returned with an empty array `[]`).

        *Disclaimer: Possible values which can be sent must be defined by MP and Issuer during the onboarding process.*
      explode: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/usageLimitCode'
        minItems: 0
        example: ['DAILY_TOTAL','MONTHLY_TOTAL']
    usageLimitCode:
      name: usage_limit_code
      in: path
      required: true
      description: |
        Unique usage limit code which defines the contract's usage limit for which action should be executed.

        *Disclaimer: Possible values which can be sent must be defined by MP and Issuer during the onboarding process.*
      schema:
        $ref: '#/components/schemas/usageLimitCode'
      example: 'DAILY_TOTAL'
    dateTypeToSecure:
      name: data_type_to_secure
      in: query
      description: |
        Definition specifying what type of sensitive data an RSA key data will be used for.

        | **Possible values** 	| **Description**          	|
        |---------------------	|--------------------------	|
        | PIN_BLOCK           	| For PIN block encryption 	|
      required: true
      schema:
        type: string
        maxLength: 9
        minLength: 1
        enum:
          - PIN_BLOCK
      example: 'PIN_BLOCK'
    statuses:
      name: statuses
      in: query
      description: |
        The list of `Status`. The response will contain contracts with specified statuses only.

        If the list does not contain any value then the response will contain all cards without filtering by status.
      explode: false
      schema:
        type: array
        items:
          type: string
      example: '41,05'
    creationDateFrom:
      name: creation_date_from
      in: query
      description: |
        Response will return card contracts with creation date >= than date passed in the request (YYYY-MM-DD format).

        If not filled card contracts are returned without checking the creation date.
      schema:
        type: string
        format: date
      example: '2019-06-24'
    tariffCode:
      required: false
      schema:
        type: string
        maxLength: 255
        minLength: 0
      description: |
        Tariff code.
      name: tariff_code
      in: query
      example: 'MTP_CALC_RULE'
    tariffTypeCode:
      required: false
      description: |
        Tariff type code.
      schema:
        type: string
        maxLength: 32
        minLength: 0
      name: tariff_type_code
      in: query
      example: 'MTP_CALC_RULE'
    personalisationType:
      required: false
      name: personalisation_type
      in: query
      description: |
        Personalisation type.

        | **Possible values** 	|      **Description**      	|
        |:-------------------:	|:-------------------------:	|
        |          G          	|           Global          	|
        |          P          	|          Personal         	|
        |          D          	|        Personalised       	|
        |          T          	| Personal (Template Based) 	|
        |          L          	|          Template         	|
      schema:
        type: string
        maxLength: 1
        minLength: 1
        enum:
          - G
          - P
          - D
          - T
          - L
      example: 'G'
    tariffDomainCode:
      required: false
      name: tariff_domain_code
      in: query
      description: |
        Tariff domain code.
      schema:
        type: string
        maxLength: 32
        minLength: 0
      example: 'GL'
    tariffRole:
      required: false
      name: tariff_role
      in: query
      description: |
        Tariff role.

          | **Possible values** 	| **Description**            	|
          |---------------------	|----------------------------	|
          | SERVICE             	|  Service                   	|
          | SERVICE_LIMIT       	|  Service Limit             	|
          | SERVICE_VD          	|  Service Value Days        	|
          | INTEREST            	|  Interest                  	|
          | AGEING              	|  Ageing                    	|
          | USAGE               	|  Usage                     	|
          | INTEREST_TAX        	|  Interest Tax              	|
          | BILLING             	|  Billing Scheme            	|
          | GL                  	|  General Ledger Numeration 	|
          | INST_FEE            	|  Installment Fee           	|
          | INSTALLMENT         	|  Installment Scheme        	|
          | THRESHOLD           	|  Threshold                 	|
          | TECHNICAL           	|  Technical                 	|
          | FX                  	|  Conversion                	|
          | REDEFINITION        	|  Redefinition              	|
      schema:
        enum:
          - SERVICE
          - SERVICE_LIMIT
          - SERVICE_VD
          - INTEREST
          - AGEING
          - USAGE
          - INTEREST_TAX
          - BILLING
          - GL
          - INST_FEE
          - INSTALLMENT
          - THRESHOLD
          - TECHNICAL
          - FX
          - REDEFINITION
        type: string
        maxLength: 13
        minLength: 1
      example: 'AGEING'
    idempotencyKey:
      name: Idempotency-Key
      in: header
      description: |
        Unique identifier generated by the issuer. Mastercard Processing uses this identifier to recognize subsequent retries of the same request and ensure idempotent behaviour by sending the same response without repeating the operation again.
      required: false
      schema:
        type: string
        format: uuid
        maxLength: 36
        minLength: 1
        example: "7da7a728-f910-11e6-942a-68f728c1ba70"
  examples:
    BadRequestInvalidContractTypeExample:
      value:
        Errors:
          Error:
            - Source: MASTERCARD PROCESSING
              ReasonCode: REQUEST_VALIDATION
              Description: Invalid type of request parameter contract_id.
              Recoverable: false
    BadRequestInvalidTransactionTypeExample:
      value:
        Errors:
          Error:
            - Source: MASTERCARD PROCESSING
              ReasonCode: REQUEST_VALIDATION
              Description: Invalid type of request parameter transaction_id.
              Recoverable: false
    BadRequestInvalidClientTypeExample:
      value:
        Errors:
          Error:
            - Source: MASTERCARD PROCESSING
              ReasonCode: REQUEST_VALIDATION
              Description: Invalid type of request parameter client_id.
              Recoverable: false
    BadRequestInvalidCardContractTypeExample:
      value:
        Errors:
          Error:
            - Source: MASTERCARD PROCESSING
              ReasonCode: REQUEST_VALIDATION
              Description: Invalid type of request parameter card_contract_id.
              Recoverable: false
    BadRequestInvalidAccountContractTypeExample:
      value:
        Errors:
          Error:
            - Source: MASTERCARD PROCESSING
              ReasonCode: REQUEST_VALIDATION
              Description: Invalid type of request parameter account_contract_id.
              Recoverable: false
    BadRequestNullCardContractNumberExample:
      value:
        Errors:
          Error:
            - Source: MASTERCARD PROCESSING
              ReasonCode: REQUEST_VALIDATION
              Description: 'Invalid field cardContractNumber value in object cardContractDetailsVerification. Validation error: must not be null'
              Recoverable: false
    BadRequestNullCardContractExample:
      value:
        Errors:
          Error:
            - Source: MASTERCARD PROCESSING
              ReasonCode: REQUEST_VALIDATION
              Description: 'Invalid field cardContract value in object cardContractCreation. Validation error: must not be null'
              Recoverable: false
    BadRequestNullClassifierCodeExample:
      value:
        Errors:
          Error:
            - Source: MASTERCARD PROCESSING
              ReasonCode: REQUEST_VALIDATION
              Description: 'Invalid field accountContractClassifiers[0].classifierCode value in object accountContractCreation. Validation error: must not be null'
              Recoverable: false
    BadRequestNullClientNumberExample:
      value:
        Errors:
          Error:
            - Source: MASTERCARD PROCESSING
              ReasonCode: REQUEST_VALIDATION
              Description: 'Invalid field clientNumber value in object clientCreation. Validation error: must not be null'
              Recoverable: false
    BadRequestNullCardContractIdentifierExample:
      value:
        Errors:
          Error:
            - Source: MASTERCARD PROCESSING
              ReasonCode: REQUEST_VALIDATION
              Description: 'Invalid field cardContractIdentifier value in object cardContractIdentifierSearch. Validation error: must not be null'
              Recoverable: false
    BadRequestNullClientIdentifierExample:
      value:
        Errors:
          Error:
            - Source: MASTERCARD PROCESSING
              ReasonCode: REQUEST_VALIDATION
              Description: 'Invalid field clientIdentifier value in object clientIdentifierSearch. Validation error: must not be null'
              Recoverable: false
    BadRequestNullAccountContractIdentifierExample:
      value:
        Errors:
          Error:
            - Source: MASTERCARD PROCESSING
              ReasonCode: REQUEST_VALIDATION
              Description: 'Invalid field accountContractIdentifier value in object accountContractIdentifierSearch. Validation error: must not be null'
              Recoverable: false
    BadRequestMissingDataTypeToSecureExample:
      value:
        Errors:
          Error:
            - Source: MASTERCARD PROCESSING
              ReasonCode: REQUEST_VALIDATION
              Description: Missing required request parameter data_type_to_secure.
              Recoverable: false
    BadRequestMissingTransactionSelectorTypeExample:
      value:
        Errors:
          Error:
            - Source: MASTERCARD PROCESSING
              ReasonCode: REQUEST_VALIDATION
              Description: Missing required request parameter transaction_selector_type.
              Recoverable: false
    AccountContractNotFoundExample:
      value:
        Errors:
          Error:
            - Source: MASTERCARD PROCESSING
              ReasonCode: ACCOUNT_CONTRACT_DOES_NOT_EXIST
              Description: Account contract with id 99999 not found.
              Recoverable: false
    ClientNotFoundExample:
      value:
        Errors:
          Error:
            - Source: MASTERCARD PROCESSING
              ReasonCode: CLIENT_DOES_NOT_EXIST
              Description: Client with id 99999 not found.
              Recoverable: false
    CardContractNotFoundExample:
      value:
        Errors:
          Error:
            - Source: MASTERCARD PROCESSING
              ReasonCode: CARD_CONTRACT_DOES_NOT_EXIST
              Description: Card contract with id 99999 not found.
              Recoverable: false
    ContractNotFoundExample:
      value:
        Errors:
          Error:
            - Source: MASTERCARD PROCESSING
              ReasonCode: CONTRACT_DOES_NOT_EXIST
              Description: Contract with id 99999 not found.
              Recoverable: false
    OperationDeniedExample:
      value:
        Errors:
          Error:
            - Source: MASTERCARD PROCESSING
              ReasonCode: OPERATION_DENIED
              Description: Operation <operationId> is disabled in your API configuration.
              Recoverable: false
    TransactionNotFoundExample:
      value:
        Errors:
          Error:
            - Source: MASTERCARD PROCESSING
              ReasonCode: TRANSACTION_DOES_NOT_EXIST
              Description: Transaction with id 99999 not found.
              Recoverable: false
    PreconditionExample:
      value:
        Errors:
          Error:
            - Source: MASTERCARD PROCESSING
              ReasonCode: INVALID_ETAG
              Description: "The ETag of resource doesn't match value in If-Match header."
              Recoverable: false
