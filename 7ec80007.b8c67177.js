(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{77:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return l}));var a=n(3),r=n(7),i=(n(0),n(85)),s={slug:"/",id:"usage",title:"Usage"},o={unversionedId:"usage",id:"usage",isDocsHomePage:!1,title:"Usage",description:"API def provides a unified way to type your endpoints allowing for compile time checking of query, body, response and even url parameters.",source:"@site/docs\\usage.md",slug:"/",permalink:"/api-def/",editUrl:"https://github.com/censkh/api-def/edit/master/website/docs/usage.md",version:"current",sidebar:"someSidebar",next:{title:"Config",permalink:"/api-def/config"}},c=[{value:"Getting Started",id:"getting-started",children:[]},{value:"Defining Endpoints",id:"defining-endpoints",children:[]},{value:"Calling an Endpoint",id:"calling-an-endpoint",children:[]},{value:"Typing Body, Query &amp; Params",id:"typing-body-query--params",children:[]},{value:"Setting Expected Return Statuses",id:"setting-expected-return-statuses",children:[]}],p={toc:c};function l(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"API def provides a unified way to type your endpoints allowing for compile time checking of query, body, response and even url parameters."),Object(i.b)("h2",{id:"getting-started"},"Getting Started"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-commandline"}),"npm i api-def\n")),Object(i.b)("p",null,"First we define our base API and give it a base URL which is the root path of your remote service:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="/api.ts"',title:'"/api.ts"'}),'import {Api} from "api-def";\n\nconst api = new Api({\n  name   : "My Backend",\n  baseUrl: "http://localhost:5000/v1",\n});\n\nexport default api;\n')),Object(i.b)("h2",{id:"defining-endpoints"},"Defining Endpoints"),Object(i.b)("p",null,"Now let's define some endpoints we can call! Let's start with a simple definition of a health check endpoint:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="/api.ts"',title:'"/api.ts"'}),'export const fetchHealthCheck = api.endpoint()\n  .responseOf<{ success: boolean; }>()\n  .build({\n    id: "fetch_health_check",\n\n    name       : "Health Check",\n    description: "Returns success as true",\n\n    path        : "/status/health-check",\n    method      : "get",\n  });\n')),Object(i.b)("p",null,"You can see that we give the endpoint an ",Object(i.b)("inlineCode",{parentName:"p"},"id"),", ",Object(i.b)("inlineCode",{parentName:"p"},"path")," and ",Object(i.b)("inlineCode",{parentName:"p"},"method"),". The ",Object(i.b)("inlineCode",{parentName:"p"},"path")," will be appended to the ",Object(i.b)("inlineCode",{parentName:"p"},"baseUrl")," in our API object."),Object(i.b)("p",null,"We can also provide optional ",Object(i.b)("inlineCode",{parentName:"p"},"name")," and ",Object(i.b)("inlineCode",{parentName:"p"},"description")," which will help document our API and can be used in dev tools ect."),Object(i.b)("h2",{id:"calling-an-endpoint"},"Calling an Endpoint"),Object(i.b)("p",null,"To call our endpoint we can use the ",Object(i.b)("inlineCode",{parentName:"p"},"submit")," function, which will ",Object(i.b)("inlineCode",{parentName:"p"},"GET")," the URL ",Object(i.b)("inlineCode",{parentName:"p"},"http://localhost:5000/v1/status/health-check"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:"{2}","{2}":!0}),"const makeRequest = async () => {\n  const res = await fetchHealthCheck.submit({});\n  return res.data.success; // true\n};\n")),Object(i.b)("h2",{id:"typing-body-query--params"},"Typing Body, Query & Params"),Object(i.b)("p",null,"In most cases we will want to make more complex requests, for example fetching and updating user information. Using ",Object(i.b)("inlineCode",{parentName:"p"},"api-def")," you can also type the query, body and URL params that you pass in when you want to make one of these queries:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="/api.ts"',title:'"/api.ts"'}),'interface UserData {\n    firstName: string;\n    age: number;\n}\n\nexport const fetchUser = api.endpoint()\n  .paramsOf<"uid">()\n  .responseOf<UserData & { id: string }>()\n  .build({\n    id: "fetch_user",\n\n    name       : "Fetch User",\n    description: "Fetch a user, will respond with error code \'auth/permission-denied\' if unauthorized",\n\n    path        : "/user/:uid",\n    method      : "get",\n  });\n')),Object(i.b)("p",null,"When calling this endpoint, it is verified that all params are resolved in the path:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),'const res = await fetchUser.submit({\n  params: {\n      uid: "exampleId"\n  }\n});\nreturn res.data // { uid: "exampleId", firstName: "Hello World", age: 22 }\n')),Object(i.b)("hr",null),Object(i.b)("p",null,"Now let's add the endpoint to update a user and see how we can type our body:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="/api.ts"',title:'"/api.ts"'}),'export const updateUser = api.endpoint()\n  .paramsOf<"uid">()\n  .bodyOf<{ data: Partial<UserData> }>()\n  .responseOf<UserData & { id: string }>()\n  .build({\n    id: "update_user",\n\n    name       : "Update User",\n    description: "Updates a user, will respond with error code \'auth/permission-denied\' if unauthorized",\n\n    path        : "/user/:uid",\n    method      : "post",\n  });\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),'const res = await updateUser.submit({\n  params: {\n      uid: "exampleId"\n  },\n  body: {\n      data: {\n          firstName: "Test"\n      }\n  }\n});\nreturn res.data // { uid: "exampleId", firstName: "Test", age: 22 }\n')),Object(i.b)("h2",{id:"setting-expected-return-statuses"},"Setting Expected Return Statuses"),Object(i.b)("p",null,"By default a successful call is one that returns a status of ",Object(i.b)("inlineCode",{parentName:"p"},"200")," to ",Object(i.b)("inlineCode",{parentName:"p"},"299"),". You can override this in the endpoint config with a combination of ranges, and single values."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="/api.ts (status override)"',title:'"/api.ts',"(status":!0,'override)"':!0}),'export const fetchHealthCheck = api.endpoint()\n  .responseOf<{ success: boolean; }>()\n  .build({\n    id: "fetch_health_check",\n\n    name       : "Health Check",\n    description: "Returns success as true",\n\n    path        : "/status/health-check",\n    method      : "get",\n    config      : {\n      acceptableStatus : [[301, 302], 200],\n    },\n  });\n')))}l.isMDXComponent=!0},85:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=r.a.createContext({}),l=function(e){var t=r.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=l(n),b=a,m=d["".concat(s,".").concat(b)]||d[b]||u[b]||i;return n?r.a.createElement(m,o(o({ref:t},p),{},{components:n})):r.a.createElement(m,o({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=b;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var p=2;p<i;p++)s[p]=n[p];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);